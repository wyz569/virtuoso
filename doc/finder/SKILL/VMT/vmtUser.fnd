;SKILL Language Functions
("vmtCompareSipToOa"
"vmtCompareSipToOa(
t_sipFile 
[?refLib t_refLib] 
[?refCell t_refCell] 
[?refView t_refView] 
[?destLib t_destLib]
[?destCell t_destCell] 
[?destView t_destView] 
[?aperture x_aperture] 
[?createStatic g_createStatic] 
[?trueMarkerShapes g_trueMarkerShapes]
)
=> t / nil"
"Compares the contents of the specified Allegro SiP layout file and Virtuoso module layout and generates a new layout cellview containing only the parts of the two designs that are different. This is done by performing an XOR boolean operation for an Allegro SiP layout file and a Virtuoso module layout (OpenAccess layout) to create a new layout with XOR shapes and the merged shapes from the SiP layout and OpenAccess layout or database. The comparison is done with the saved representation of the Virtuoso layout not the unsaved OpenAccess database in memory.")
("vmtcsvCreateComponentCellViewsFromCsv"
"vmtcsvCreateComponentCellViewsFromCsv(
t_templateLibName 
t_templateCellName
t_footPrintLibName
t_csvFileName
x_cdfParamNameLineNumber
t_destLibName 
t_destCellName
[?ignoreLineNumbers t_ignoreLineNumbers] 
[?ignoreColumnNumbers t_ignoreColumnNumbers] 
[?cdfParamPromptLineNumber x_cdfParamPromptLineNumber] 
[?partNameToImport t_partNameToImport]
[?termMap t_termMap] 
[?termOrder t_termOrder] 
[?paramMap t_paramMap] 
[?sparamModel g_sparamModel] 
[?spiceModel g_spiceModel]
[?overwriteSymbol g_overwriteSymbol] 
[?mode t_mode] 
[?footPrintViewName t_footPrintViewName] 
[?draDir t_draDir] 
[?pinNameToNumberFileName t_pinNameToNumberFileName]
[?class t_class] 
[?sipFileName t_sipFileName]
)
=> t / nil"
"Imports a CSV file and creates CDF parameters for the column values in the CSV file and symbol, TILP, and other simulation views.")
("vmtcsvInstallCsvFile"
"vmtcsvInstallCsvFile(
t_destLibName 
t_destCellName
t_csvFileName
x_cdfParamNameLineNumber
[?ignoreLineNumbers t_ignoreLineNumbers] 
[?ignoreColumnNumbers t_ignoreColumnNumbers] 
[?cdfParamPromptLineNumber x_cdfParamPromptLineNumber] 
[?partNameToImport t_partNameToImport]
[?paramMap t_paramMap] 
[?mode t_mode] 
)
=> t / nil"
"Installs the CSV file into the destination cellview and creates the CDF parameters corresponding to the columns in the CSV file.")
("vmtLibImport"
"vmtLibImport(
t_inputFileName 
t_libName
[?importDra g_importDra] 
[?draSMDImportMode g_draSMDImportMode] 
[?draNoSMDImportMode g_draNoSMDImportMode] 
[?refLibName t_refLibName]
[?importTechOnly g_importTechOnly] 
[?component t_component] 
[?overwrite g_overwrite] 
[?createSymbols g_createSymbols] 
)
=> t / nil"
"Creates a library containing technology and components from the specified SiP layout file. The library contains TILPs, footprints, and schematic symbols for dies, packages, SMDs, embedded components, and padstacks in a SiP layout file. When importing a layout from the Allegro platform to Virtuoso Studio, the ratio of DataBase Unit Per User Unit remains 1:1. This means the resolution of a layout remains during the import. While creating the library, if files or cellviews are checked in, autocheckin is added as a comment by the Library Manager.")
("vmtValidateUnifiedLibrary"
"vmtValidateUnifiedLibrary(
[ ?libName t_libName ] 
[ ?cellView x_cellView ] 
[ ?viewList t_viewList ] 
)
=> numErrors / nil"
"Validates the existence of required views and cross-view consistency in the cells of a library or the master libraries for all the instances in a design. If a library name is provided, all the cells in the library that match the specified list of views are opened and added to a list for validation. If a cellview is specified, the specific cell is added to a list for validation. If no library name or cellview is provided, no validation is performed.")
("vrfCheckTILPVersion"
"vrfCheckTILPVersion(
x_dbId
[ ?reportAll g_reportAll ]
[ ?fileName g_fileName ]
)
=> t / nil"
"Checks the version of the TILP from the given ID, which can be of an instance, cellview, library, or sub-master cellview. There are warnings and errors generated when checks are performed. Warning messages are issued for the TILP versions that are compatible with the current version of the tool. You need to upgrade the TILP only if the associated features are going to be used. For example, if you want to use a new feature, the die TILP needs to be updated. Error messages indicate that the TILP versions must be updated before use in the current version of the tool. Otherwise, the tool does not work as expected. For example, die TILP V1 is not compatible with the tool version post ICADVM18.1ISR10.")
("vrfComplianceAudit"
"vrfComplianceAudit(
g_cellViewId
[ ?dieAuditTemplateFile t_dieAuditTemplateFile ]
[ ?libCheck g_libCheck ]
[ ?termsCheck g_termsCheck ]
[ ?icSymbolCheck g_icSymbolCheck ]
[ ?ioCheck g_ioCheck ]
[ ?otherChecks g_otherChecks ]
)
=> t / nil"
"Performs various preliminary checks on an IC layout with the use of a template file.")
("vrfExportLayoutSkill"
"vrfExportLayoutSkill(
g_cellViewId
t_frontPinLayer
t_backPinLayer
[ ?dieInterfaceType t_dieInterfaceType ]
[ ?includeUnconnectedBump g_includeUnconnectedBump ]
[ ?pinNumbering t_pinNumbering ]
[ ?pinNumberFile t_pinNumberFile ]
[ ?abstractLib t_abstractLib ]
[ ?attachSParam g_attachSParam ]
[ ?sParamView t_sParamView ]
[ ?modelFile t_modelFile ]
[ ?shortPinLib t_shortPinLib ]
[ ?shortPinCell t_shortPinCell ]
[ ?frontLabelLPP t_frontLabelLPP ]
[ ?backLabelLPP t_backLabelLPP ]
[ ?csvFileName t_csvFileName ]
[ ?areaTransferFile t_areaTransferFile ]
[ ?abstractViewCell t_exportNoBumpTerm ]
[ ?exportNoBumpTerm g_exportNoBumpTerm ]
[ ?deleteViewsBeforeExport g_deleteViewsBeforeExport ]
[ ?outputMode t_outputMode ]
)
=> t / nil"
"Exports the die for IC layouts. The function supports both IO cell and Shape with overlapping label as Die Interface Type. It generates a package type library that contains abstract, Technology Independent Layout Pcells (TILPs), schematic, and symbol views. The abstract view is the base cellview for the Pcell generated layout, that is, TILP. The schematic is the wrapper schematic for the IC symbol. The symbol view is used to instantiate the generated die symbol in a package schematic.")
("vrfExportPackage"
"vrfExportPackage(
g_cellViewId
t_frontPinLayer
t_backPinLayer
[ ?instanceNames t_instanceNames ]
[ ?abstractLib t_abstractLib ]
[ ?ecoMode g_ecoMode ]
[ ?attachSParam g_attachSParam ]
[ ?sParamView t_sParamView ]
[ ?modelFile t_modelFile ]
[ ?shortPinLib t_shortPinLib ]
[ ?shortPinCell t_shortPinCell ]
[ ?csvFileName t_csvFileName ]
[ ?abstractViewCell t_abstractViewCell ]
)
=> t / nil"
"Exports the specified package layout if its sipObjectType value is set to package. Use the instanceNames argument to specify the instance names to search master views for identifying candidate IO cells to be exported. The IO cells to be exported should have the cellType defined as coverBump or pad. The shapes in the master views must match the front or back layer-purpose pairs specified in the SKILL function arguments. Only the sub-master views of the package instances and IO cells are processed, not the super-master views. To export a package layout, there should be top-level terminals in the layout. Also, all the package type instances in a package layout must be fully connected to top-level terminals.")
("vrfLowerPriority"
"vrfLowerPriority(
d_dynShapeId
)
=> t / nil"
"Lowers the priority of a specified dynamic shape so that it is one unit less than the lowest priority currently set for dynamic shapes on the layer.")
("vrfHiUpdate"
"vrfHiUpdate()
=> t / nil"
"Starts to process diestacks after creating a stackable object. This function must be used when instances are created in a script.")
("vrfRaisePriority"
"vrfRaisePriority(
d_dynShapeId
)
=> t / nil"
"Raises the priority of a specified dynamic shape so that it is one unit higher than the maximum priority currently set for dynamic shapes on the layer.")
("vrfSipSet"
"vrfSipSet(
d_objID
t_attrName
g_attrValue
)
=> t / nil"
"Sets attributes for a specified object.")
("vrfSipGet"
"vrfSipGet(
d_objID
t_attrName
)
=> g_attrValue / nil"
"Retrieves values of a specified attribute of an object.")
("vrfTLineAbut"
"vrfTLineAbut(
t_instA
t_instB
t_pinA
t_pinB
t_pinAside
t_conn
n_event
d_group
d_chain
)
=> t / nil"
"Abuts two transmission line instances with the required specifications and issues a warning if the device cannot be abutted.")
("vrfUpdateTILPVersion"
"vrfUpdateTILPVersion(
x_dbId
[ ?types g_types ]
[ ?cells g_cells ]
[ ?fileName g_fileName ]
)
=> t / nil"
"Updates the super-master cellviews that have version lower than the latest version of the given TILP from the given ID, which can be of an instance, cellview, library, or sub-master cellview.")