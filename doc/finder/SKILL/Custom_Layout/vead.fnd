;SKILL Language Functions
("elecCreateDataSetCSVTemplate"
"elecCreateDataSetCSVTemplate( 
t_libName
t_cellName
t_viewName
t_fileName
[ ?resultTypes l_resultTypes ]
[ ?maxHierLevel n_maxHierLevel ]
[ ?scaleFactors l_scaleFactors ]
)
=> t / nil"
"Creates a CSV template file for a given schematic cellview in a format that can be later used to fill in the current or voltage values, and to create an EAD dataset from it.")
("electDeleteDatasets"
"elecDeleteDataSets( 
t_libName
t_cellName
t_viewName
[ ?dataSetList l_dataSetList ]
[ ?dataSetType l_dataSetType ]
)
=> t / nil"
"Deletes electrical data from the specified design. This function can be used for both layout and schematic view of a design.")
("eadDeleteScratchLib"
"eadDeleteScratchLib(
)
=> t / nil"
"Deletes all data from the scratch library that contains data related to the scratch layout.")
("elecGetEnableEADMode"
"elecGetEnableEADMode(
t_sessionName
[ ?historyName t_historyName ]
)
=> t / nil"
"Returns the current status of the Enable Electrical Data Capture for EAD Flow check box in the EAD Setup form for the specified session and history name.")
("elecSetEnableEADMode"
"elecSetEnableEADMode(
t_sessionName
g_value
[ ?historyName t_historyName ]
)
=> t / nil"
"Selects or deselects the Enable Electrical Data Capture for EAD Flow check box in the EAD Setup form for the specified session and history name.")
("elecGetCurrentData"
"elecGetCurrentData( 
t_libName
t_cellName
t_viewName
t_dataSetName 
t_terminalName
[ t_measurementType ]
)
=> t / nil"
"Gets the electrical data for the specified terminal in the given cellview. The data is retrieved from the specified dataset.")
("elecGetDataSetNames"
"elecGetDataSetNames( 
t_libName
t_cellName
t_viewName
[ t_dataSetType ]
)
=> l_dataSetNames / nil"
"Gets the list of available result datasets for a given design. Also see EM Dataset.")
("elecGetDataSetParamsPropValue"
"elecGetDataSetParamsPropValue( 
t_libName
t_cellName
t_viewName
t_dataSetName
t_paramName
)
=> t_paramValue / nil"
"Gets the value for the given parameter from the property list of the given dataset saved for the given cellview.")
("elecMakeDefaultDatasetName"
"elecMakeDefaultDatasetName(
t_sessionName
t_historyName
t_dutLibName
t_dutCellName
t_dutViewName
t_dutInstance
t_cornerName
t_temperature
t_designPoint
t_testName
)
=> t_defaultDatasetName"
"Returns the user-defined default name of the dataset to be displayed in the DUT Dataset field of the EAD results view.")
("elecUpdateDataSetParamsPropValue"
"elecUpdateDataSetParamsPropValue( 
t_libName
t_cellName
t_viewName
t_dataSetName
t_paramName
t_paramValue
)
=> t / nil"
"Updates the value for a parameter/property of the given dataset saved for the given cellview. You can use this function to modify the value of a dataset property for a schematic or layout view.")
("elecGetVoltageData"
"elecGetVoltageData(
t_libName
t_cellName
t_viewName
t_dataSetName
t_terminalName
[ t_measurementName ]
)
=>"
"Returns the Vmin and Vmax values for the specified terminal in a dataset.")
("elecGetVsyncEnabled"
"elecGetVsyncEnabled( 
t_adeSession
)
=> t / nil"
"Returns whether the creation of post-simulation voltage constraints is enabled or disabled.")
("elecSetVsyncEnabled"
"elecSetVsyncEnabled( 
t_adeSession
g_value
)
=> t / nil"
"Enables or disables the creation of post-simulation voltage constraints.")
("elecVdrCreateConstraints"
"elecVdrCreateConstraints( 
inputToUserFunction
outputFromUserFunction
)
=> l_constraintID / nil"
"Creates a post-simulation voltageSyncedNet constraint at the DUT level when called from a user-defined function, which has been specified using the customVoltageConstraintFunc environment variable.")
("elecVdrCreateDeltaV"
"elecVdrCreateDeltaV( 
inputToUserFunction
outputFromUserFunction
)
=> l_constraintID / nil"
"Creates a post-simulation deltaVoltage constraint at the DUT level when called from a user-defined function, which has been specified using the customVoltageConstraintFunc environment variable.")
("eadAddNetsToNetGroup"
"eadAddNetsToNetGroup(
x_cellViewID
t_groupName
?netNames l_netNames
?regExp t_regExp
?file t_fileName
)
=> t / nil"
"Adds the specified nets to an existing net group for the given cellview.")
("eadCreateDataSetFromLayCSV"
"eadCreateDataSetFromLayCSV(
d_cvId
t_datasetName
t_fileName
)
=> t / nil"
"Creates a user-defined dataset, with the specified name, in the given layout cellview using the electrical current values from the specified layout CSV file.")
("eadCreateDataSetFromSchCSV"
"eadCreateDataSetFromSchCSV(
d_cvId
t_datasetName
t_fileName
)
=> t / nil"
"Creates a user-defined dataset, with the specified name, in the given layout cellview using the electrical current values from the specified schematic CSV file.")
("eadCreateDataSetLayCSVTemplate"
"eadCreateDataSetLayCSVTemplate(
d_cvId
t_fileName
)
=> t / nil"
"Creates a CSV template file for a given layout cellview in a format that can be used later to fill in current values and to create a user-defined EAD dataset from it.")
("eadCreateNetGroup"
"eadCreateNetGroup(
x_cellViewID
t_groupName
?netNames l_netNames
?regExp t_regExp
?file t_fileName
)
=> t / nil"
"Creates a new net group by the given name in the given cellview. If given, it can also contain the nets.")
("eadDeleteNetGroup"
"eadDeleteNetGroup(
x_cellViewID
t_groupName
)
=> t / nil"
"Deletes a net group from the given cellview.")
("eadExtractParasiticsForDesign"
"eadExtractParasiticsForDesign(
w_winId
)
=> t / nil"
"Extracts parasitics for the specified layout window if the EAD Browser is initialized. You can configure extraction options on the EAD Options form.")
("eadGetAllEMDatasets"
"eadGetAllEMDatasets(
)
=> l_emDatasets / nil"
"Returns a list of all EM datasets present in the current design")
("eadGetNetsInNetGroup"
"eadGetNetsInNetGroup(
t_eventName
)
=> t_eventDescription / nil"
"Lists all the nets contained in the specified net group of the given cellview.")
("eadGetTriggerDesc"
"eadGetTriggerDesc(
t_eventName
)
=> t_eventDescription / nil"
"Provides a description about the given event and the arguments required by the SKILL triggers registered for that event.")
("eadGetLocCurrentLimit"
"eadGetLocCurrentLimit(
w_winId
l_point
t_layerName
[ ?direction t_direction ]
[ ?pulseWidth n_pulseWidth ]
[ ?dutyCycleRatio n_dutyCycleRatio ]
[ ?rmsMetalLineNum n_rmsMetalLineNum ]
[ ?hiEM n_hiEM ]
)
=> l_limit / nil"
"Returns the current carrying EM limit of a resistor on the specified location. Additional arguments, such as ?pulseWidth and ?hiEM can be specified to match specific EM rules in the EAD technology file or the ICT-EM file.")
("eadJobClose"
"eadJobClose(
x_windowID
t_jobConfigurationFile
)
=> t / nil"
"Collects results from the batch jobs submitted to computer farms or dedicated servers for distributed computation. When all the distributed jobs are completed successfully, you can use this command to collect extraction results from each job. The parasitic results from individual batch run are combined into one OA database and automatically displayed in the EAD browser summary table.")
("eadJobStatus"
"eadJobStatus(
x_windowID
t_jobConfigurationFile
)
=> t / t_jobStatus"
"Returns the status of batch jobs submitted to computer farms or dedicated servers for distributed computation.")
("eadJobSubmit"
"eadJobSubmit(
x_windowID
t_jobConfigurationFile
)
=> t / nil"
"Submits batch jobs to computer farms or dedicated servers for distributed computation.")
("eadLoadSetup"
"eadLoadSetup(
w_winId
t_setupFile
)
=> t / nil"
"Initializes the EAD Browser in the specified layout window with the given setup file.")
("eadPreEMSetUserStopCVList"
"eadPreEMSetUserStopCVList(
l_libraryCells
)
=> t / nil"
"Sets all or the specified cells of user-specified libraries as stop views. The instances of the specified cells are not descended further during the pre-EM checks.")
("eadRegTrigger"
"eadRegTrigger(
t_eventName
t_callbackProcName
n_priority
)
=> t / nil"
"Registers a user-defined callback SKILL function for the specified event or trigger with the given priority. You can create custom callback functions to perform necessary updates when these events are triggered.")
("eadRegisterCustomEMVariable"
"eadRegisterCustomEMVariable(
t_varName
)
=> t / nil"
"Registers a variable as a custom variable for the purpose of EM calculation. By using the eadSetEMVariable function, you can vary the value of the registered variable before running EM checks. If a variable is not registered, modifying its values does affect EM calculations.")
("eadRemoveNetsFromNetGroup"
"eadRemoveNetsFromNetGroup(
x_cellViewID
t_groupName
?netNames l_netNames
?regExp t_regExp
?file t_fileName
)
=> t / nil"
"Removes the given nets from the specified net group of the given cellview.")
("eadRemoveParasitics"
"eadRemoveParasitics(
t_libName
t_cellName
t_viewName
)
=> t / nil"
"Deletes the parasitic information associated with the specified layout design and saves the design (provided there were no other unsaved changes prior to calling the function).")
("eadSetEMVariable"
"eadSetEMVariable(
g_varName
[ g_varValue ]
[ g_layerName ]
[ g_analysisPointName ]
)
=> t / nil"
"Sets the value of a custom variable registered by eadRegisterCustomEMVariable. The value is used by the EM limit calculation expressions in the ICT-EM file.")
("elecTransferDataSets"
"elecTransferDataSets(
t_libName
t_cellName
t_viewName
[ ?dataSetList l_dataSetList ]
[ ?dataSetType t_dataSetType ]
[ ?schLCV g_schLCV ]
[ ?needToSave g_needToSave ]
)
=> t / nil"
"Transfers datasets from schematic to layout. By default, the function transfers all the datasets from schematic to layout. You can use the key arguments to transfer specific datasets.")
("eadUnregTrigger"
"eadUnregTrigger(
t_eventName
t_triggerName
)
=> t / nil"
"Removes the entry for the specified SKILL trigger from the registered list of triggers for the given event. When the specified event occurs, the remaining registered triggers, if any, for that event get executed in their order of priority.")
("eadInitializeDesign"
"eadInitializeDesign(
t_layoutDesignCellViewId
t_eadSetupFile
t_cornerName
)
=> t / nil"
"Initializes the specified layout design with the specified EAD setup and corner name.")
("eadExtractParasitics"
"eadExtractParasitics(
t_layoutDesignCellViewId
[ l_netNames ]
)
=> t / nil"
"Extracts parasitics from the specified layout design.")
("eadRemoveDesignParasitics"
"eadRemoveDesignParasitics(
t_layoutDesignCellViewId
)
=> t / nil"
"Removes the parasitics extracted from the specified layout design.")
("eadRunEM"
"eadRunEM(
d_cellViewID
[ l_netNames ]
)
=> t / nil"
"Runs EM analysis on all nets or on a list of specified nets in the specified layout design.")
("eadSaveSummaryTableToCSV"
"eadSaveSummaryTableToCSV(
t_csvFileName
)
=> t / nil"
"Exports data from the Net Summary table of the EAD Browser to the specified CSV file.")
("eadSetCurrentDataset"
"eadSetCurrentDataset(
d_cellViewID
t_datasetName
)
=> t / nil"
"Sets the specified dataset as the active electrical dataset in the EAD Browser of the specified layout cellview.")