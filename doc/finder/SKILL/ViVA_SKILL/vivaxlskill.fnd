;SKILL Language Functions
("awvAddSubwindow"
"awvAddSubwindow(
w_windowID
)
=> x_subwindow / nil"
"Adds a subwindow to the specified Waveform window.")
("awvAnalog2Digital"
"awvAnalog2Digital(
o_waveform
n_vhi
n_vlo
n_vc
n_timeX
t_thresholdType
[ ?releaseMemory g_releaseMemory ]
=> o_digWave / n_digValue / nil"
"Returns the digital form of the analog input, which can be a waveform, a list or family of waveforms, or a string representation of expressions.")
("awvAppendExpression"
"awvAppendExpression(
w_windowID
t_expr
l_context
[ ?expr l_exprList ]
[ ?index l_waveIndexList ]
[ ?color l_colorList ]
[ ?lineType l_lineTypeList ]
[ ?lineStyle l_lineStyleList ]
[ ?lineThickness l_lineThicknessList ]
[ ?showSymbols l_showList ]
[ ?dataSymbol l_symbolList ]
[ ?barBase t_barBase ]
[ ?barWidth t_barWidth ]
[ ?barShift t_barShift ]
[ ?subwindow x_subwindow ]
)
=> t / nil"
"Evaluates the t_expr expression and adds the resulting waveforms to a subwindow.")
("awvAppendList"
"awvAppendList(
w_windowID
l_yListList
l_xList
[ ?expr l_exprList ]
[ ?index l_waveIndexList ]
[ ?color l_colorList ]
[ ?lineType l_lineTypeList ]
[ ?lineStyle l_lineStyleList ]
[ ?lineThickness l_lineThicknessList ]
[ ?showSymbols l_showList ]
[ ?dataSymbol l_symbolList ]
[ ?barBase t_barBase ]
[ ?barWidth t_barWidth ]
[ ?barShift t_barShift ]
[ ?subwindow x_subwindow ]
)
=> t / nil"
"Plots y values in l_yListList against x values in l_xListList and adds the resulting waveforms to a subwindow.")
("awvAppendWaveform"
"awvAppendWaveform(
w_windowID
l_waveformList
[ ?subwindow x_subwindow ]
[ ?expr l_exprList ]
[ ?index l_waveIndexList ]
[ ?component t_component ]
[ ?color l_colorList ]
[ ?lineType l_lineTypeList ]
[ ?lineStyle l_lineStyleList ]
[ ?lineThickness l_lineThicknessList ]
[ ?showSymbols l_showList ]
[ ?dataSymbol l_symbolList ]
[ ?barBase t_barBase ]
[ ?barWidth t_barWidth ]
[ ?barShift t_barShift ]
)
=> t / nil"
"Plots the waveforms in the list l_waveformList and appends them in a subwindow of the specified Waveform window.")
("awvClearSubwindowHistory"
"awvClearSubwindowHistory(
w_windowID
[ ?subwindow x_subwindow ]
)
=> t / nil"
"Erases the contents from a subwindow of the specified Waveform window.")
("awvClearPlotWindow"
"awvClearPlotWindow(
w_windowID
)
=> t / nil"
"Clears the graphs shown in the specified Waveform window. History for the window and the subwindows are maintained.")
("awvClearWindowHistory"
"awvClearWindowHistory(
w_windowID
[ ?force g_force ]
)
=> t / nil"
"Erases the contents of the specified Waveform window.")
("awvCloseCalculator"
"awvCloseCalculator(
[ t_sessionName ]
)
=> t / nil"
"Closes the Calculator invoked from the current session or from the specified session.")
("awvCloseWindow"
"awvCloseWindow(
w_windowID
)
=> t / nil"
"Closes the specified Waveform window.")
("awvCloseWindowMenuCB"
"awvCloseWindowMenuCB(
)
=> t / nil"
"Closes the current window. This function is defined in dfII/etc/context/awv.cxt.")
("awvCreateBus"
"awvCreateBus(
t_busName
l_waveList
r_radix
)
=> o_bus / nil"
"Creates a digital bus from the specified digital waveforms and the radix type.")
("awvCreateBusFromWaveList"
"awvCreateBusFromWaveList(
l_waveList
[ ?busType t_busType ]
)
=> o_bus / nil"
"Creates a digital bus from a list of specified digital waveforms.")
("awvCreatePlotWindow"
"awvCreatePlotWindow(
[ ?parentWindow w_windowID ]
[ ?graphType t_graphType ]
)
=> w_windowID / nil"
"Creates a Waveform window and returns its window ID.")
("awvDeleteAllWaveforms"
"awvDeleteAllWaveforms(
w_windowID
[ ?subwindow x_subwindow ]
)
=> t / nil"
"Deletes all waveforms from a subwindow of the specified Waveform window.")
("awvDeleteMarker"
"awvDeleteMarker(
w_windowID
t_bookmarkIDs
[ ?subwindow x_subwindow ]
)
=> t / nil"
"Deletes the specified bookmarks from a subwindow of the specified Waveform window.")
("awvDeleteSubwindow"
"awvDeleteSubwindow(
w_windowID
[ ?subwindow x_subwindow ]
)
=> t / nil"
"Deletes a subwindow from the specified Waveform window.")
("awvDeleteWaveform"
"awvDeleteWaveform(
w_windowID
x_index
[ ?subwindow x_subwindow ]
)
=> t / nil"
"Deletes the specified waveform from a subwindow of the specified Waveform window.")
("awvDigital2Analog"
"awvDigital2Analog(
o_waveform
n_vHi
n_vLo
s_VX
[ ?mode s_mode ]
[ ?outWaveType s_outWaveType ]
[ ?vprevSTART s_vprevSTART ]
)
=> o_waveform / nil"
"Returns the analog form of the specified digital waveform.")
("awvDisableRedraw"
"awvDisableRedraw(
w_windowID
g_disable
)
=> t / nil"
"Disables or enables redraw of the Waveform window based on the value of the g_disable argument. You might use this function to freeze the Waveform window display, send several plots to the window, then unfreeze the window to display all the plots at once.")
("awvDisplayDate"
"awvDisplayDate(
w_windowID
)
=> t / nil"
"Displays the current data and time in the top-right corner of the specified Waveform window.")
("awvDisplayGrid"
"awvDisplayGrid(
w_windowID
g_on
[ ?subwindow x_subwindow ]
)
=> t / nil"
"Displays or hides grids in a subwindow of the specified Waveform window.")
("awvDisplaySubwindowTitle"
"awvDisplaySubwindowTitle(
w_windowID
t_title
[ ?subwindow x_subwindow ]
)
=> t / nil"
"Displays the specified title in a subwindow of the specified Waveform window.")
("awvDisplayTitle"
"awvDisplayTitle(
w_windowID
t_title
)
=> t / nil"
"Displays the specified title in the specified Waveform window.")
("awvEraseWindowMenuCB"
"awvEraseWindowMenuCB(
)
=> t"
"Deletes all the objects from a Waveform window. The function is defined in dfII/etc/context/awv.cxt.")
("awvEval"
"awvEval(
t_placeholder
t_expr
)
=> t_expr"
"Returns the second argument. The first argument is only a placeholder argument.")
("awvExitWindowFunctionAdd"
"awvExitWindowFunctionAdd(
u_function
)
=> t / nil"
"Adds a function to the list of exit functions that are called when you close a Waveform window or exit Cadence software while a Waveform window is open.")
("awvExitWindowFunctionDel"
"awvExitWindowFunctionDel(
u_function
)
=> t / nil"
"Deletes a function from the list of functions that are called when you close a Waveform window or exit Cadence software while a Waveform window is open.")
("awvExitWindowFunctionGet"
"awvExitWindowFunctionGet(
)
=> l_exitFunctionList / nil"
"Returns a list of names of functions that are called when you close a Waveform window or exit Cadence software while a Waveform window is open.")
("awvEyeCross"
"awvEyeCross(
w_waveform
n_start
n_stop
n_eyePeriod
n_threshold
[ x_edgeType ]
[ x_ignoreStart ]
[ x_ignoreEnd ]
)
=> o_waveform / nil"
"Returns a waveform showing x-axis values where an eye diagram crosses the specified threshold value on y axis.")
("awvGetAssertName"
"awvGetAssertName(
o_waveform
)
=> t_assertName / nil"
"Returns the name of the assert defined in violation data.")
("awvGetCurrentSubwindow"
"awvGetCurrentSubwindow(
w_windowID
)
=> x_subwindow / nil"
"Returns the identification number of the current subwindow in the specified Waveform window.")
("awvGetCurrentWindow"
"awvGetCurrentWindow(
)
=> w_windowID / nil"
"Returns the window ID of the current Waveform window.")
("awvGetDisplayMode"
"awvGetDisplayMode(
w_windowID
[ ?subwindow x_subwindow ]
)
=> t_mode / nil"
"Returns display mode of a subwindow of the specified Waveform window.")
("awvGetDrawStatus"
"awvGetDrawStatus(
w_windowID
)
=> t / nil"
"Returns the draw status of the specified Waveform window.")
("awvGetHiWindow"
"awvGetHiWindow(
w_windowID
)
=> t / nil"
"Returns the ID of the waveform HI window corresponding to the specified Waveform window ID.")
("awvGetInitializationTimeout"
"awvGetInitializationTimeout(
)
=> x_timeOut"
"Returns the timeout period in second set for ADE to establish connection with Virtuoso Visualization and Analysis XL. The default value of timeout period is 120 second, which means that ADE keeps trying to establish a connection with Virtuoso Visualization and Analysis XL for up to 120 second.")
("awvGetLegendPos"
"awvGetLegendPos(
w_windowID
[ ?subwindow x_subwindow ]
)
=> t_legendPosition / nil"
"Returns the position of the trace legend in a subwindow of the specified Waveform window.")
("awvGetOnSubwindowList"
"awvGetOnSubwindowList(
w_windowID
[ ?all g_all ]
)
=> l_onSubwindows / nil"
"Returns a list of subwindows that are being used in the specified Waveform window.")
("awvGetPlotStyle"
"awvGetPlotStyle(
w_windowID
[ ?subwindow x_subwindow ]
)
=> t_plotStyle / nil"
"Returns the plotting style for waveforms in a subwindow of the specified Waveform window.")
("awvGetScalarFromWave"
"awvGetScalarFromWave(
o_waveform
)
=> n_yVale / o_waveform"
"Returns the y-axis value of the point when the input waveform is a single point. If the waveform has multiple points, the function returns back the input waveform.")
("awvGetSelectedTraceWaveforms"
"awvGetSelectedTraceWaveforms(
w_windowID
[ ?subwindow x_subwindow ]
)
=> l_waveformList / nil"
"Returns a list of waveform IDs of the traces that are selected in a subwindow of the specified Waveform window.")
("awvGetSmithModeType"
"awvGetSmithModeType(
w_windowID
[ ?subwindow x_subwindow ]
)
=> t_type / nil"
"Returns the type of Smith display of a subwindow in the specified Waveform window.")
("awvGetStripNumberOfSelectedTrace"
"awvGetStripNumberOfSelectedTrace(
w_windowID
)
=> n_stripNumber / nil / -1"
"Returns the strip number of the trace selected in the specified Waveform window.")
("awvGetStripNumbersList"
"awvGetStripNumbersList(
w_windowID
[ ?subwindow x_subwindow ]
)
=> l_stripNumbersList / nil"
"Returns the strip numbers of traces plotted in a subwindow of the specified Waveform window.")
("awvGetSubwindowList"
"awvGetSubwindowList(
w_windowID
[ ?all g_all ]
)
=> l_subwindows / nil"
"Returns a list of subwindows whose update statuses are turned on.")
("awvGetSubwindowStripCount"
"awvGetSubwindowStripCount(
w_windowID
[ ?subwindow x_subwindow ]
)
=> n_stripCount / nil"
"Returns the total number of strips plotted in a subwindow of the specified Waveform window.")
("awvGetSubwindowTitle"
"awvGetSubwindowTitle(
w_windowID
[ ?subwindow x_subwindow ]
)
=> t_subwindowTitle / nil"
"Returns the title of a subwindow in the specified Waveform window.")
("awvGetUnusedEntityList"
"awvGetUnusedEntityList(
w_windowID
[ ?subwindow x_subwindow ]
[ ?total x_total ]
)
=> l_waveformIndexes / nil"
"Returns a list of integers that have not already been used to identify waveforms in a subwindow.")
("awvGetWaveNameList"
"awvGetWaveNameList(
w_windowID
[ ?subwindow x_subwindow ]
)
=> l_infoList / nil"
"Returns a list containing numbers and names of the waveforms plotted in a subwindow of the specified Waveform window.")
("awvGetWindowList"
"awvGetWindowList(
)
=> l_windows / nil"
"Returns a list of IDs of all Waveform windows associated with the current process.")
("awvGetWindowTitle"
"awvGetWindowTitle(
w_windowID
)
=> t_windowTitle / nil"
"Returns the title of a subwindow in the specified Waveform window.")
("awvGetXAxisLabel"
"awvGetXAxisLabel(
w_windowID
[ ?subwindow x_subwindow ]
[ ?computed g_computed ]
)
=> t_label / nil"
"Returns the user-specified or the system-computed label of the x axis.")
("awvGetXAxisMajorDivisions"
"awvGetXAxisMajorDivisions(
w_windowID
[ ?subwindow x_subwindow ]
)
=> x_majorDivisions / nil"
"Returns the number of major divisions that are set on the x axis of a graph in a subwindow of the specified Waveform window.")
("awvGetXAxisMinorDivisions"
"awvGetXAxisMinorDivisions(
w_windowID
[ ?subwindow x_subwindow ]
)
=> x_minorDivisions / nil"
"Returns the number of minor divisions that are set on the x axis of a graph in a subwindow of the specified Waveform window.")
("awvGetXAxisStepValue"
"awvGetXAxisStepValue(
w_windowID
[ ?subwindow x_subwindow ]
)
=> x_stepSize / nil"
"Returns the step size for the major divisions of x axis in the specified graph. The step value indicates the spacing between major divisions of x axis.")
("awvGetXAxisUseStepValue"
"awvGetXAxisUseStepValue(
w_windowID
[ ?subwindow x_subwindow ]
)
=> t_isStepSizeUsed / nil"
"Indicates whether the step size is used for the major divisions of x axis in the specified graph.")
("awvGetXMarkerNames"
"awvGetXMarkerNames(
w_windowID
[ ?subwindow x_subwindow ]
)
=> l_XMarkerNames / nil"
"Returns names of all vertical markers in a subwindow of the specified Waveform window.")
("awvGetYAxisLabel"
"awvGetYAxisLabel(
w_windowID
x_yNumber
[ ?subwindow x_subwindow ]
[ ?computed g_computed ]
[ ?stripNumber x_stripNumber ]
)
=> t_label / nil"
"Returns the user-specified or the system-computed label of the specified y-axis number.")
("awvGetYAxisMajorDivisions"
"awvGetYAxisMajorDivisions(
w_windowID
x_yNumber
[ ?stripNumber x_stripNumber ]
[ ?subwindow x_subwindow ]
)
=> x_numMajorDivisions / nil"
"Returns the number of major divisions that are set on the scale of the specified y axis of a strip in the specified subwindow of a Waveform window.")
("awvGetYAxisMinorDivisions"
"awvGetYAxisMinorDivisions(
w_windowID
x_yNumber
[ ?stripNumber x_stripNumber ]
[ ?subwindow x_subwindow ]
)
=> x_minorDivisions / nil"
"Returns the number of minor divisions on the scale of the specified y axis of a strip in the specified subwindow of a Waveform window.")
("awvGetYAxisStepValue"
"awvGetYAxisStepValue(
w_windowID
x_yNumber
[ ?stripNumber x_stripNumber ]
[ ?subwindow x_subwindow ]
)
=> x_stepSize / nil"
"Returns the step size for the major divisions of specified y axis of a strip in the specified subwindow of a Waveform window. The step value indicates the spacing between major divisions of y axis.")
("awvGetYAxisUseStepValue"
"awvGetYAxisUseStepValue(
w_windowID
x_yNumber
[ ?stripNumber x_stripNumber ]
[ ?subwindow x_subwindow ]
)
=> t_isStepSizeUsed / nil"
"Indicates whether the step size is used for the major divisions of the specified y axis in the specified graph.")
("awvGetYMarkerNames"
"awvGetYMarkerNames(
w_windowID
[ ?subwindow x_subwindow ]
)
=> l_YMarkerNames / nil"
"Returns names of all horizontal markers in a subwindow of the specified Waveform window.")
("awvInitWindowFunctionAdd"
"awvInitWindowFunctionAdd(
u_function
)
=> t / nil"
"Adds a function to the list of initialization functions that are called when a new Waveform window is opened.")
("awvInitWindowFunctionDel"
"awvInitWindowFunctionDel(
u_function
)
=> t / nil"
"Deletes a function from the list of initialization functions that are called when a new Waveform window is opened.")
("awvInitWindowFunctionGet"
"awvInitWindowFunctionGet(
)
=> l_initFunctionList / nil"
"Returns a list of names of initialization functions that are currently added to the list of functions that are called when a Waveform window is opened.")
("awvIsPlotWindow"
"awvIsPlotWindow(
w_windowID
)
=> t / nil"
"Returns t if the specified window is a Waveform window.")
("awvLoadCustomCalcFunction"
"awvLoadCustomCalcFunction(
[ ?funcList l_funcList ]
[ ?fileName t_fileName ]
[ ?templateFileName t_templateFileName ]
[ @rest l_args ]
)
=> t / nil"
"Adds the functions specified in the SKILL file (.il) and UI template file (.ocn) to the Custom Functions drop-down list in the Function Panel of Virtuoso Visualization and Analysis XL Calculator.")
("awvLoadEyeMask"
"awvLoadEyeMask(
[ ?fileName t_fileName ]
)
=> t / nil"
"Loads the eye mask saved in the specified VCSV file and adds it to the eye mask list in the Eye Diagram assistant. The loaded eye mask is displayed in the Mask drop-down list in the Eye Mask tab of the Eye Diagram assistant.")
("awvLoadMenuCB"
"awvLoadMenuCB(
)
=> t / nil"
"Displays the Load menu (Windows - Load ...). The function is defined in dfII/etc/context/awv.cxt.")
("awvLoadSharedCustomFunctionsFile"
"awvLoadSharedCustomFunctionsFile(
t_centralFileName
)
=> t / nil"
"Shares definitions and UI templates for custom functions among multiple users from a central file location.")
("awvLoadWindow"
"awvLoadWindow(
w_windowID
t_fileName
[ ?resultsDir t_resultsDirectory ]
)
=> t / nil"
"Initializes the state of a Waveform window from information saved in a file.")
("awvLogXAxis"
"awvLogXAxis(
w_windowID
g_state
[ ?subwindow x_subwindow ]
)
=> t / nil"
"Specifies whether to set the display of x axis to logarithmic in a subwindow of the specified Waveform window.")
("awvLogYAxis"
"awvLogYAxis(
w_windowID
x_yNumber
g_state
[ ?stripNumber x_stripNumber ]
[ ?subwindow x_subwindow ]
)
=> t / nil"
"Specifies whether to set the display of y axis to logarithmic in a subwindow of the specified Waveform window.")
("awvPlaceAMarker"
"awvPlaceAMarker(
w_windowID
x_traceIndex
n_xLoc
n_yLoc
[ ?subwindow x_subwindow ]
[ ?positionMode t_positionMode ]
)
=> t_markerID / nil"
"Places a marker of type A at the specified location on the specified trace.")
("awvPlaceBMarker"
"awvPlaceBMarker(
w_windowID
x_traceIndex
n_xLoc
n_yLoc
[ ?subwindow x_subwindow ]
[ ?positionMode t_positionMode ]
)
=> t_markerID / nil"
"Places a marker of type B at the specified location on the specified trace.")
("awvPlaceBookmark"
"awvPlaceBookmark(
w_windowID
t_bookmarkType
l_location
[ ?waveIndex x_waveIndex ]
[ ?parent t_parentGroup ]
[ ?description t_description ]
[ ?visible g_visible ]
[ ?properties l_propertiesList ]
[ ?subwindow x_subwindow ]
)
=> l_bookmarkID / nil"
"Adds a bookmark of the specified type in a subwindow of the specified Waveform window.")
("awvPlaceCircleMarker"
"awvPlaceCircleMarker(
w_windowID
n_xLoc
n_yLoc
n_radius
[ ?subwindow x_subwindow ]
[ ?label t_label ]
[ ?startAngle n_startAngle ]
[ ?spanAngle n_spanAngle ]
[ ?outlineColor t_outlineColor ]
[ ?fillColor t_fillColor ]
)
=> t_markerID / nil"
"Places a circular marker at the specified location on a circular graph.")
("awvPlacePointMarker"
"awvPlacePointMarker(
w_windowID
x_traceIndex
n_xLoc
n_yLoc
[ ?subwindow x_subwindow ]
[ ?positionMode t_positionMode ]
)
=> t_markerID / nil"
"Places a point marker at the specified location on the specified trace.")
("awvPlaceQContour"
"awvPlaceQContour(
w_windowID
n_QValue
[ ?subwindow x_subwindow ]
[ ?label t_label ]
[ ?outlineColor t_outlineColor ]
[ ?fillColor t_fillColor ]
)
=> t_markerID / nil"
"Adds two Q contour curves to the specified circular graph. Q is defined as Reactance/Resistance. A Q contour curve shows the curve of constant Q value on the Impedance Smith Chart.")
("awvPlaceWaveformLabel"
"awvPlaceWaveformLabel(
w_windowID
x_waveIndex
l_location
t_label
t_expr
[ ?textOffset g_textOffset ]
[ ?color t_color ]
[ ?justify t_justify ]
[ ?fontStyle t_fontStyle ]
[ ?height t_height ]
[ ?orient t_orient ]
[ ?subwindow x_subwindow ]
)
=> s_labelID / nil"
"Adds a graph label or a marker label to the specified trace in a subwindow.")
("awvPlaceWindowLabel"
"awvPlaceWindowLabel(
w_windowID
l_location
t_label
t_expr
[ ?color t_color ]
[ ?justify t_justify ]
[ ?fontStyle t_fontStyle ]
[ ?height t_height ]
[ ?orient t_orient ]
[ ?subwindow x_subwindow ]
)
=> s_labelID / nil"
"Adds a graph label to a subwindow in the specified Waveform window.")
("awvPlaceXMarker"
"awvPlaceXMarker(
w_windowID
n_xLoc
[ ?label t_label ]
[ ?subwindow x_subwindow ]
)
=> t_markerID / nil"
"Places a vertical marker at the specified x coordinate in the specified graph window.")
("awvPlaceYMarker"
"awvPlaceYMarker(
w_windowID
n_yLoc
[ ?label t_label ]
[ ?subwindow x_subwindow ]
[ ?stripNum x_stripNumber ]
)
=> t_markerID / nil"
"Places a horizontal marker at the specified y coordinate on the specified trace.")
("awvPlotExpression"
"awvPlotExpression(
w_windowID
t_expr
l_context
[ ?expr l_exprList ]
[ ?index l_waveIndexList ]
[ ?color l_colorList ]
[ ?lineType l_lineTypeList ]
[ ?lineStyle l_lineStyleList ]
[ ?lineThickness l_lineThicknessList ]
[ ?showSymbols l_showList ]
[ ?dataSymbol l_symbolList ]
[ ?barBase t_barBase ]
[ ?barWidth t_barWidth ]
[ ?barShift t_barShift ]
[ ?subwindow x_subwindow ]
)
=> t / nil"
"Evaluates the t_expr expression and assigns the numbers specified in l_waveIndexList to the waveforms resulting from the evaluation.")
("awvPlotList"
"awvPlotList(
w_windowID
l_yListList
l_xList
[ ?expr l_exprList ]
[ ?index l_waveIndexList ]
[ ?color l_colorList ]
[ ?lineType l_lineTypeList ]
[ ?lineStyle l_lineStyleList ]
[ ?lineThickness l_lineThicknessList ]
[ ?showSymbols l_showList ]
[ ?dataSymbol l_symbolList ]
[ ?barBase t_barBase ]
[ ?barWidth t_barWidth ]
[ ?barShift t_barShift ]
[ ?subwindow x_subwindow ]
[ ?yNumber l_yNumberList ]
[ ?stripNumber l_stripNumberList ]
)
=> t / nil"
"Plots the y-axis values specified in l_yListList against the x-axis values specified in l_xList and displays the resulting waveforms in a subwindow.")
("awvPlotSignals"
"awvPlotSignals(
l_signalList
[ ?plotStyle t_plotStyle ]
[ ?graphType t_graphType ]
[ ?graphModifier t_graphModifier ]
[ ?waveType g_waveType ]
)
=> t / nil"
"Plots the signals specified in a list.")
("awvPlotSimpleExpression"
"awvPlotSimpleExpression(
t_expression
[ ?plotStyle t_plotStyle ]
[ ?graphType t_graphType ]
[ ?graphModifier t_graphModifier ]
[ ?waveType g_waveType ]
)
=> t / nil"
"Evaluates the specified expression and plots the resulting waveform.")
("awvPlotWaveform"
"awvPlotWaveform(
w_windowID
l_waveformList
[ ?subwindow x_subwindow ]
[ ?expr l_exprList ]
[ ?index l_waveIndexList ]
[ ?component t_component ]
[ ?color l_colorList ]
[ ?lineType l_lineTypeList ]
[ ?lineStyle l_lineStyleList ]
[ ?lineThickness l_lineThicknessList ]
[ ?showSymbols l_showList ]
[ ?dataSymbol l_symbolList ]
[ ?barBase t_barBase ]
[ ?barWidth t_barWidth ]
[ ?barShift t_barShift ]
[ ?yaxisUnit t_yaxisUnit ]
[ ?yaxisLabel t_yaxisLabel ]
[ ?modifierType t_modifierType ]
[ ?graphType t_graphType ]
[ ?stripNumber x_stripNumber ]
)
=> t / nil"
"Plots the waveforms in the list l_waveformList.")
("awvPlotWaveformOption"
"awvPlotWaveformOption(
w_windowID
x_waveIndex
t_plotOption
[ ?subwindow x_subwindow ]
)
=> t / nil"
"Sets the specified plotting option for a waveform in a subwindow.")
("awvPrintWaveform"
"awvPrintWaveform(
o_waveform1 [ o_waveform2 ... ]
[ ?output t_fileName | port ]
[ ?numSigDigits x_numSigDigits ]
[ ?format s_format ]
[ ?numSpaces x_numSpaces ]
[ ?width x_width ]
[ ?from x_from ]
[ ?to x_to ]
[ ?step x_stepValue ]
)
=> t / nil"
"Prints text data of waveforms specified in a list of waveforms to the Results Display Window or to the specified file.")
("awvRedisplaySubwindow"
"awvRedisplaySubwindow(
w_windowID
[ ?subwindow x_subwindow ]
[ ?readData g_readData ]
)
=> t / nil"
"Refreshes the display of a subwindow in the specified Waveform window.")
("awvRedisplayWindow"
"awvRedisplayWindow(
w_windowID
[ ?readData g_readData ]
)
=> t / nil"
"Refreshes the display of the specified Waveform window.")
("awvRedrawWindowMenuCB"
"awvRedrawWindowMenuCB(
)
=> t / nil"
"Redraws all the objects, such as waveforms and markers in a Waveform window. The function is defined in dfII/etc/context/awv.cxt.")
("awvRemoveDate"
"awvRemoveDate(
w_windowID
)
=> t / nil"
"Removes the title from the specified Waveform window.")
("awvRemoveLabel"
"awvRemoveLabel(
w_windowID
s_labelID | l_labelID
[ ?subwindow x_subwindow ]
)
=> t / nil"
"Removes the specified labels (graph labels and marker labels) in a subwindow of the specified Waveform window.")
("awvRemoveSubwindowTitle"
"awvRemoveSubwindowTitle(
w_windowID
[ ?subwindow x_subwindow ]
)
=> t / nil"
"Removes the title from a subwindow of the specified Waveform window.")
("awvRemoveTitle"
"awvRemoveTitle(
w_windowID
)
=> t / nil"
"Removes the title from the specified Waveform window.")
("awvResetAllWindows"
"awvResetAllWindows(
[ ?force g_force ]
)
=> t"
"Resets all Waveform windows that are returned by awvGetWindowList.")
("awvResetWindow"
"awvResetWindow(
w_windowID
[ ?force g_force ]
)
=> t / nil"
"Resets the specified Waveform window to the state of a new window.")
("awvResumeViVA"
"awvResumeViVA(
)"
"Resumes Virtuoso Visualization and Analysis XL (if suspended) when called from CIW, provided that all the licensing requirements are met.")
("awvRfLoadPull"
"awvRfLoadPull(
w_waveform
[ ?maxValue x_maxValue ]
[ ?minValue x_minValue ]
[ ?numCont x_numCont ]
[ ?closeCont g_closeCont ]
[ ?name t_name ]
)
=> t / nil"
"Draws load pull contour for the given waveform of PSS analysis. This function works only on two-dimensional sweep PSS results. The inner sweep must be phase and the outer sweep must be mag.")
("awvSaveMenuCB"
"awvSaveMenuCB(
)
=> t / nil"
"Displays the Save menu (Windows - Save ...). The function is defined in dfII/etc/context/awv.cxt.")
("awvSaveToCSV"
"awvSaveToCSV(
l_waveforms
t_fileName
[ ?from x_from ]
[ ?to x_to ]
[ ?precision x_precision ]
[ ?step x_step ]
[ ?linLog t_linLog ]
[ ?exprList l_expressionList ]
[ ?mergeXAxis g_mergeXAxis ]
)
=> t / nil"
"Saves waveform data to the specified CSV file.")
("awvSaveWindow"
"awvSaveWindow(
w_windowID
t_fileName
)
=> t / nil"
"Saves the state of the specified Waveform window to an XML file with the .grf extension.")
("awvSaveWindowImage"
"awvSaveWindowImage(
w_windowID
t_path
t_filePrefix
g_cardLayout
)
=> l_fileNames"
"Saves the image of the specified Waveform window in a .png file.")
("awvSetCurrentSubwindow"
"awvSetCurrentSubwindow(
w_windowID
x_subwindow
)
=> t / nil"
"Sets the specified subwindow as the current subwindow.")
("awvSetCurrentWindow"
"awvSetCurrentWindow(
w_windowID
)
=> t / nil"
"Sets the specified window as the current Waveform window.")
("awvSetCursorPrompts"
"awvSetCursorPrompts(
w_windowID
x_yAxisNumber
t_xPrompt
t_yPrompt
[ ?stripNumber x_stripNumber ]
[ ?subwindow x_subwindow ]
)
=> t / nil"
"Sets the tracking cursor prompts for the waveforms around a particular Y axis and a particular strip in a subwindow. If you specify nil for the prompts, the default prompts are used.")
("awvSetDisplayMode"
"awvSetDisplayMode(
w_windowID
t_mode
[ ?subwindow x_subwindow ]
)
=> t / nil"
"Sets display mode of a subwindow of the specified Waveform window.")
("awvSetDisplayStatus"
"awvSetDisplayStatus(
w_windowID
g_enable
[ ?subwindow x_subwindow ]
)
=> t / nil"
"Sets the display status of a subwindow in the specified Waveform window.")
("awvSetInitializationTimeout"
"awvSetInitializationTimeout(
x_timeOut
)
=> x_timeOut"
"Sets timeout period in second for ADE to establish connection with Virtuoso Visualization and Analysis XL. The default value of timeout period is 120 second, which means that ADE keeps trying to establish a connection with Virtuoso Visualization and Analysis XL for up to 120 second.")
("awvSetLegendPos"
"awvSetLegendPos(
w_windowID
t_legendPosition
[ ?subwindow x_subwindow ]
)
=> t / nil"
"Sets the position of the trace legend in a graph.")
("awvSetLegendWidth"
"awvSetLegendWidth(
w_windowID
x_width
[ ?subwindow x_subwindow ]
)
=> t / nil"
"Sets the width of the trace legend in a subwindow of the specified Waveform window. The function works only when the trace legend position is set to left.")
("awvSetOptionDefault"
"awvSetOptionDefault(
S_name
)
=> t / nil"
"Restores a Waveform window option to its default value. The option takes effect for any Waveform Windows or subwindows that are opened after the option is set.")
("awvSetOptionValue"
"awvSetOptionValue(
S_name
g_value
)
=> g_value / nil"
"Sets a Waveform window option.")
("awvSetOrigin"
"awvSetOrigin(
w_windowID
l_origin
[ ?subwindow x_subwindow ]
)
=> t / nil"
"Sets the axis origin of a subwindow to a new location. This function takes effect only when the waveform display is in composite mode with only one y axis displayed.")
("awvSetPlotStyle"
"awvSetPlotStyle(
w_windowID
t_plotStyle
[ ?subwindow x_subwindow ]
)
=> t / nil"
"Sets the plotting style in a subwindow of the specified Waveform window.")
("awvSetSmithModeType"
"awvSetSmithModeType(
w_windowID
t_type
[ ?subwindow x_subwindow ]
)
=> t / nil"
"Sets the type of Smith display to a subwindow in the specified Waveform window.")
("awvSetSmithXLimit"
"awvSetSmithXLimit(
w_windowID
l_minMax
[ ?subwindow x_subwindow ]
)
=> t / nil"
"Sets the x axis display limits for a subwindow with a Smith display mode.")
("awvSetSmithYLimit"
"awvSetSmithYLimit(
w_windowID
l_minMax
[ ?subwindow x_subwindow ]
)
=> t / nil"
"Sets the y axis display limits for a subwindow with a Smith display mode.")
("awvSetUpdateStatus"
"awvSetUpdateStatus(
w_windowID
g_enable
[ ?subwindow x_subwindow ]
)
=> t / nil"
"Sets the update status of a subwindow in the specified Waveform window.")
("awvSetWaveformDisplayStatus"
"awvSetWaveformDisplayStatus(
w_windowID
x_waveIndex
g_enable
[ ?subwindow x_subwindow ]
)
=> t / nil"
"Displays or hides a waveform in a subwindow of the specified Waveform window.")
("awvSetXAxisLabel"
"awvSetXAxisLabel(
w_windowID
t_label
[ ?subwindow x_subwindow ]
)
=> t / nil"
"Replaces the automatically computed label of the x axis with the specified label in a subwindow of the specified Waveform window.")
("awvSetXAxisMajorDivisions"
"awvSetXAxisMajorDivisions(
w_windowID
x_numMajorDiv
[ ?subwindow x_subwindow ]
)
=> t / nil"
"Sets the number of major divisions on the x axis of a graph in a subwindow of the specified Waveform window.")
("awvSetXAxisMinorDivisions"
"awvSetXAxisMinorDivisions(
w_windowID
x_numMinorDiv
[ ?subwindow x_subwindow ]
)
=> t / nil"
"Sets the number of minor divisions on the x axis of a graph in a subwindow of the specified Waveform window.")
("awvSetXAxisStepValue"
"awvSetXAxisStepValue(
w_windowID
x_stepSize
[ ?subwindow x_subwindow ]
)
=> t / nil"
"Sets the step size for the major divisions of x axis in the specified graph. The step value indicates the spacing between major divisions of x axis.")
("awvSetXAxisUseStepValue"
"awvSetXAxisUseStepValue(
w_windowID
g_useStepSize
[ ?subwindow x_subwindow ]
)
=> t / nil"
"Specifies whether to use the step size for the major divisions of x axis in the specified graph.")
("awvSetXLimit"
"awvSetXLimit(
w_windowID
l_minMax
[ ?subwindow x_subwindow ]
)
=> t / nil"
"Sets the display limits of x axis in a subwindow of the specified Waveform window.")
("awvSetXScale"
"awvSetXScale(
w_windowID
t_scale
[ ?subwindow x_subwindow ]
)
=> t / nil"
"Sets display mode of x axis in a subwindow of the specified Waveform window.")
("awvSetYAxisLabel"
"awvSetYAxisLabel(
w_windowID
x_yNumber
t_label
[ ?subwindow x_subwindow ]
[ ?stripNumber x_stripNumber ]
)
=> t / nil"
"Sets the specified label on the specified y-axis number in the current strip or the specified strip.")
("awvSetYAxisMajorDivisions"
"awvSetYAxisMajorDivisions(
w_windowID
x_yNumber
x_numMajorDiv
[ ?stripNumber x_stripNumber ]
[ ?subwindow x_subwindow ]
)
=> t / nil"
"Sets the number of major divisions on the scale of the specified y axis of a strip in the specified subwindow of a Waveform window.")
("awvSetYAxisMinorDivisions"
"awvSetYAxisMinorDivisions(
w_windowID
x_yNumber
x_numMinorDivisions
[ ?stripNumber x_stripNumber ]
[ ?subwindow x_subwindow ]
)
=> t / nil"
"Sets the number of minor divisions on the scale of the specified y axis of a strip in the specified subwindow of a Waveform window.")
("awvSetYAxisStepValue"
"awvSetYAxisStepValue(
w_windowID
x_yNumber
x_stepSize
[ ?stripNumber x_stripNumber ]
[ ?subwindow x_subwindow ]
)
=> t / nil"
"Sets the step size for the major divisions of the specified y axis of a strip in the specified subwindow of a Waveform window. The step value indicates the spacing between major divisions of y axis.")
("awvSetYAxisUseStepValue"
"awvGetYAxisUseStepValue(
w_windowID
x_yNumber
g_useStepSize
[ ?stripNumber x_stripNumber ]
[ ?subwindow x_subwindow ]
)
=> l_infoList / nil"
"Specifies whether to use the step size for the major divisions of the specified y axis in the specified graph.")
("awvSetYLimit"
"awvSetYLimit(
w_windowID
x_yNumber
l_minMax
[ ?stripNumber x_stripNumber ]
[ ?subwindow x_subwindow ]
)
=> t / nil"
"Sets the display limits of the specified y axis for the waveform with the specified strip number in a subwindow. If you do not specify the ?stripNumber argument, the limits are applied when the subwindow is in composite mode.")
("awvSetYRange"
"awvSetYRange(
w_windowID
x_yNumber
n_range
[ ?stripNumber x_stripNumber ]
[ ?subwindow x_subwindow ]
)
=> t / nil"
"Sets the range of y axis in the specified strip in a subwindow. The specified range must be positive.")
("awvSetWaveNameList"
"awvSetWaveNameList(
l_traceNumbers
l_traceNames
)
=> t / nil"
"Sets the names of the waveforms associated with the specified trace numbers.")
("awvSimplePlotExpression"
"awvSimplePlotExpression(
w_windowID
t_expr
l_context
g_replace
[ ?expr l_exprList ]
[ ?color l_colorList ]
[ ?lineType l_lineTypeList ]
[ ?lineStyle l_lineStyleList ]
[ ?lineThickness l_lineThicknessList ]
[ ?showSymbols l_showList ]
[ ?dataSymbol l_symbolList ]
[ ?subwindow x_subwindow ]
)
=> t / nil"
"Evaluates the t_expr expression and plots the resulting waveforms in a subwindow of the specified Waveform window.")
("awvSmithAxisMenuCB"
"awvSmithAxisMenuCB(
)
=> t / nil"
"Displays the Axes (Smith Plot) Option menu. The function is defined in dfII/etc/context/awv.cxt.")
("awvTableSignals"
"awvTableSignals(
l_signalList
[ ?plotStyle t_plotStyle ]
[ ?graphModifier t_graphModifier ]
)
=> t / nil"
"Displays the specified signals in the Results Display Window.")
("awvUpdateAllWindows"
"awvUpdateAllWindows(
)
=> t /nil"
"Updates the display of all Waveform windows.")
("awvUpdateWindow"
"awvUpdateWindow(
w_windowID
)
=> t / nil"
"Updates the display of all subwindows whose update statuses are turned on.")
("awvZoomFit"
"awvZoomFit(
w_windowID
[ ?subwindow x_subwindow ]
)
=> t / nil"
"Fits the graph in the specified Waveform window.")
("awvZoomGraphX"
"awvZoomGraphX(
w_windowID
l_minMax
[ ?subwindow x_subwindow ]
)
=> t / nil"
"Zooms in or zooms out the graph according to the specified x-axis (independent axis) coordinates.")
("awvZoomGraphXY"
"awvZoomGraphXY(
w_windowID
l_xMinMax
l_yMinMax
[ ?stripNumber x_stripNumber ]
[ ?subwindow x_subwindow ]
)
=> t / nil"
"Zooms in or zooms out the graph according to the specified y-axis (dependent axis) coordinates.")
("awvZoomGraphY"
"awvZoomGraphY(
w_windowID
l_minMax
[ ?stripNumber x_stripNumber ]
[ ?subwindow x_subwindow ]
)
=> t / nil"
"Zooms in or zooms out the graph according to the specified y-axis (dependent axis) coordinates.")
("famGetExpr"
"famGetExpr(
o_waveform
)
=> t_expr / nil"
"Returns the expression of the specified waveform.")
("famSetExpr"
"famSetExpr(
o_waveform
t_expr
)
=> t_expr / nil"
"Sets the specified expression for the waveform.")
("vvGetGraphBackground"
"vvGetGraphBackground(
[ w_windowID ]
)
=> t_backgroundColor / nil"
"Returns the background color of the specified Waveform window or the current Waveform window.")
("vvSetGraphBackground"
"vvSetGraphBackground(
t_backgroundColor
[ w_windowID ]
)
=> t / nil"
"Sets the specified background color to the specified Waveform window or the current Waveform window.")
("rdbLoadResults"
"rdbLoadResults(
t_sessionName
t_resultsDir
)
=> t / nil"
"Loads the simulation results located at results directory into the Results Browser associated with the specified session.")
("rdbReloadResults"
"rdbReloadResults(
t_sessionName
t_resultsDir
)
=> t / nil"
"Reloads the simulation results located at results directory into the Results Browser associated with the specified session.")
("rdbSetCurrentDirectory"
"rdbSetCurrentDirectory(
t_sessionName
t_pathToDirectory
)
=> t / nil"
"Navigates to the specified directory in the Results Browser associated with the specified session.")
("rdbShowDialog"
"rdbShowDialog(
t_sessionName
t_componentName
t_dialogName
t_actionName
[ l_options ]
)
=> t / nil"
"Displays or hides the specified form associated with the Results Browser.")
("rdbUnloadResults"
"rdbUnloadResults(
t_sessionName
t_resultsDir
)
=> t / nil"
"Unloads the simulation results located at results directory from the Results Browser associated with the specified session.")
("rdbWriteToFormat"
"rdbWriteToFormat(
t_sessionName
t_path
t_format
[ l_signals ]
)
=> t / nil"
"Exports the specified signals from the Results Browser associated with the specified session.")
("vivaInitBindkeys"
"vivaInitBindkeys(
)
=> t / nil"
"Initializes the Virtuoso Visualization and Analysis XL bindkeys called from viva.ini context initialization file.")
("vivaIsVivaExecutable"
"vivaIsVivaExecutable(
)
=> t / nil"
"Checks whether the current application (binary) is Virtuoso Visualization and Analysis XL.")
("vvDisplayBrowser"
"vvDisplayBrowser(
)
=> l_windowID / nil"
"Invokes the Results Browser within a window.")
("aaSP"
"aaSP(
n_portOrder1
n_portOrder2
[ t_dataDirectory ]
)
=> o_waveform / nil"
"Returns the S-Parameter waveform for a multi-port network for the specified port numbers. The S-Parameters describe the response of an N-port network to voltage signals at each port.")
("adtFFT"
"adtFFT(
l_list
)
=> l_result / nil"
"Calculates the fast Fourier transform (FFT) of the specified list.")
("adtIFFT"
"adtIFFT(
l_list
)
=> l_result / nil"
"Calculates the inverse discrete Fourier transform of the specified list.")
("appendWaves"
"appendWaves(
o_waveform1
o_waveform2
[ o_waveformN ]
)
=> o_appendedWaveform / nil"
"Appends a series of input waveforms in x-vector direction into a single output waveform.")
("armSetCalc"
"armSetCalc(
s_name
g_value
)
=> g_value"
"Sets the specified property of the Calculator resource to the specified value.")
("baseLine"
"baseLine(
o_waveform
)
=> n_value / nil"
"Returns the baseline value of the specified transient waveform.")
("busTransition"
"busTransition(
o_busWaveform
t_yFrom
t_yTo
[ n_nth ]
[ t_xName ]
)
=> t_nthTransition / t_nthLastTransition / t_allTransitions / nil"
"Returns the time when a bus value is changed from a specified value to another specified value.")
("calCalcInput"
"calCalcInput(
l_keywords
[ t_expression ]
)
=> t / nil"
"Manipulates Buffer and Stack contents and enters arbitrary expressions into Buffer.")
("calCalculatorFormCB"
"calCalculatorFormCB(
[ ?bBoxSpec t_bBoxSpec ]
[ ?iconPosition t_iconPosition ]
)
=> t / nil"
"Opens Calculator, if not already open. If Calculator is open, the function brings it in the focus.")
("calCreateSpecialFunction"
"calCreateSpecialFunction(
[ ?formSym s_formSymbol ]
[ ?formInitProc s_formInitializeProcedure ]
[ ?formTitle t_formTitle ]
[ ?formCallback t_formCallback ]
[ ?envGetVal t_envGetVal ]
)
=> nil"
"Encapsulates the initialization and display of forms defined for a special (user-defined) function.")
("calCreateSpecialFunctionsForm"
"calCreateSpecialFunctionsForm(
s_formSymbol
l_fieldList
)
=> t / nil"
"Registers and creates the form for a special (user-defined) function. The form title and callback are specified through the call to calCreateSpecialFunction.")
("calGetBuffer"
"calGetBuffer(
)
=> t_bufferExpression / nil"
"Returns the expression that is currently stored in calculator Buffer.")
("calRegisterSpecialFunction"
"calRegisterSpecialFunction(
l_specialFunctionInfo
)
=> l_specialFunctionInfo / nil"
"Registers the specified information about the special (user-defined) function, if it is not already registered.")
("calSetCurrentTest"
"calSetCurrentTest(
t_testName
)
=> nil"
"Specifies the name of the test that you want to set as the current test in the Calculator. When an access function, such as vt, is used from the Calculator, it displays the schematic associated with the current test.")
("calSpecialFunctionInput"
"calSpecialFunctionInput(
s_specialFunctionName
l_formFields
)
=> t_expression / nil"
"Checks the buffer and stack and processes the arguments defined under l_formFields into the buffer expression.")
("caliModeToggle"
"caliModeToggle(
)
=> t / nil"
"Toggles Algebraic or RPN-specific buttons on the Calculator based on the currently set Calculator mode. Calculator works in two modes-RPN Mode and Algebraic Mode.")
("caliRestoreDefaultWindowSize"
"caliRestoreDefaultWindowSize(
)
=> t / nil"
"Restores the original size of Calculator while maintaining the same top-left coordinate of the current window position.")
("calSetBuffer"
"calSetBuffer(
t_bufferExpression
)
=> t / nil"
"Sets the contents of the Buffer in Calculator.")
("dBm50ohm"
"dBm50ohm(
{ o_waveform | n_voltage }
)
=> o_waveform | n_dBm"
"Calculates output power in decibel-milliwatts (dBm) from the specified voltage (signal or value) for a 50 ohm resistance.")
("dBm50ohmAny"
"dBm50ohmAny(
n_voltage
n_constant
)
=> n_dBm"
"Calculates output power in decibel-milliwatts (dBm) from the specified voltage value for a 50 ohm resistance.")
("expr"
"expr(
var
expr
l_values
)
=> o_waveform / nil"
"Evaluates the expression expr by setting each of the values in the l_values list to the var variable in the expression.")
("eyeBERLeft"
"eyeBERLeft(
o_waveform
n_start
n_stop
n_eyePeriod
n_threshold
n_noOfBins
)
=> o_waveform / nil"
"Returns a waveform representing the left-side bit error rate (BER) curve for the specified eye diagram.")
("eyeBERLeftApprox"
"eyeBERLeftApprox(
o_waveform
n_start
n_stop
n_eyePeriod
n_threshold
n_noOfBins
)
=> o_waveform / nil"
"Returns a waveform representing the left-side bit error rate (BER) curve for the specified eye diagram beyond the output of eyeBERLeft by tail-fitting the left-side cross distribution.")
("eyeBERRight"
"eyeBERRight(
o_waveform
n_start
n_stop
n_eyePeriod
n_threshold
n_noOfBins
)
=> o_waveform / nil"
"Returns a waveform representing the right-side bit error rate (BER) curve for the specified eye diagram.")
("eyeBERRightApprox"
"eyeBERRightApprox(
o_waveform
n_start
n_stop
n_eyePeriod
n_threshold
n_noOfBins
)
=> o_waveform / nil"
"Returns a waveform representing the right-side bit error rate (BER) curve for the specified eye diagram beyond the output of eyeBERRight by tail-fitting the right-side cross distribution.")
("eyeHeightAtXY"
"eyeHeightAtXY(
o_eyeDiagram
f_x
f_y
[ ?output t_output ]
)
=> f_eyeHight / nil"
"Calculates the eye height at the specified point (x, y) inside the eye diagram.")
("eyeMask"
"eyeMask(
o_waveform
t_xUnit
[ @rest l_vertices ]
)
=> o_waveform"
"Creates a custom eye mask on an eye diagram at the specified vertices in the specified units.")
("eyeMaskViolationPeriodCount"
"eyeMaskViolationPeriodCount(
o_eyeMaskWaveform
)
=> n_periods / nil"
"Returns the number of periods that contain eye mask violation.")
("eyePeakToPeakJitter"
"eyePeakToPeakJitter(
o_eyeDiagram
f_threshold
n_eyeStart
n_eyeEnd
)
=> x_p2pJitter / nil"
"Calculates the peak-to-peak jitter at the specified threshold within the region of an eye diagram. The peak-to-peak jitter is the time between the first and the last crossing.")
("eyeWidthAtXY"
"eyeWidthAtXY(
o_eyeDiagram
f_x
f_y
[ ?output t_output ]
)
=> f_eyeWidth / nil"
"Calculates the eye width at the specified point (x, y) inside the eye diagram.")
("famEval"
"famEval(
l_expression
[ t_sweepVariable1 ]
[ s_sweepValue1 ]
)
=> o_waveform / n_value / nil"
"Evaluates the specified expression with the specified sweep variables.")
("firstVal"
"firstVal(
o_waveform
)
=> n_value / nil"
"Returns the first value from where the specified waveform starts on x axis.")
("kurtosis"
"kurtosis(
o_waveform
)
=> n_kurtosis / nil"
"Calculates the kurtosis of the specified waveform.")
("lastVal"
"lastVal(
o_waveform
)
=> n_value / nil"
"Returns the last value at which the specified waveform ends on x axis.")
("leafValue"
"leafValue(
o_waveform
@rest l_args
)
=> o_waveform / n_value / nil"
"Returns the leaf waveform or the leaf value from the specified family of waveforms.")
("mu"
"mu(
o_s11Waveform
o_s12Waveform
o_s21Waveform
o_s22Waveform
)
=> o_waveform / nil"
"Returns the alternative stability factor that indicates the minimum distance between the origin of the unit Smith chart and the load unstable region.")
("Mu"
"Mu(
t_resultsDirectory
)
=> o_waveform / nil"
"Returns the alternative stability factor that indicates the minimum distance between the origin of the unit Smith chart and the load unstable region.")
("mu_prime"
"mu_prime(
o_s11Waveform
o_s12Waveform
o_s21Waveform
o_s22Waveform
)
=> o_waveform / nil"
"Returns the alternative stability factor that indicates the minimum distance between the center of the unit Smith chart and the source unstable region.")
("Mu_prime"
"Mu_prime(
t_resultsDirectory
)
=> o_waveform / nil"
"Returns the alternative stability factor that indicates the minimum distance between the center of the unit Smith chart and the source unstable region.")
("normalQQPValue"
"normalQQPValue(
o_waveform
)
=> n_pValue / nil"
"Returns the p-value of a quantile-quantile (QQ) plot.")
("numConv"
"numConv(
t_inputNumber
t_format
g_needPrefix
)
=> t_outputNumber / nil"
"Converts an input number to the specified format.")
("OS"
"OS(
t_instanceName
t_parameterName
)
=> o_waveform / nil"
"Returns the specified device parameter of the an instance from DC analysis data.")
("OT"
"OT(
t_instanceName
t_parameterName
)
=> o_waveform / nil"
"Returns the specified device parameter of the given instance from the transient analysis data.")
("pvifreq"
"pvifreq(
s_analysis
t_pos
t_neg
t_branch1
t_branch2
[ x_freq ]
)
=> o_waveform / nil"
"Returns the spectral power from voltage and current for a specified frequency list or at all frequencies.")
("pvrfreq"
"pvrfreq(
s_analysis
t_pos
t_neg
x_resistance
[ x_freq ]
)
=> o_waveform / nil"
"Returns the spectral power from voltage and current for a specified frequency list or at all frequencies.")
("skewness"
"skewness(
o_waveform
)
=> n_skewness / nil"
"Calculates the skewness of the specified waveform.")
("swapSweep"
"swapSweep(
o_waveform
t_sweepVariable
n_xValue
)
=> o_waveform / nil"
"Swaps x-axis values with the specified sweep variable.")
("topBaseLine"
"topBaseLine(
o_waveform
)
=> l_values / nil"
"Returns the topline and baseline values of the specified transient waveform.")
("topLine"
"topLine(
o_waveform
)
=> l_values / nil"
"Returns the topline value of the specified transient waveform.")
("triggeredDelay"
"triggeredDelay(
o_signal1
o_signal2
n_threshold1
s_edgeType1
n_threshold2
s_edgeType2
[ ?multiple g_multiple]
[ ?nth x_nth ]
[ ?periodicity x_periodicity ]
[ ?tol1 n_tolerance1 ]
[ ?tol2 n_tolerance2 ]
[ ?xName s_xName ]
)
=> o_waveform / n_value / nil"
"Calculates the delay from the trigger point on the edge (either rising or falling) of a triggering signal to the next edge (either rising or falling) of the target signal.")
("valueAt"
"valueAt(
o_waveform
n_xValue
[ ?extrapolate g_extrapolate ]
)
=> n_yValue / nil"
"Returns the y-axis value of a waveform at the specified x-axis value.")
("vvDisplayCalculator"
"vvDisplayCalculator(
[ t_expression ]
)
=> t / nil"
"Opens Calculator within a window. The function also displays the expression, if specified, in the buffer.")
("waveVsWave"
"waveVsWave(
[ ?x o_waveX ]
[ ?y o_waveY ]
[ ?xName t_xName ]
[ ?xUnits g_xUnits ]
[ ?yName t_yName ]
[ ?yUnits g_yUnits ]
)
=> o_waveform / nil"
"Creates an output waveform that uses y axes of the specified input waveforms as its x and y axes. When the specified input waveforms have different x axes, this function performs the interpolation.")
("rapidOIPN"
"rapidOIPN(
t_result
[ ?resultsDir t_resultsDirectory ]
[ ?r n_resistance ]
[ @rest l_args ]
)
=> o_waveform / n_rapidOIPN / nil"
"Calculates the value of nth-order output intercept point (OIPN) or returns the waveform of rapid OIPN.")
("rfCimMcpValue"
"rfCimMcpValue(
s_probe
)
=> f_power / nil"
"Returns the main channel power (MCP) value calculated for the specified probe when counter-intermodulation (CIM) is selected in LTE symbol.")
("rfEdgePhaseNoise"
"rfEdgePhaseNoise(
[ ?result t_result ]
[ ?eventList l_eventList ]
[ ?resultsDir t_resultsDirectory ]
)
=> o_waveform / nil"
"Plots the instantaneous phase noise, conversion of jitter to phase noise, spectrum plots related to jitter. It is a direct plot function.")
("rfGetEventtimeIndex"
"rfGetEventtimeIndex(
t_signal
t_resultName
x_index
)
=> n_eventIndex / nil"
"Returns the event time of a signal for the specified index value.")
("rfGetMinDampFactor"
"rfGetMinDampFactor(
)
=> n_minDampFactor / nil"
"Calculates the lowest damping factor or ratio for loops identified in the loop finder (LF) analysis.")
("rfInputNoise"
"rfInputNoise(
t_unit
[ ?result t_noiseResultName ]
)
=> o_waveform / nil"
"Returns the input noise waveform. This function is run on the results of the Spectre pss-pnoise and hb-hbnoise analyses.")
("rfJc"
"rfJc(
[ ?result t_result ]
[ ?resultsDir t_resultsDir ]
[ ?unit t_unit ]
[ ?ber g_ber ]
[ ?from n_from ]
[ ?to n_to ]
[ ?k n_k ]
[ ?multiplier n_multiplier ]
)
=> n_value / o_waveform / nil"
"Calculates cycle jitter from the results of hbnoise or pnoise sample (jitter) analysis.")
("rfJcc"
"rfJcc(
[ ?result t_result ]
[ ?resultsDir t_resultsDir ]
[ ?unit t_unit ]
[ ?ber g_ber ]
[ ?from n_from ]
[ ?to n_to ]
[ ?k n_k ]
[ ?multiplier n_multiplier ]
)
=> n_value / o_waveform / nil"
"Calculates cycle-to-cycle jitter from the results of hbnoise or pnoise analysis.")
("rfJitter"
"rfJitter(
[ ?result t_result ]
[ ?resultsDir t_resultsDir ]
[ ?unit t_unit ]
[ ?ber g_ber ]
[ ?from n_from ]
[ ?to n_to ]
[ ?signalLevel t_signalLevel ]
)
=> n_value / o_waveform / nil"
"Calculates jitter from the results of hbnoise and pnoise sample (jitter) analyses. It is used to calculate Jee, JDelay, and RMS Phase Noise.")
("rfOutputNoise"
"rfOutputNoise(
t_unit
[ ?result t_noiseResultName ]
[ ?noiseConvention t_noiseConventionType ]
)
=> o_waveform / nil"
"Returns the output noise waveform. This function is run on the results of the Spectre pss-pnoise and hb-hbnoise analyses.")
("rfThresholdXing"
"rfThresholdXing(
[ ?result t_result ]
[ ?resultsDir t_resultsDirectory ]
)
=> o_waveform / nil"
"Calculates the threshold crossing value according to the jitter event time from the results of pnoise or hbnoise sample (jitter) analysis.")
("rfTotalPower"
"rfTotalPower(
o_currentWave
o_voltageWave
x_harmonic
)
=> f_powerReturn / nil"
"Calculates the root mean square (RMS) power between two terminals for fast and regular envelop analysis.")
("rfTransferFunction"
"rfTransferFunction(
t_unit
[ ?result t_resultName ]
)
=> o_waveform / nil"
"Returns the waveform representing the transfer function. This function is run on the results of the pss-pnoise and hb-hbnoise analysis.")
("rfWrlsCcdfValues"
"rfWrlsCcdfValues(
t_sig
)
=> o_waveform / f_avgPower / f_peakPower / nil"
"Plots the complementary cumulative distribution function (CCDF) curve or calculates the average or peak power from the results of an envelope (ENVLP) wireless simulation.")
("rfWrlsCim3Value"
"rfWrlsCim3Value(
s_probe
)
=> f_CIM3 / nil"
"Returns the value of third-order counter-intermodulation (CIM3) calculated for the specified probe.")
("rfWrlsCim5Value"
"rfWrlsCim5Value(
s_probe
)
=> f_CIM5 / nil"
"Returns the value of fifth-order counter-intermodulation (CIM5) calculated for the specified probe.")
("rfWrlsMeasContour"
"rfWrlsMeasContour(
t_sig
[ ?maxValue n_maxVaue ]
[ ?minValue n_minValue ]
[ ?numCont n_numCont ]
[ ?closeCont g_closeCont ]
[ ?modifier t_modifier ]
)
=> n_family / nil"
"Draws contours of system measurements from simulation results of envelope loadpull analysis.")