;SKILL Language Functions
("verifAddDocument"
"verifAddDocument(
g_sessionId
t_fileName
)
=> t_name / nil"
"Adds a file to the documents directory of the Verifier cellview.")
("verifAddImage"
"verifAddImage(
g_sessionId 
t_fileName
)
=> t_name / nil"
"Adds a file to the images directory of the Verifier cellview.")
("verifAddReq"
"verifAddReq(
g_sessionId
t_title
[ ?reqId t_reqId ]
[ ?parentId t_parentId ]
[ ?pos x_pos ]
)
=> t / nil"
"Adds a new requirement with the title to the specified Verifier session.")
("verifCompareImportedFiles"
"verifCompareImportedFiles(
g_sessionId
l_files
)
=> t / nil"
"Compares the requirements from the Verifier session with the requirements from the imported files.")
("verifCreateRandomId"
"verifCreateRandomId(
[ ?idLength x_idLength ]
[ ?prefix t_prefix ]
[ ?suffix t_suffix ]
)
=> t_id"
"Creates a string of random characters that can be used as a unique requirement ID.")
("verifDeleteReqSignoff"
"verifDeleteReqSignoff(
g_sessionId
[ ?reqId g_reqId ]
)
=> t / nil"
"Deletes the signoff setup of the specified requirement in a Verifier session.")
("verifDocumentExists"
"verifDocumentExists(
g_sessionId 
t_fileName
)
=> t / nil"
"Checks if the given file exists in the documents directory of the Verifier cellview.")
("verifExportJson"
"verifExportJson(
g_sessionId
[ ?filename t_filename ]
[ ?compact g_compact ]
)
=> t_filename / nil"
"Exports the Verifier session as a json file. The json file contains details about the session, including the requirements, implementations, mappings, and simulation results.")
("verifExportReqsToFile"
"verifExportReqsToFile(
g_sessionId
t_fileName
[ ?fileType t_fileType ]
[ ?fields t_fields ]
)
=> t / nil"
"Exports the requirements to either an Excel or CSV file. It can also export the results to an imported file.")
("verifGetCustomFieldNames"
"verifGetCustomFieldNames(
g_sessionId
)
=> l_fieldList / nil"
"Retrieves a list of custom field names for a Verifier session.")
("verifGetCustomFieldValue"
"verifGetCustomFieldValue(
g_sessionId
t_fieldName
)
=> l_fieldvalue / nil"
"Retrieves the value of a custom field available in a Verifier session.")
("verifGetDocuments"
"verifGetDocuments(
g_sessionId 
[ g_relative ]
)
=> l_names / nil"
"Returns the list of files that have been added to the documents directory of the Verifier cellview.")
("verifGetImages"
"verifGetImages(
g_sessionId 
[ g_relative ]
)
=> l_names / nil"
"Returns the list of image files that have been added to images directory of the Verifier cellview.")
("verifGetImportedFiles"
"verifGetImportedFiles(
g_sessionId
)
=> l_importedFiles / nil"
"Returns a list of all imported files that are associated with the specified session. If no imported files have been defined, nil is returned.")
("verifGetReferencedCellViews"
"verifGetReferencedCellViews(
g_sessionId
)
=> l_referencedCellViews / nil"
"Returns a list of all the referenced Verifier cellviews that can be associated with the specified session. If no referenced Verifier cellviews are defined, nil is returned.")
("verifGetReqCustomFieldNames"
"verifGetReqCustomFieldNames(
g_sessionId
)
=> l_fieldList / nil"
"Retrieves the list of the custom fields available to the requirements in a Verifier session.")
("verifGetReqCustomFieldValue"
"verifGetReqCustomFieldValue(
g_sessionId
t_reqId
t_fieldName
)
=> l_fieldValue / nil"
"Retrieves the value of the specified custom field of a requirement in a Verifier session.")
("verifGetReqParent"
"verifGetReqParent(
g_sessionId
t_reqId
)
=> t_parentReqId / nil"
"Returns the ID of the parent of the specified requirement.")
("verifGetReqProp"
"verifGetReqProp(
g_sessionId
t_reqId
t_propName
[ g_inherited ]

)
=>t_propValue / nil"
"Returns the value of the specified property of a requirement in a Verifier session.")
("verifGetReqProps"
"verifGetReqProps(
g_sessionId
t_reqId
[ g_inherited ]
)
=>o_reqProps / nil"
"Returns all the properties of a requirement in a Verifier session.")
("verifGetReqs"
"verifGetReqs(
g_sessionId
[ ?type t_type ]
[ ?owner t_owner ]
[ ?inHier t_parentReqId ]
[ ?mappable g_mappable ]
[ ?mapped g_mapped ]
[ ?domain g_domain ]
)
=> l_reqs / nil"
"Retrieves the list of requirements from a Verifier session that have the same type, owner, hierarchy, mappable or mapped property, and domain as specified.")
("verifGetReqSignoff"
"verifGetReqSignoff(
g_sessionId
t_reqId
)
=> l_reqSignoff / nil"
"Retrieves the signoff setup of the specified requirement in a Verifier session. The retrieved information includes the name of the person who signed off the signoff validity period, comments, and if the signoff is enabled for use or disabled.")
("verifGetReqStatus"
"verifGetReqStatus(
g_sessionId
t_reqId
)
=> t_status / nil"
"Returns the overall status of a requirement in a Verifier session.")
("verifGetSetupLibrary"
"verifGetSetupLibrary(
g_sessionId 
)
=> library/cell/view / nil"
"Retrieves the name of the setup library cellview bound to the given Verifier session.")
("verifImageExists"
"verifImageExists(
g_sessionId 
t_fileName
)
=> t / nil"
"Checks if the given file exists in the images directory of the Verifier cellview.")
("verifImportFile"
"verifImportFile(
g_sessionId
t_fileName
[ ?fileType t_fileType ]
[ ?headerRows x_headerRows ]
[ ?columnHeaders l_columnHeaders ]
[ ?sheetNames l_sheet_Names ]
[ ?ignoreInavalidRows g_ignoreInvalidRows ]
)
=>t / nil"
"Imports the requirements from a CSV or Excel file into a Verifier session. You can import requirements by referencing them or by copying them from the file.")
("verifMergeImportedFiles"
"verifMergeImportedFiles(
g_sessionId
l_files
[ ?interactive g_interactive ]
)
=> t / nil"
"Merges the requirements from the Verifier session with the requirements from the imported files. If differences exist, the Compare and Merge form is displayed.")
("verifMoveReq"
"verifMoveReq(
g_sessionId
g_reqId
[ ?parentId g_parentId ]
[ ?pos x_pos ]
)
=> t / nil"
"Changes the position of a requirement in the specified Verifier session.")
("verifRemoveDocument"
"verifRemoveDocument(
g_sessionId 
t_fileName
)
=> t / nil"
"Removes the given file from documents directory of the Verifier cellview.")
("verifRemoveImage"
"verifRemoveImage(
g_sessionId 
t_fileName
)
=> t / nil"
"Removes the given image file from the images directory of the Verifier cellview.")
("verifRemoveReq"
"verifRemoveReq(
g_sessionId
g_reqId
)
=> t / nil"
"Deletes one single requirement or a list of requirements in a Verifier session.")
("verifSetCustomFieldValue"
"verifSetCustomFieldValue(
g_sessionId
t_fieldName
t_fieldValue
)
=> l_set / nil"
"Sets the value of a custom field in a Verifier session.")
("verifSetReqCellviewHolder"
"verifSetReqCellviewHolder(
g_sessionId
t_reqId
g_owned
)
=> t / nil"
"If g_owned is specified, sets the 'Cellview Holder' property of specified requirement to current Verifier cellview, else clears the value of the property.")
("verifSetReqCustomFieldValue"
"verifSetReqCustomFieldValue(
g_sessionId
t_reqId
t_fieldName
t_fieldValue
)
=> t / nil"
"Sets the custom field value of the specified requirement in a Verifier session.")
("verifSetReqId"
"verifSetReqId(
g_sessionId
t_reqId
t_newReqId
)
=> t / nil"
"Sets the ID property for the specified requirement.")
("verifSetReqProp"
"verifSetReqProp(
g_sessionId
t_reqId
t_propertyName
t_propertyValue
)
=> t / nil"
"Sets the property for the specified requirement.")
("verifSetReqTitle"
"verifSetReqTitle(
g_sessionId
t_reqId
t_newTitle
)
=> t / nil"
"Sets the ID property for the specified requirement.")
("verifSetReqType"
"verifSetReqType(
g_sessionId
t_reqId
t_newType
)
=> t / nil"
"Sets the 'Type' property for the specified requirement in a Verifier session.")
("verifSetSetupLibrary"
"verifSetSetupLibrary(
g_sessionId 
t_libName
t_cellName
t_viewName
)
=> t / nil"
"Attaches a setup library cellview to a Verifier session.")
("verifSignOffReq"
"verifSignOffReq(
g_sessionId
[ ?reqId g_reqId ]
[ ?userName t_userName ]
[ ?lifetime t_lifetime ]
[ ?expDate t_expDate ]
[ ?comments t_comments ]
[ ?disableState g_disableState ]
)
=> t / nil"
"Signs off the specified requirements using the provided information in a Verifier session. You can sign off the requirements that have the verification type 'Manual' or the requirements that failed verification (the overall status of requirement is 'Fail', 'Not Mapped', 'Spec Check Fail', 'Signoff Required' or 'Signed Off').")
("verifCloseSession"
"verifCloseSession(
g_sessionId
[ ?saveIfModified g_saveIfModified ]
)
=> t / nil"
"Closes a Verifier session.")
("verifCreateBatchScript"
"verifCreateBatchScript(
g_sessionId
t_scriptFileName
)
=> t / nil"
"Creates a batch script to rerun the saved Verifier cellview from the command line.")
("verifGetAllSessions"
"verifGetAllSessions(
)
=> l_ids / nil"
"Returns a list of all the open Verifier session IDs.")
("verifGetCallbacks"
"verifGetCallbacks(
)
=> l_callbacks"
"Return the list of callbacks that have been registered by verifRegisterCallback(sess cb).")
("verifGetCellViewSession"
"verifGetCellViewSession(
t_libName
t_cellName
t_viewName
)
=> x_sessionId / nil"
"Returns the integer session ID for the specified opened Verifier cellview.")
("verifGetOptions"
"verifGetOptions(
g_sessionId
[g_getValues]
)
=> l_optionNameList / nil"
"Returns the list of Verifier preference options. These options are also available in the Preferences form.")
("verifGetOptionVal"
"verifGetOptionVal(
g_sessionId
t_optionName
)
=> t_optionValue / nil"
"Returns the value of a preference option set in a Verifier session.")
("verifGetSessionCellView"
"verifGetSessionCellView(
g_sessionId
)
=> l_libCellView / nil"
"Returns the cellview name for the specified session.")
("verifGetWindow"
"verifGetWindow(
g_sessionId
)
=> w_windowId / nil"
"Returns the window ID related to the specified session ID.")
("verifIsBatchRunProcess"
"verifIsBatchRunProcess(
)
=> t / nil"
"Returns t if the code is currently running in a remote child process for ADE Verifier. You can use this function in your .cdsinit file or in custom SKILL code.")
("verifIsSessionModified"
"verifIsSessionModified(
g_sessionId
)
=> t / nil"
"Checks whether the setup has been modified after the last time it was saved in the given session.")
("verifIsSessionReadOnly"
"verifIsSessionReadOnly(
g_sessionId
)
=> t / nil"
"Determines if the given session is read-only.")
("verifIsValidSession"
"verifIsValidSession(
g_sessionId
)
=> t / nil"
"Confirms if the given session is a valid ADE Verifier session.")
("verifOpenCellView"
"verifOpenCellView(
t_libName
t_cellName
t_viewName
[ ?mode g_mode ]
[ ?openWindow g_openWindow ]
)
=> x_sessionId / nil"
"Opens the Verifier cellview and returns the session ID.")
("verifRegisterCallback"
"verifRegisterCallback(
g_callback
)
=> g_callback"
"Registers a callback with Verifier, which is executed at various times, such as, when a session is opened, saved, closed, simulations are started, finished, and when percentage changes.")
("verifRemoveCallback"
"verifRemoveCallback(
g_callback
)
=> t / nil"
"Remove a callback that was previously registered using verifRegisterCallback(cb).")
("verifSaveSession"
"verifSaveSession(
g_sessionId
)
=> t / nil"
"Saves the active setup of the specified Verifier session to the cellview from where the setup was loaded.")
("verifSaveSessionAs"
"verifSaveSessionAs(
g_sessionId
t_libName
t_cellName
t_viewName
)
=> t / nil"
"Saves the active setup of specified Verifier session as a cellview of the type `verifier'.")
("verifSetOptionVal"
"verifSetOptionVal(
g_sessionId
t_optionName
g_value
)
=> t / nil"
"Sets the value of the specified preference option in a Verifier session.")
("verifAddCustomOutput"
"verifAddCustomOutput(
g_sessionId
t_libName
t_cellName
t_viewName
t_historyName
t_testName
t_outputName
[ ?createRequirements g_create ]
[ ?data g_data ]
)
=> t / nil"
"Adds an output to a custom implementation.")
("verifAddImp"
"verifAddImp(
g_sessionId
t_lib
t_cell
t_view
t_history
[ ?runState g_runState ]
[ ?runPlanState g_runPlanState ]
[ ?createRequirements g_createRequirements ]
[ ?custom g_custom ]
)
=> t / nil"
"Adds a new implementation, which is a maestro cellview, to the specified Verifier session.")
("verifExportCoverageDataForImp"
"verifExportCoverageDataForImp(
g_sessionId
t_fileName
t_spaceName
[ ?implementation g_implementation ]
[ ?indented g_indented ]
)
=> t / nil"
"Exports coverage data for the specified implementation.")
("verifExportCoverageDataForReq"
"verifExportCoverageDataForReq(
g_sessionId
t_fileName
[ ?reqId t_reqId ]
[ ?indented g_indented ]
)
=> t / nil"
"Exports coverage data for the specified requirement.")
("verifGetImpData"
"verifGetImpData(
g_sessionId
g_impLib
g_impCell
g_impView
g_impHistory
[ ?runName t_runName ]
[ ?testName t_testName ]
[ ?outputName t_outputName ]
[ ?statName t_statName ]
[ ?dataName t_dataName ]
)
=> o_dataTable/ t_dataValue/ nil"
"Get the data for an implementation. The common data is type, name and map. For an implementation, the additional data is runState, runPlanState, and runMode. In case of runs, the additional data is runMode. Similarly, in case of an output, the additional data is spec and unit and in case of statistical output, it is statType.")
("verifGetImpEstRunTime"
"verifGetImpEstRunTime(
g_sessionId
t_impLib
t_impCell
t_impView
t_impHistory
)
=> x_estRunTime / nil"
"Retrieves the EstRunTime of specified implementation in a Verifier session.")
("verifGetImpPriority"
"verifGetImpPriority(
g_sessionId
t_impLib
t_impCell
t_impView
t_impHistory
)
=> x_priority / nil"
"Gets the 'Priority' of the specified implementation in a Verifier session.")
("verifGetImps"
"verifGetImps(
g_sessionId
[ ?library t_impLib ]
[ ?cell t_impCell ]
[ ?view t_impView ]
[ ?history t_impHistory ]
[ ?runState g_runState ]
[ ?runPlanState g_runPlanState ]
[ ?extRef g_extRef ]
[ ?priority x_priority ]
[ ?estRunTime x_estRunTime ]
[ ?custom g_custom ]
)
=> l_imps / nil"
"Retrieves the list of the implementations from a Verifier session that have the same library, cell, view, or history name as specified, the same check state for the 'Run' or 'RunPlan' check box.")
("verifGetImpSetPreRunScript"
"verifGetImpSetPreRunScript(
g_sessionId
t_impSetName
)
=> t_preRunScriptFileName"
"Retrieves the pre-run script file name specified for an implementation set.")
("verifGetImpTestOutputs"
"verifGetImpTestOutputs(
g_sessionId
t_lib
t_cell
t_view
t_history
t_test
[ t_runName ]
)
=> l_impTestOutputs / nil"
"Returns the list of the outputs for an implementation test in a Verifier session.")
("verifGetImpTests"
"verifGetImpTests(
g_sessionId
t_lib
t_cell
t_view
t_history
[ t_runName ]
)
=> l_impTests / nil"
"Returns the list of all the tests for an implementation in a Verifier session.")
("verifGetMappableType"
"verifGetMappableType(
g_sessionId
t_path
)
=> t_type / nil"
"Returns the type of the mappable object.")
("verifGetTypicalSetup"
"verifGetTypicalSetup(
g_sessionId
)
=> l_typicalSetup / nil"
"Retrieves the typical setup from a Verifier session.")
("verifMoveImp"
"verifMoveImp(
g_sessionId
t_lib
t_cell
t_view
t_history
[ x_itemIndex ]
)
=> t / nil"
"Moves an implementation to the specified location in a Verifier session.")
("verifOverwriteSpec"
"verifOverwriteSpec(
g_sessionId
g_impLib
g_impCell
g_impView
g_impHistory
[ ?testName t_testName ]
[ ?outputName t_outputName ]
[ ?pushToImp g_pushToImp ]
)
=> t / nil"
"Pulls or pushes the specification and unit from to the mapped implementation items hierarchically.")
("verifRemoveImp"
"verifRemoveImp(
g_sessionId
t_impLib
t_impCell
t_impView
t_impHistory
)
=> t / nil"
"Deletes an implementation from the specified Verifier session.")
("verifRestart"
"verifRestart(
g_sessionId
[ ?implementation g_implementation ]
[ ?impSet g_impSet ]
)
=> t / nil"
"Restarts the simulation for one or more implementations. If no implementation or implementation set is specified, all running implementations in the session are restarted.")
("verifSetImpData"
"verifSetImpData(
g_sessionId
t_libName
t_cellName
t_viewName
t_historyName
g_data
[ ?runName t_runName ]
[ ?relName t_relName ]
[ ?testName t_testName ]
[ ?outputName t_outputName ]
[ ?statName t_statName ]
)
=> t / nil"
"Sets the specified data for a given implementation item.")
("verifSetImpEstRunTime"
"verifSetImpEstRunTime(
g_sessionId
t_impLib
t_impCell
t_impView
t_impHistory
x_estRunTime
)
=> t / nil"
"Sets the EstRunTime of specified implementation in a Verifier session.")
("verifSetImpPriority"
"verifSetImpPriority(
g_sessionId
t_impLib
t_impCell
t_impView
t_impHistory
x_priority
)
=> t / nil"
"Sets the Priority of the specified implementation in a Verifier session.")
("verifSetImpSetPreRunScript"
"verifSetImpSetPreRunScript(
g_sessionId
t_impSetName
t_preRunScriptFileName
)
=> t / nil"
"Sets the specified pre-run script file name for an implementation set.")
("verifUpdate"
"verifUpdate(
g_sessionId
)
=> t / nil"
"Updates the Verifier setup from local implementations, and referenced Verifier cellviews.")
("verifUpdateImpEstRunTime"
"verifUpdateImpEstRunTime(
g_sessionId
t_impLib
t_impCell
t_impView
t_impHistory
)
=> t / nil"
"Updates the EstRunTime to be the actual recorded run time from run summary data.")
("verifExportMapping"
"verifExportMapping(
g_sessionId
t_fileName
[ S_type ]
[ g_confirmOverwrite ]
)
=> t / nil"
"Export the mapping to either a CSV or Excel file.")
("verifGetImpMapping"
"verifGetImpMapping(
g_sessionId
t_libName
t_cellName
t_viewName
t_historyName
[ ?runName t_runName ]
[ ?testName t_testName ]
[ ?outputName t_outputName
[ ?statName t_statName ]
)
=> l_reqIds / nil"
"Returns the list of requirements that are mapped to the specified mappable object. The mappable object could be an implementation cellview, run, test or output.")
("verifGetReqMapping"
"verifGetReqMapping(
g_sessionId
t_reqId
[ ?types l_types ]
=> l_implementations / nil"
"Returns a list of mappable objects mapped to the specified requirement. The mappable object could be an implementation cellview, run, test or output.")
("verifImportMapping"
"verifImportMapping(
g_sessionId
t_fileName
S_type
)
=> t / nil"
"Import mapping from an Excel or CSV file.The first row of the file will be ignored as it should be a header row. The rest of the rows should have at least two columns: RequirementId and MappingName. Any other columns will be ignored. Each row is a single requirement-to- implementation mapping, so if a requirement is mapped to multiple implementations, then there will be multiple rows with the same requirement ID in the first column.")
("verifMapping"
"verifMapping(
g_sessionId
g_reqsList
g_impsList
[ g_operation ]
)
=> t / nil"
"Maps one or more requirements to one or more implementations in a Verifier session. Each of the requirement map objects can include the cellview, run, test, and output information. This function is also used to modify or delete the existing requirement-implementation mappings. For example, if the requirements list is empty, all the mapping information for the specified implementations is deleted.")
("verifAddImpSet"
"verifAddImpSet(
g_sessionId
t_impSetName
) 
=> t / nil"
"Adds a new implementation set in the specified Verifier session.")
("verifAddImpToImpSet"
"verifAddImpToImpSet(
g_sessionId
t_impLib
t_impCell
t_impView
t_impHistory
t_impSetName
)
=> t / nil"
"Adds an implementation to the specified implementation set in a Verifier session. You can add an implementation to multiple implementation sets.")
("verifCheck"
"verifCheck(
g_sessionId
[ ?implementation g_implementation ]
[ ?impSet g_impSet ]
)
=> t / nil"
"Checks whether implementations changed since last run or reload by Verifier. In addition, it checks whether the lifetime of implementation simulation results is within the Expiration Period of Implementation Results since the last simulation of implementation cellview by Verifier or the last external creation of results. If no implementation or implementation set is specified, then all implementations in the session are checked.")
("verifCheckImp"
"verifCheckImp(
g_sessionId
t_impLib
t_impCell
t_impView
t_impHistory
)
=> t / nil"
"Checks for changes of the specified implementation and loaded results.")
("verifCreateRunSummaryData"
"verifCreateRunSummaryData(
g_sessionId
[ ?implementation g_implementation ]
)
=> t / nil"
"Creates the run summary data for one or more implementations. If no implementation is specified, the run summary data is created for all implementations in the session.")
("verifDeleteRunSummaryData"
"verifDeleteRunSummaryData(
g_sessionId
[ ?implementation g_implementation ]
)
=> t / nil"
"Deletes run summary data for one or more implementations. If no implementation is specified, the run summary data is deleted for all implementations in the session.")
("verifCopyAndUpdateResultsFromUserDefinedDirectory"
"verifCopyAndUpdateResultsFromUserDefinedDirectory(
g_sessionId
)
=> t / nil"
"Copies the run summary data files from the user-defined directory to the results directory of the current cellview. Additionally, updates the current session setup to restore the run summary data file into the results directory of the current cellview.")
("verifEvaluateResults"
"verifEvaluateResults(
g_sessionId
)
=> t / nil"
"Evaluates all requirements and does a force update of the results in special cases.")
("verifGetImpSets"
"verifGetImpSets(
g_sessionId
[ ?parentName t_parentName ]
[ ?runnable g_runnable ]
[ ?isGroup g_isGroup ]
)
=> l_impSets / nil"
"Retrieves the list of all the implementation sets in a Verifier session.")
("verifGetImpsInImpSet"
"verifGetImpsInImpSet(
g_sessionId
t_impSetName
)
=> l_impSets / nil"
"Retrieves the list of implementations from the specified implementation set in a Verifier session.")
("verifGetResultDataForImp"
"verifGetResultDataForImp(
g_sessionId
t_lib
t_cell
t_view
t_history
[ ?runName t_runName ]
[ ?testName t_testName ]
[ ?outputName t_outputName ]
[ ?statName t_statName ]
)
=> o_resultDataTable / nil"
"Returns all the result data for the specified implementation in a Verifier session. For each sub tables, there is a table that contains the multiple child items result data.")
("verifGetResultDataForReq"
"verifGetResultDataForReq(
g_sessionId
t_reqId
)
=> o_resultDataTable / nil"
"Returns the simulation result data for the specified requirement in a Verifier session.")
("verifImpIsRun"
"verifImpIsRun(
g_sessionId
t_libName
t_cellName
t_viewName
t_historyName
)
=> t / nil"
"Checks if the specified implementation cellview can be run from a Verifier session.")
("verifPublishHTML"
"verifPublishHTML(
g_sessionID
g_openBrowser
)
=> t / nil"
"Generates and optionally displays an HTML report in a Verifier session.")
("verifReloadAllRes"
"verifReloadAllRes(
g_sessionId
)
=> t / nil"
"Reloads the simulation results for all implementations that have the Run check box unchecked. This is equivalent to clicking the Reload Simulation Results button on the Verifier toolbar.")
("verifRemoveImpFromImpSet"
"verifRemoveImpFromImpSet(
g_sessionId
t_impLib
t_impCell
t_impView
t_impHistory
t_impSetName
)
=> t / nil"
"Deletes an implementation from the specified implementation set in a Verifier session.")
("verifRemoveImpSet"
"verifRemoveImpSet(
g_sessionId
t_impSetName
)
=> t/nil"
"Deletes the implementation set from the specified Verifier session.")
("verifRun"
"verifRun(
g_sessionId
[ ?implementation g_implementation ]
[ ?impSet g_impset ]
[ ?runPlanRun g_runPlanRun ]
[ ?mode g_mode ]
[ ?waitUntilDone g_waitUntilDone ]
[ ?rerun g_rerun ]
)
=> t / nil"
"Runs or loads the result of the specified implementations in a Verifier session.")
("verifSetImpRun"
"verifSetImpRun(
g_sessionId
t_impLib
t_impCell
t_impView
t_impHistory
g_runState
)
=> t / nil"
"Sets the check state of the Run check box for the specified implementation in a Verifier session.")
("verifSetImpSetName"
"verifSetImpSetName(
g_sessionId
t_impSetName
t_newImpSetName
)
=> t / nil"
"Renames the specified implementation set.")
("verifStop"
"verifStop(
g_sessionId
[ ?implementation g_implementation ]
[ ?impSet g_impSet ]
)
=> t / nil"
"Stops simulations for one or more implementations. If no implementation or implementation set is specified, then all running implementations in the session are stopped.")
("slaAddCornerModelFile"
"slaAddCornerModelFile(
t_cornerSetupName
t_cornerName
l_list

)
=> t / nil"
"Adds a model file to a corner within a corner setup in the setup library view that is opened using the slaOpenOrCreateView function in edit mode. The function creates the specified corner if it does not exist in the corner setup.")
("slaAddCornerVariable"
"slaAddCornerVariable(
t_cornerSetupName
t_cornerName
t_varName
t_varValue
)
=> t / nil"
"Adds a corner variable to a corner of a corner setup in the setup library view that is opened using the slaOpenOrCreateView function in edit mode. The function creates the specified corner if it does not exist in the corner setup.")
("slaAddDocument"
"slaAddDocument(
t_docAbsoluteFilePath
)
=> t / nil"
"Adds a document to a setup library view that is opened using the slaOpenOrCreateView function in edit mode.")
("slaAddReliabilityOptions"
"slaAddReliabilityOptions(
t_setupName
t_optionsName
)
=> t / nil"
"Adds new reliability options in the Setup Library Assistant with default values.")
("slaAddSweepVariable"
"slaAddSweepVariable(
t_sweepSetupName
t_varName
t_varValue
)
=> t / nil"
"Adds a sweep variable to a sweep setup in the setup library view that is opened using the slaOpenOrCreateView function in edit mode.")
("slaAddToParametricSet"
"slaAddToParametricSet(
t_setupName
g_setId
t_varName	
)
=> t / nil"
"Adds a variable to the specified parametric set in the setup library view that is opened using the slaOpenOrCreateView function in edit mode.")
("slaAreParametricSetsEnabled"
"slaAreParametricSetsEnabled(
t_setupName
)
=> t / nil"
"Checks if all parametric sets are enabled for the specified sweep setup in the setup library view that is opened using the slaOpenOrCreateView function.")
("slaCreateCornerSetup"
"slaCreateCornerSetup(
t_setupName
)
=> t / nil"
"Creates a corner setup in the setup library view that is opened using the slaOpenOrCreateView function in edit mode.")
("slaCreateReliabilitySetup"
"slaCreateReliabilitySetup(
t_setupName
)
=> t / nil"
"Creates a new reliability setup in the Setup Library assistant with the specified name.")
("slaCreateSimulationSetup"
"slaCreateSimulationSetup(
t_setupName
)
=> t / nil"
"Creates a simulation setup in the setup library view that is opened using the slaOpenOrCreateView function.")
("slaCreateSweepSetup"
"slaCreateSweepSetup(
t_setupName
)
=> t / nil"
"Creates a sweep setup in a setup library view that is opened using the slaOpenOrCreateView function in edit mode.")
("slaCreateVerificationSpace"
"slaCreateVerificationSpace(
t_spaceName
t_sweepSetupName
t_cornerSetupName
[ t_simulationSetupName ]
)
=> t / nil"
"Creates a verification space in the setup library view that is opened using the slaOpenOrCreateView function in edit mode.")
("slaExportSetup"
"slaExportSetup(
t_fileName
)
=> t / nil"
"Exports the sweep setup, corner setup, simulation setup, and verification spaces to the SDB file in the setup library view that is opened using the slaOpenOrCreateView function.")
("slaGetAllDocuments"
"slaGetAllDocuments(
)
=> l_listOfDocuments"
"Retrieves a list of documents from the setup library view that is opened using the slaOpenOrCreateView function in edit mode.")
("slaGetCornerModels"
"slaGetCornerModels(
t_cornerSetupName
t_cornerName
)
=> l_listOfCornerModels"
"Retrieves a list of corner models of corner setup from the setup library view that is opened using the slaOpenOrCreateView function in edit mode.")
("slaGetCornerSetupCorners"
"slaGetCornerSetupCorners(
t_cornerSetupName
)
=> l_listOfCorners"
"Retrieves a list of corners for a specified corner setup from the setup library view that is opened using the slaOpenOrCreateView function in edit mode.")
("slaGetCornerSetups"
"slaGetCornerSetups(
)
=> l_listOfCornerSetups"
"Retrieves a list of corner setups from the setup library view that is opened using the slaOpenOrCreateView function in edit mode.")
("slaGetCornerVars"
"slaGetCornerVars(
t_cornerSetupName
t_cornerName
)
=> l_listOfCorners"
"Retrieves a list of corner variables of the specified corner setup from the setup library view that is opened using the slaOpenOrCreateView function in edit mode.")
("slaGetDocumentAbsolutePath"
"slaGetDocumentAbsolutePath(
t_docName
)
=> t_docAbsoluteFilePath"
"Retrieves the absolute path of a document in the setup library view that is opened using the slaOpenOrCreateView function in edit mode.")
("slaGetParametricSets"
"slaGetParametricSets(
t_setupName
[ ?getVariables g_getVariables ]	
)
=> l_psets / nil"
"Retrieves a list of parametric sets from the specified sweep setup in the setup library cellview that is opened using the slaOpenOrCreateView function.")
("slaGetReliabilityOptions"
"slaGetReliabilityOptions(
t_setupName
)
=> l_optionsNames"
"Retrieves a list of names of options set for a reliability setup.")
("slaGetReliabilitySetups"
"slaGetReliabilitySetups(
)
=> l_setupsNames"
"Retrieves a list of all reliability setups that are included in the setup library cellview.")
("slaGetSimulationSetupRunOptions"
"slaGetSimulationSetupRunOptions(
t_setupName
)
=> l_runOptions / nil"
"Retrieves the list of run options for the specified simulation setup of the setup library view that is opened using the slaOpenOrCreateView function.")
("slaGetSimulationSetupRunOptionValue"
"slaGetSimulationSetupRunOptionValue(
t_setupName
t_optionName
)
=> t_optionValue / nil"
"Retrieves the value of the run option for the specified simulation setup of the setup library view that is opened using the slaOpenOrCreateView function.")
("slaGetSimulationSetups"
"slaGetSimulationSetups(
)
=> l_simulationSetups / nil"
"Retrieves the list of simulation setups from the setup library view that is opened using the slaOpenOrCreateView function.")
("slaGetSweepSetups"
"slaGetSweepSetups(
)
=> l_listOfSweepSetups"
"Retrieves a list of sweep setups from the setup library view that is opened using the slaOpenOrCreateView function in edit mode.")
("slaGetSweepSetupVars"
"slaGetSweepSetupVars(
t_sweepSetupName
)
=> l_listOfSweepVars"
"Retrieves a list of sweep setup variables from the setup library view that is opened using the slaOpenOrCreateView function in edit mode.")
("slaGetVerificationSpaces"
"slaGetVerificationSpaces(
)
=> l_listOfLists"
"Retrieves a list of verification spaces from the setup library view that is opened using the slaOpenOrCreateView function in edit mode.")
("slaGroupAsParametricSet"
"slaGroupAsParametricSet(
g_setupName
l_varNames
)
=> t_setName / nil"
"Groups the variables as parametric set in sweep setup in the setup library view that is opened using the slaOpenOrCreateView function in editable mode.")
("slaImportCorners"
"slaImportCorners(
t_cornerSetupName
t_absoluteFilePath
)
=> t / nil"
"Imports corners into the setup library corner setup opened using the slaOpenOrCreateView function in edit mode. The file must be in CSV or SDB format.")
("slaImportSetup"
"slaImportSetup(
t_fileName
)
=> t / nil"
"Imports the sweep setup, corner setup, simulation setup, and verification spaces from the SDB file in the setup library view that is opened using the slaOpenOrCreateView function in edit mode.")
("slaImportSweeps"
"slaImportSweeps(
t_sweepSetupName
t_absoluteFilePath
)
=> t / nil"
"Imports sweeps into the corner setup in a setup library view that is opened using the slaOpenOrCreateView function in edit mode. The supported file extensions are csv and sdb.")
("slaIsCornerEnabled"
"slaIsCornerEnabled(
t_cornerSetupName
t_cornerName
)
=> t / nil"
"Retrieves the status of the specified corner within a corner setup in the a setup library view that is opened using the slaOpenOrCreateView function in edit mode. The function displays a warning if an invalid corner setup name or corner name is specified.")
("slaIsReliabilityOptionsEnabled"
"slaIsReliabilityOptionsEnabled(
t_setupName
t_optionsName
)
=> t / nil"
"Retrieves the enabled or disabled status of the reliability options included in a reliability setup in the setup library view that is opened using slaOpenOrCreateView in the edit mode. The function reports a warning if you specify an incorrect name for a reliability setup or option.")
("slaIsViewOpened"
"slaIsViewOpened(
)
=> t / nil"
"Checks whether a setup library view is opened or closed.")
("slaSetCornerEnabled"
"slaSetCornerEnabled(
t_cornerSetupName
t_cornerName
g_enabled
)
=> t / nil"
"Sets the enabled or disabled status of the specified corner within a corner setup in the setup library view that is opened using the slaOpenOrCreateView function in edit mode. The function displays a warning if an invalid corner setup name or corner name is specified.")
("slaOpenOrCreateView"
"slaOpenOrCreateView(
t_libName
t_cellName
t_viewName
[ g_readOnly ]
)
=> t / nil"
"When this function is run in edit mode, it opens the specified view in edit mode if the view exists. Otherwise, it creates a new view. In read-only mode, the function opens the provided view in read-only mode. In both cases, invoking this function checks out the ADE Verifier license. You can initialize the view from the Virtuoso CIW or by using the *il script.")
("slaRemoveCorner"
"slaRemoveCorner(
t_cornerSetupName
t_cornerName
)
=> t / nil"
"Removes a corner from the corner setup in a setup library view that is opened using the slaOpenOrCreateView function in edit mode.")
("slaRemoveCornerModel"
"slaRemoveCornerModel(
t_cornerSetupName
t_cornerName
t_modelName
)
=> t / nil"
"Removes a corner model file from the corner setup in a setup library view that is opened using the slaOpenOrCreateView function in edit mode.")
("slaRemoveCornerSetup"
"slaRemoveCornerSetup(
t_cornerSetupName
)
=> t / nil"
"Removes a corner setup from a setup library view that is opened using the slaOpenOrCreateView function in edit mode.")
("slaRemoveCornerVariable"
"slaRemoveCornerVariable(
t_cornerSetupName
t_cornerName
t_varName
)
=> t / nil"
"Removes a corner variable from corner setup of a setup library view that is opened using the slaOpenOrCreateView function in edit mode.")
("slaRemoveFromParametricSet"
"slaRemoveFromParametricSet(
t_setupName
g_setId
t_varName	
)
=> t / nil"
"Removes a variable from the specified parametric set in the setup library view that is opened using the slaOpenOrCreateView function in edit mode.")
("slaRemoveReliabilityOptions"
"slaRemoveReliabilityOptions(
t_setupName
t_optionName
)
=> t / nil"
"Removes the specified reliability options from a given reliability setup.")
("slaRemoveReliabilitySetup"
"slaRemoveReliabilitySetup(
t_setupName
)
=> t / nil"
"Removes the specified reliability setup from a setup library cellview.")
("slaRemoveSimulationSetup"
"slaRemoveSimulationSetup(
t_setupName
)
=> t / nil"
"Removes a simulation setup from the setup library view that is opened using the slaOpenOrCreateView function.")
("slaRemoveSweepSetup"
"slaRemoveSweepSetup(
t_sweepSetupName
)
=> t / nil"
"Removes a sweep setup from a setup library view that is opened using the slaOpenOrCreateView function in edit mode.")
("slaRemoveSweepVariable"
"slaRemoveSweepVariable(
t_sweepSetupName
t_varName
)
=> t / nil"
"Removes a specified sweep variable from the corner setup of a setup library view that is opened using the slaOpenOrCreateView function in edit mode.")
("slaRemoveVerificationSpace"
"slaRemoveVerificationSpace(
t_spaceName
)
=> t / nil"
"Removes a verification space from a setup library view that is opened using the slaOpenOrCreateView function in edit mode.")
("slaSaveAndCloseView"
"slaSaveAndCloseView(
[ ?overrideDM g_overrideDM ]
[ ?autoCheckInNewView g_autoCheckInNewView ]
[ ?checkInComment g_checkInComment ]
)
=> t / nil"
"Saves the specified view after editing. If a setup library view has been opened with the slaOpenOrCreateView function, the slaSaveAndCloseView function must be invoked after adding or removing components in the setup library assistant to save all the changes in the setupdb. Invoking the slaSaveAndCloseView() function releases or checks in the ADE Verifier license.")
("slaSetParametricSetsEnabled"
"slaSetParametricSetsEnabled(
t_setupName
g_enabled
)
=> t / nil"
"Enables or disables all parametric sets for the specified sweep setup in the setup library view that is opened using the slaOpenOrCreateView function in edit mode.")
("slaSetReliabilityOptionsEnabled"
"slaSetReliabilityOptionsEnabled(
t_setupname
t_optionName
g_enabled
)
=> t / nil"
"Enables or disables the specified reliability option in a reliability setup.")
("slaSetSimulationSetupRunOptionValue"
"slaSetSimulationSetupRunOptionValue(
t_setupName
t_optionName
t_optionValue	
)
=> t / nil"
"Sets the value of the given run option for the specified simulation setup from the setup library view that is opened using the slaOpenOrCreateView function.")
("slaUngroupParametricSet"
"slaUngroupParametricSet(
g_setupName
g_setId
)
=> t / nil"
"Ungroups the parametric set from a sweep setup in the setup library view that is opened using the slaOpenOrCreateView function in edit mode.")
("verifAreSnapshotsEnabled"
"verifAreSnapshotsEnabled(
g_sessionId
)
=> t / nil"
"Checks if snapshots are enabled in the specified Verifier session.")
("verifCompareImplementationsFromSnapshot"
"verifCompareImplementationsFromSnapshot(
g_sessionId
t_srcSnapshotName
t_dstSnapshotName
[ g_showDifferences ]
)
=> t / nil / l_comparisonResults"
"Compares the differences between implementations from snapshots. The implementation comparison targets include the ADE Assembler setup, design (schematic or configurations) and simulation files (model or definition files). You can view the differences in a form or retrieve the list of differences through this SKILL function")
("verifCreateSnapshot"
"verifCreateSnapshot(
g_sessionId
[ t_snapshotName ]
[ ?name t_name ]
[ ?prefix t_prefix ]
[ ?comment t_comment ]
[ ?visible g_visible ]
[ ?locked g_locked ]
)
=> t / nil"
"Creates a new snapshot '*.snapz' that contains the following: 
- An archive, stored in .json format, of the current requirements, mappings, and results as shown in Results tab. 
- A copy of the settings.v3 setup. 
- A copy of the results directory.")
("verifCreateSnapshotConfiguration"
"verifCreateSnapshotConfiguration(
g_sessionId
t_configName
l_properties
[ ?absoluteTolerance x_absoluteTolerance ]
[ ?relativeTolerance x_relativeTolerance ]
[ ?differences g_differences ]
[ ?compareVisible g_compareVisible ]
[ ?hideEmpty g_hideEmpty ]

)
=> t / nil"
"Creates snapshot configuration that contains the setup for Abs Tolerance, Rel Tolerance and Show filters on the Snapshots tab.")
("verifDeleteSnapshot"
"verifDeleteSnapshot(
g_sessionId
t_snapshotName
)
=> t / nil"
"Deletes the snapshot from the specified Verifier session.")
("verifDeleteSnapshotConfiguration"
"verifDeleteSnapshotConfiguration(
g_sessionId
t_configName
)
=> t / nil"
"Deletes the snapshot configuration with the specified name.")
("verifExportSnapshotsToExcel"
"verifExportSnapshotsToExcel(
g_sessionId
t_fileName
g_exportAll
)
=> t / nil"
"Exports the snapshot to the specified MS Excel file.")
("verifGetReferenceSnapshot"
"verifGetReferenceSnapshot(
g_sessionId
)
=> t_refSnapshotName / nil"
"Retrieves the reference snapshot from the specified Verifier session.")
("verifGetSnapshot"
"verifGetSnapshot(
g_sessionId
t_snapshotName
)
=> l_data / nil"
"Retrieves the disembodied property list for snapshot from the specified Verifier session.")
("verifGetSnapshotAbsoluteTolerance"
"verifGetSnapshotAbsoluteTolerance(
g_sessionId
)
=> f_value / nil"
"Returns the absolute tolerance value used when comparing snapshot values.")
("verifGetSnapshotComment"
"verifGetSnapshotComment(
g_sessionId
t_snapshotName
)
=> t_comment / nil"
"Returns the comment text for a snapshot.")
("verifGetSnapshotRelativeTolerance"
"verifGetSnapshotRelativeTolerance(
g_sessionId
)
=> f_value / nil"
"Returns the relative tolerance value used when comparing snapshot values.")
("verifGetSnapshots"
"verifGetSnapshots(
g_sessionId
)
=> l_snapshots / nil"
"Retrieves the list of snapshots from the specified Verifier session.")
("verifGetSnapshotsData"
"verifGetSnapshotsData(
g_sessionId
[ g_showAll ]
)
=> l_snapshotsData / nil"
"Retrieves the disembodied property list for snapshots from the specified Verifier session.")
("verifIsSnapshotLocked"
"verifIsSnapshotLocked(
g_sessionId
t_snapshotName
)
=> t / nil"
"Returns the locked status of the snapshot.")
("verifIsSnapshotVisible"
"verifIsSnapshotVisible(
g_sessionId
t_snapshotName
)
=> t / nil"
"Returns the visibility status for the specified snapshot.")
("verifRenameSnapshot"
"verifRenameSnapshot(
g_sessionId
t_snapshotName
t_newSnapshotName
)
=> t / nil"
"Renames a snapshot with the specified name.")
("verifRestoreFromSnapshot"
"verifRestoreFromSnapshot(
g_sessionId
t_snapshotName
)
=> t / nil"
"Restores a Verifier session from a snapshot along with any stored results.")
("verifSetReferenceSnapshot"
"verifSetReferenceSnapshot(
g_sessionId
t_refSnapshotName
)
=> t / nil"
"Sets the reference snapshot in the specified Verifier session.")
("verifSetSnapshotAbsoluteTolerance"
"verifSetSnapshotAbsoluteTolerance(
g_sessionId
f_value
)
=> t / nil"
"Sets the absolute tolerance for snapshot comparison in a Verifier session.")
("verifSetSnapshotComment"
"verifSetSnapshotComment(
g_sessionId
t_snapshotName
t_comment
)
=> t / nil"
"Sets the comment for a snapshot in a Verifier session.")
("verifSetSnapshotConfiguration"
"verifSetSnapshotConfiguration(
g_sessionId
t_configName
)
=> t / nil"
"Saves the current Show list configuration with the specified name and filters the Snapshots tab items with the specified configuration.")
("verifSetSnapshotLocked"
"verifSetSnapshotLocked(
g_sessionId
t_snapshotName
g_isLocked
)
=> t / nil"
"Locks or unlocks the specified snapshots in the given Verifier session.")
("verifSetSnapshotRelativeTolerance"
"verifSetSnapshotRelativeTolerance(
g_sessionId
f_value
)
=> t / nil"
"Sets the relative tolerance for snapshot comparison in a Verifier session.")
("verifSetSnapshotVisible"
"verifSetSnapshotVisible(
g_sessionId
t_snapshotName
g_isVisible
)
=> t / nil"
"Sets the visibility of a snapshot in a Verifier session. When made visible, it appears as a column in the Snapshots tab.")
("verifSetSnapshotsEnabled"
"verifSetSnapshotsEnabled(
g_sessionId
g_enabled
)
=> t / nil"
"Enables or disables snapshots in the specified Verifier session.")
("verifCreateVPlan"
"verifCreateVPlan(
g_sessionId
t_fileName
)
=> t / nil"
"Creates a vPlan file (*.vplanx) for specified Verifier session that is connected to the vManager server.")
("verifCreateVsifScript"
"verifCreateVsifScript(
g_sessionId
t_vsifFileName
[t_batchFileName]
)
=> t / nil"
"Creates a Verification Simulation Input File (*.vsif) and batch script file for the specified Verifier session that is connected to the vManager server. This allows running Verifier from vManager.")
("verifDownloadFromVManager"
"verifDownloadFromVManager(
g_sessionId
?g_waitUntilDone waitUntilDone
?t_action action
)
=> t / nil"
"Downloads the data from specified vPlan file through vManager server.")
("verifGetVManager"
"verifGetVManager(
g_sessionId
[g_addDetails]
)
=> l_settings / nil"
"Retrieves the vManager settings from the specified Verifier session.")
("verifGetVManagerProjects"
"verifGetVManagerProjects(
g_sessionId
)
=> l_projects / nil"
"Retrieves a list of projects from vManager server that are configured in the specified Verifier session.")
("verifIsVManagerConnected"
"verifIsVManagerConnected(
g_sessionId
)
=> t / nil"
"Checks if the Verifier session is connected to the vManager server.")
("verifIsVManagerEnabled"
"verifIsVManagerEnabled(
g_sessionId
)
=> t / nil"
"Checks if vManager is enabled in the specified Verifier session.")
("verifPostResultsToVManager"
"verifPostResultsToVManager(
g_sessionId
[t_vmSessionName]
)
=> t / nil"
"Posts the verification results of a simulation to the specified vManager session.")
("verifRemoveVManager"
"verifRemoveVManager(
g_sessionId
)
=> t / nil"
"Remove all the vManager settings from the specified Verifier session.")
("verifSetVManager"
"verifSetVManager(
g_sessionId
?username g_username
?password g_password
?hostname g_hostname
?port g_port
?project g_project
?timeout g_timeout
?vPlan g_vPlan
?enabled g_enabled
?action t_action
)
=> t / nil"
"Configures or updates the vManager settings within the specified Verifier session.")
("verifUploadToVManager"
"verifUploadToVManager(
g_sessionId
[g_waitUntilDone]
)
=> t / nil"
"Uploads the Verifier data to the specified vPlan file using the vManager server.")
("verifVPlanExists"
"verifVPlanExists(
g_sessionId
t_fileName
)
=> t / nil"
"Checks if the vPlan file exists and can be accessed by the vManager configured in the specified Verifier session.")
("verifEnableDebug"
"verifEnableDebug(
[ t_string ]
)
=> t / nil"
"Enables additional debug logging of various categories.")
("verifDisableDebug"
"verifDisableDebug(
[ t_string ]
)
=> t / nil"
"Disables one or more categories for debug logging.")
("verifGetDebug"
"verifGetDebug(
[ g_all ]
)
=> t_categories / nil"
"Gets the names of enabled debug categories or all possible categories.")