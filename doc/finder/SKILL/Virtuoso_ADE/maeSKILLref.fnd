;SKILL Language Functions
("maeConvertAndCombineMultiADELToAssembler"
"maeConvertAndCombineMultiADELToAssembler(
l_stateList
t_maestroLib
t_maestroCell
[ ?maestroView t_maestroView ]
[ ?migrateFrom t_migrateFrom ]
[ ?rootPath t_rootPath ]
[ ?testNameList t_testNameList ]
[ ?overwrite g_overwrite ]
)
=> l_cellviewDetails / nil"
"Combines two or more ADE L states into one maestro cellview for ADE Assembler. In the resulting maestro cellview, the tests are created in the same order in which the states are specified in the list of states to be migrated.")
("maeMigrateADELStateToMaestro"
"maeMigrateADELStateToMaestro(
t_stateLib
t_stateCell
t_stateName
[ ?maestroLib t_maestroLib ]
[ ?maestroCell  t_maestroCell ]
[ ?maestroView t_maestroView ]
[ ?migrateFrom s_migrateFrom ]
[ ?statePath t_statePath ]
[ ?simulator t_simulator ]
[ ?overwrite g_overwrite ]
)
=> l_cellviewDetails / nil"
"Migrates the given ADE L state to a maestro cellview that can be opened in ADE Explorer.")
("maeMigrateADEXLToMaestro"
"maeMigrateADEXLToMaestro(
t_stateLib
t_stateCell
t_stateName
[ ?maestroLib t_maestroLib ]
[ ?maestroCell  t_maestroCell ]
[ ?maestroView t_maestroView ]
[ ?overwrite g_overwrite ]
[ ?skipHistory g_skipHistory ]
)
=> t / nil"
"Migrates the given ADE XL view to a new maestro cellview that can be opened in ADE Assembler.")
("maeAddOutput"
"maeAddOutput(
t_outputName
t_testName
[ ?outputType t_outputType ]
[ ?signalName t_signalName ]
[ ?expr t_expr ]
[ ?plot g_plot ]
[ ?save g_save ]
[ ?session t_sessionName ]
)
=> t / nil"
"Adds an output for the given test in the currently active setup.")
("maeApplyCornerEditingOptions"
"maeApplyCornerEditingOptions(
[ ?session g_sessionName ]
)
=> t / nil"
"Applies the updates specified through maeSetCornerEditingOptions to the Corners Setup form.")
("maeCreateTest"
"maeCreateTest(
t_testName 
[ ?sourceTest t_sourceTest ] 
[ ?lib t_lib ] 
[ ?cell t_cell ]
[ ?view t_view ]
[ ?simulator t_simulator ]
[ ?session t_sessionName ]
)
=> t / nil"
"Creates a new test and adds it to the given maestro session. The design name for this test is set using the library, cell, and view name. If a source test name is given, it creates a copy of that test.")
("maeCloseSession"
"maeCloseSession(
[ ?session t_sessionName ]
[ ?forceClose g_forceClose ]
)
=> t / nil"
"Closes the sessions opened using maeOpenSetup in the SKILL code. This function cannot be used to close the sessions opened from the Virtuoso user interface.")
("maeConvertViewForReferencedAndLocalRunPlanCorners"
"maeConvertViewForReferencedAndLocalRunPlanCorners(
t_libName 
t_cellName 
t_viewName 
)
=> t / nil"
"Converts all local and referenced corners created in cellviews saved using IC6.1.8 ISR9 or ICADVM18.1 ISR9 to referenced corners supported in earlier versions.")
("maeConvertViewForSeparateHistoryManagement"
"maeConvertViewForSeparateHistoryManagement(
t_libName
t_cellName
t_viewName
[ ?newLib t_newLibName ]
[ ?newCell t_newCellName ]
[ ?newView t_newViewName ]
[ ?overwrite g_overwrite ]
)
=> t / nil"
"Converts the maestro views in which history setup is integrated with the main setup database to an enhanced format in which separate history management is enabled.")
("maeCloseCornersSetupForm"
"maeCloseCornersSetupForm(
[ ?session t_sessionName ]
)
=> t / nil"
"Closes the Corners Setup from.")
("maeDeleteCorner"
"maeDeleteCorner(
t_cornerName
[ ?session t_sessionName ]
)
=> t / nil"
"Deletes the specified corner from the setup database.")
("maeDeleteMultiWildCardOutputs"
"maeDeleteMultiWildCardOutputs(
l_outputNamesWithWildCards
[ ?custom_column l_customColumnValue ]
[ ?customColumnName t_customColumnName ]
[ ?session t_sessionName ]
)
=> t / nil"
"Deletes the named outputs from the active setup. You can also delete outputs conditionally, based on a specified value in a custom column. You can use wildcard characters in the list of output names.")
("maeDeleteOutput"
"maeDeleteOutput(
t_outputName
t_testName
[ ?session t_sessionName ]
)
=> t / nil"
"Deletes the specified output from the setup database.")
("maeDeleteExplorerHistory"
"maeDeleteExplorerHistory(
t_sessionName
t_historyName
)
=> t / nil"
"Deletes the specified ADE Explorer history from the given maestro session.")
("maeDeleteParameter"
"maeDeleteParameter(
t_parameterName
[ ?session t_sessionName ]
)
=> t / nil"
"Deletes the specified parameter from the setup database.")
("maeDeleteTags"
"maeDeleteTags(
[ ?session t_sessionName ]
[ ?variables l_variableNames ]
[ ?corners l_cornerNames ]
)
=> t / nil"
"Deletes the tags from the given list of variables and corners in the given session.")
("maeDeleteTest"
"maeDeleteTest(
t_testName 
[ ?run t_run ]
[ ?session t_session ]
)
=> t / nil"
"Deletes the given test from the active setup or the specified run in the run plan.")
("maeDeleteVar"
"maeDeleteVar(
t_varName
[ ?session t_sessionName ]
)
=> t / nil"
"Deletes the specified variable from the setup database.")
("maeEnableCorner"
"maeEnableCorner(
[ ?run t_run ]
[ ?enable g_enable ]
[ ?session t_session ]
[ ?varList l_varList]
[ ?all g_all ]
)
=> t / nil"
"Enables or disables corners for a run in the run plan or in the active setup of ADE Assembler.")
("maeEnableGlobalVar"
"maeEnableGlobalVar(
[ ?run t_run ]
[ ?enable g_enable ]
[ ?session t_session ]
[ ?varList l_varList ]
[ ?all g_all ]
)
=> t / nil"
"Enables or disables the global variables for the specified run in the run plan or in the active setup of ADE Assembler.")
("maeEnableParameter"
"maeEnableParameter(
[ ?run t_run ]
[ ?enable g_enable ]
[ ?session t_session ]
[ ?varList l_varList ]
[ ?all g_all ]
)
=> t / nil"
"Enables or disables all of the given parameters for the given run in the run plan or in the active setup of ADE Assembler.")
("maeEnableTests"
"maeEnableTests(
[ ?run t_run ]
[ ?testNames l_testNames ]
[ ?enable g_enable ]
[ ?session t_session ]
[ ?all g_all ]
)
=> t / nil"
"Enables or disables the specified tests for the specified run in the run plan or in the active setup of ADE Assembler.")
("maeExportCornersToCSV"
"maeExportCornersToCSV(
t_sessionName
t_CSVFilePath
)
=> t / nil"
"Exports corners from a maestro cellview to the given file in CSV format.")
("maeExportCornersToSDB"
"maeExportCornersToSDB(
t_sessionName
t_SDBFilePath
)
=> t / nil"
"Exports corners from a maestro cellview to the given file in SDB format.")
("maeExportGlobalVariablesToCSV"
"maeExportGlobalVariablesToCSV(
t_sessionName
t_CSVFilePath
)
=> t / nil"
"Exports global variables from Virtuoso ADE Assembler to the given CSV file.")
("maeExportRunPreview"
"maeExportRunPreview(
?session t_sessionName 
?fileName t_fileName 
)
=> t / nil"
"Exports the Run Preview table to the specified CSV file. The default location of this file is path-to-cellview/documents.")
("maeExportSetupForExplorer"
"maeExportSetupForExplorer(
t_session
)
=> t / nil"
"Displays the Save A Copy form in ADE Explorer, which you can use to save the current setup. It is a callback function.")
("maeGetAllExplorerHistoryNames"
"maeGetAllExplorerHistoryNames(
t_session
)
=> l_historyNames / nil"
"Returns a list of names of all the ADE Explorer histories for the specified maestro session.")
("maeGetAnalysis"
"maeGetAnalysis(
t_testName
t_analysis
[ ?includeEmpty g_includeEmpty ]
[ ?option t_option ]
[ ?session t_sessionName ]
)
=> l_options / nil"
"Returns a list containing name-value pairs of the options set for the given analysis. By default, the function returns only those options for which the value is not empty. If the g_includeEmpty argument is set to t, it returns all the options. You can also specify the name of a specific option for which you want to know the value.")
("maeGetCornerEditingOptions"
"maeGetCornerEditingOptions(
[ ?session g_sessionName ]
)
=> l_dpl / nil"
"Returns a disembodied property list containing the arguments specified through maeSetCornerEditingOptions.")
("maeGetCurrentRunMode"
"maeGetCurrentRunMode(
[ ?session t_sessionName ]
[ ?run t_runName ]
[ ?Abbreviations g_abbreviation ]
)
=> t_runModeName / nil"
"Returns the name of the run mode set in the given session or the given run.")
("maeGetEnabledAnalysis"
"maeGetEnabledAnalysis(
t_testName
[ ?session t_sessionName ]
)
=> l_analysisNames / nil"
"Returns a list containing names of all the analyses enabled for the given test.")
("maeGetEnvOption"
"maeGetEnvOption(
t_testName
[ ?includeEmpty g_includeEmpty ]
[ ?option t_option ]
[ ?session t_sessionName ]
)
=> l_optionList / nil"
"Returns a list of name-value pairs for all the environment option for the given test. By default, it returns all the environment options whose value is not nil. If the includeEmpty argument is set to t, the function returns all the environment options. If a specific option is given, it returns the value of only that option.")
("maeGetExplorerTestName"
"maeGetExplorerTestName(
[ ?session t_sessionName ]
)
=> t_testName / nil"
"Returns the name of the test opened in ADE Explorer. If you descend into ADE Explorer from ADE Assembler, use this function to get the name of the current test.")
("maeGetSetup"
"maeGetSetup(
[ ?typeName t_typeName ]
[ ?enabled g_enabled ]
[ ?run t_runName ]
[ ?session t_sessionName ]
)
=> l_setupDetails / nil"
"Returns the required setup details of variables, parameters, corners, and tests from the given session.")
("maeGetSimOption"
"maeGetSimOption(
t_testName
[ ?option t_optionName ]
[ ?includeEmpty g_includeEmpty ]
[ ?session t_sessionName ]
)
=> l_options / nil"
"Returns a list containing name-value pairs for the simulator options for the given test. By default, it returns all the simulator options whose value is not nil. If the includeEmpty argument is set to t, it returns all the simulator options. If a specific option is specified, the function returns the value of only that option.")
("maeGetSessions"
"maeGetSessions()
=> l_sessionNames / nil"
"Returns an alphanumerically sorted list of ADE Explorer or ADE Assembler sessions that are currently open.")
("maeGetSetupLibrary"
"maeGetSetupLibrary(
[ ?session t_session ]
)
=> t_cellviewName / nil"
"Retrieves the setup library view from the current or specified session.")
("maeGetTags"
"maeGetTags(
[ ?session t_sessionName ]
[ ?elementType l_elementType ]
)
=> l_tagsList / nil"
"Returns a list of tags assigned to the specified corners or variables in the given session.")
("maeGetTestEnvVar"
"maeGetTestEnvVar(
t_testName
t_varName
[ ?session t_sessionName ] 
)
=> g_value / nil"
"Returns the value of the specified environment variable for the given test. This function can be used to get the value set for a particular test using the maeSetTestEnvVar function.")
("maeGetTestSession"
"maeGetTestSession (
t_testName
[ ?session t_sessionName ] 
)
=> h_testSession / nil"
"Returns session handle to the given test. You can use this handle to view or modify the test details.")
("maeGetVar"
"maeGetVar(
t_varname
[ ?typeName t_typeName ]
[ ?typeValue t_typeValue ]
[ ?session t_sessionName ] 
)
=> t_value / nil"
"Returns value of the given variable. Use this function to get the global, test-level, or corner value for the given variable.")
("maeImportOutputsFromFileInDocuments"
"maeImportOutputsFromFileInDocuments(
t_filename 
[ ?operation t_operation ]
[ ?test t_test ]
[ ?session t_session ]

)
=> t / nil"
"Imports outputs from the specified CSV file in the documents directory to one or all tests in an already opened maestro cellview. The usage of this function is similar to axlOutputsImportFromFile that can import outputs from a CSV file from any location.")
("maeImportSetupForExplorer"
"maeImportSetupForExplorer(
t_session
)
=> t / nil"
"Displays the Import Setup form in ADE Explorer, which you can use to import a saved maestro cellview in the current setup. This is a callback function.")
("maeIsPrerunScriptEnabled"
"maeIsPrerunScriptEnabled(
t_sessionName
t_testName
)
=> t / nil"
"Checks whether pre-run scripts are enabled for a test in the given maestro session.")
("maeIsSetupModified"
"maeIsSetupModified(
[ ?session t_sessionName ] 
)
=> t / nil"
"Checks whether the setup has been modified after the last time it was saved in the given maestro session.")
("maeIsSingleTest"
"maeIsSingleTest(
t_libraryName 
t_cellName 
t_viewName
)
=> t / nil"
"Returns t if the given cellview contains a single test or multiple tests.")
("maeIsValidMaestroSession"
"maeIsValidMaestroSession(
t_sessionName 
)
=> t / nil"
"Confirms if the given session is valid for ADE Explorer or ADE Assembler.")
("maeLoadCorners"
"maeLoadCorners(
t_fileName 
[?operation t_operation]
[?session t_session]
)
=> t / nil"
"Loads corners from the given file into the corner setup of the current session or the specified session.")
("maeMakeEditable"
"maeMakeEditable(
[?session t_session]
)
=> t / nil"
"Changes the mode of an already open cellview from read-only to editable.")
("maeMakeReadonly"
"maeMakeReadonly(
[?session t_session]
)
=> t / nil"
"Changes the mode of an already open cellview from editable to read-only.")
("maeOpenSetup"
"maeOpenSetup(
t_libName
t_cellName
t_viewName
[ ?application t_applicationName ]
[ ?histName t_historyName ]
[ ?mode t_mode ]
)
=> t_sessionName / nil"
"Loads the given cellview and restores the setup details from the specified history. If no history name is specified, the active setup is loaded. If the specified view is already opened in the current Virtuoso session, it is not opened again. However, if the view is already open in some other Virtuoso session, it is opened in read mode in the current session. If the given cellview does not exist, the function creates a new cellview with the same name.")
("maeLoadSetupState"
"maeLoadSetupState(
t_stateName
[ ?run t_runNames ]
[ ?tags l_tagNames ] 
[ ?operation s_operationName ]
[ ?session t_sessionName ])
)
=> t_sessionName / nil"
"Loads the given setup state into the given session.")
("maeLoadStateForTest"
"maeLoadStateForTest(
t_testName
t_stateName
[ ?session t_session ]
[ ?loadFrom s_loadFrom ]
[ ?statePath s_statePath ]
[ ?libName t_libName ]
[ ?cellName t_cellName ]
[ ?simulator t_simulatorName ]
[ ?component l_componentList ]
)
=> t_sessionName / nil"
"Loads the saved ADE state for the given test.")
("maeResetCornerEditingOptions"
"maeResetCornerEditingOptions(
[ ?session g_sessionName ]
)
=> t / nil"
"Resets the Corners Setup form to its state before maeSetCornerEditingOptions was applied.")
("maeRegTimer"
"maeRegTimer(
t_callbackString
x_tenthsofseconds
)
=> t / nil"
"Registers or sets a timer to initialize the specified SKILL function after the given time has elapsed during simulation. This timer can be used in ADE interface job customization.")
("maeRunDspfChecker"
"maeRunDspfChecker(
[ ?session t_sessionName ]
)
=> l_testName"
"Runs the Spf Checker utility for the tests that have DSPF files in the setup.")
("maeSaveSetup"
"maeSaveSetup(
[ ?lib t_libName ] 
[ ?cell t_cellName ]
[ ?view t_viewName ]
[ ?session t_sessionName ])
=> t / nil"
"Saves the setup database file and test state files for the current session in the library, cell, view format. The behavior of this function is similar to File - Save. It is recommended to run this function after making changes in the setup.")
("maeSaveSetupStateForOptimization"
"maeSaveSetupStateForOptimization(
[ ?session t_sessionName ] 
[ ?run t_runName ]
[ ?setupState t_setupState ]
[ ?pointID x_pointID ]
[ ?historyName t_historyName ]
)
=> t / nil"
"Saves the setup state for optimization from the best design point of a run or the given history. You can use this saved state as the starting point for an optimization run in a run plan.")
("maeSetCornerEditingOptions"
"maeSetCornerEditingOptions(
[ ?cornerNameFilter g_FilterName ]
[ ?session g_sessionName ]
[ ?removeVarList g_VarList ]
[ ?removeDuplicates {t|nil}]
[ ?removeUndefined {t|nil}]

)
=> t / nil"
"Specifies the options for editing the corners setup. These settings are reflected in the Corners Setup form, when the options Import Corners from CSV File and Import Corners from SDB File are used.")
("maeSetStartingPointForOptimization"
"maeSetStartingPointForOptimization(
[ ?session t_sessionName ] 
[ ?run t_runName ]
[ ?setupState t_setupState ]
[ ?runMode t_runMode ]
)
=> t / nil"
"Sets the given setup state as the starting point for the Local Optimization or Global Optimization run mode in the specified run.")
("maeSetTags"
"maeSetTags(
[ ?session t_sessionName ]
[ ?variables l_variables ]
[ ?corners l_corners ]
[ ?tags l_tags ]
[ ?overwrite g_overwrite ]
)
=> t / nil"
"Assigns the given tags to the specified corners and variables. You can also append to or overwrite the existing tags.")
("maeStmConsolidateStimuli"
"maeStmConsolidateStimuli(
t_libName 
t_cellName
t_viewName
?reportFile t_reportFile
)
=> t / nil"
"Removes duplicate stimuli definitions from the given cellview. For this, ADE Explorer or ADE Assembler reviews each test in the cellview and, if required, reassigns pins and globals by removing duplicates.")
("maeStmGenerateWaveforms"
"maeStmGenerateWaveforms(
t_libName 
t_cellName
t_viewName
[ ?test t_testName ]
[ ?reportFile t_reportFile ]
[ ?force g_force ]
)
=> t / nil"
"Generates preview stimuli waveforms for the stimuli added for a maestro cellview that contains stimuli definitions added through the Stimuli Assignment form. These stimuli definitions are saved in the file lib-name/cell-name/view-name/namedStimuli/stimuli.xml.")
("maeSaveSetupState"
"maeSaveSetupState(
t_stateName
[ ?tags l_tagNames ] 
[ ?inReadOnly s_readOnlyAction ]
[ ?session t_sessionName ])
=> t / nil"
"Saves a setup state for the given session.")
("maeSetAnalysis"
"maeSetAnalysis(
t_testName
t_analysis
[ ?enable g_enabled ]
[ ?options l_options ]
[ ?session t_sessionName ]
)
=> t / nil"
"Adds or removes an analysis for the given test. The function can also be used to set the value of different options for the analysis.")
("maeSetCorner"
"maeSetCorner(
t_cornerName
[ ?enabled g_enabled ]
[ ?enableTests l_enableTests ]
[ ?disableTests l_disableTests ]
[ ?session t_sessionName ]
)
=> t / nil"
"Adds a new corner and enables/disables it for the given test.")
("maeSetCurrentRunMode"
"maeSetCurrentRunMode(
[ ?session t_sessionName ]
?runMode t_runModeName
)
=> t / nil"
"Updates the current run mode in ADE Assembler.")
("maeSetDesign"
"maeSetDesign(
t_testName
t_libName
t_cellName
t_viewName
[ ?session t_sessionName ]
)
=> t_testName / nil"
"Sets a design for the given test. Use this function to change the design associated to a test.")
("maeSetDesignForTest"
"maeSetDesignForTest(
t_libName 
t_cellName 
t_viewName 
[ ?test t_test ]
[ ?session t_session ]

)
=> t / nil"
"Sets a design for all tests or the specified test.")
("maeSetEnableTestVar"
"maeSetEnableTestVar(
t_testName
l_variableNames
[ ?enabled g_enabled ]
[ ?session t_sessionName ]
)
=> t / nil"
"Enables or disables the specified variables or local sweeps for the given test.")
("maeSetEnvOption"
"maeSetEnvOption(
t_testName
[ ?options l_options ]
[ ?session t_sessionName ]
)
=> t / nil"
"Sets values for one or more environment options for the given test.")
("maeSetHistoryLock"
"maeSetHistoryLock(
t_historyName 
g_lock
[ ?session t_sessionName ])
=> t / nil"
"Locks or unlocks the given history for the given ADE Assembler session.")
("maeSetParameter"
"maeSetParameter(
t_parameterName
g_parameterValue
[ ?typeName t_typeName ]
[ ?typeValue l_typeValue ]
[ ?session t_sessionName ]
)
=> t / nil"
"Adds a new parameter at the global level or corner level. If the parameter already exists, its value is updated.")
("maeSetSpec"
"maeSetSpec (
t_outputName
t_testName
[ ?minimum g_minValue ]
[ ?maximum g_maxValue ]
[ ?gt g_greaterThanValue ]
[ ?lt g_lessThanValue ]
[ ?range g_rangeValues ]
[ ?tolerance g_toleranceValue ]
[ ?info g_info ]
[ ?weight g_weightingFactor ]
[ ?corner g_cornerName ]
[ ?session t_sessionName ]
)
=> t / nil"
"Adds a specification to an output defined for a test. You can also use this function to modify an existing specification for an output.")
("maeSetSetup"
"maeSetSetup(
[ ?tests l_testNames ]
[ ?variables l_variables ]
[ ?parameters l_params ]
[ ?corners l_corners ]
[ ?enabled g_enabled ]
[ ?session t_sessionName ] 
)
=> t / nil"
"Enables or disables the tests, global variables, parameters, and corners.")
("maeSetSetupLibrary"
"maeSetSetupLibrary(
t_libName
t_cellName
t_viewName
[ ?session t_sessionName ]
)
=> t / nil"
"Connects the provided setup library view to the maestro view.")
("maeSetSimOption"
"maeSetSimOption(
t_testName 
[ ?options l_options ]
[ ?session t_sessionName ] 
)
=> t / nil"
"Sets values for the specified simulator options of the given test. Multiple options can be specified in a single command.")
("maeSetTestEnvVar"
"maeSetTestEnvVar(
t_testName
t_varName
g_varValue
[ ?session t_sessionName ]
)
=> t_value / nil"
"Sets the value for the given environment variable at the test level. The value is used only by the specified test. Other tests in the session use the value set at the global level or specific values set for them, if any.")
("maeSetVar"
"maeSetVar(
t_varname
g_valValue
[ ?typeName t_typeName ]
[ ?typeValue l_typeValue ]
[ ?run t_runName ]
[ ?session t_sessionName ] 
)
=> t / nil"
"Adds a variable to the given test or corner in the given ADE Explorer or ADE Assembler session. If the variable already exists, its value is updated.")
("maeUpdateImplicitSignals"
"maeUpdateImplicitSignals( 
o_session 
[?test t_name] 
) 
=> t / nil"
"Updates the implicit signals for the tests in the specified maestro session.")
("getSimRunInfo"
"getSimRunInfo(
t_Type
)
=> s_Value/ nil"
"Returns the value of the specified type of simulation information for a given ADE output expression by accessing the related psf directory.")
("maeCloseResults"
"maeCloseResults(
)
=> t / nil"
"Closes the results opened by the maeOpenResults function.")
("maeDeleteSimulationData"
"maeDeleteSimulationData(
t_historyName
?session t_sessionName
?keepNetlist g_keepNetlist
?keepQuickPlot g_keepQuickPlot
)
=> t / nil"
"Deletes the simulation results data for the given history.")
("maeDisplayLogDiagnostics"
"maeDisplayLogDiagnostics(
x_ID
)
=> t_fileName / nil"
"Displays the ADE diagnostics report for the diagnostics run associated with the specified ID. The diagnostics report is generated in the background without freezing the maestro session.")
("maeExportOutputView"
"maeExportOutputView(
[ ?session t_sessionName ]
[ ?fileName t_fileName ]
[ ?view t_viewType ]
[ ?historyName t_historyName ]
[ ?testName t_testName ]
[ ?filterName t_filterName ]
[ ?clearAllFilters g_clearAllFilters ]
)
=> t / nil"
"Exports the output or results view to the specified .csv or .html file.")
("maeForceRdbStatus"
"maeForceRdbStatus(
t_sessionName
t_historyName
?pointID x_pointID
?designPointID x_designPointID
?cornerName t_cornerName
?toStatus t_toStatus
)
=> t / nil"
"Forcefully sets the status of results for a history or a selected point in a history.")
("maeGetNBestDesignPoints"
"maeGetNBestDesignPoints(
[ ?count n_designPoints ]
)
=> l_bestDesignPoints / nil"
"Returns the best design points for the opened results.")
("maeGetOutputValue"
"maeGetOutputValue(
t_outputName
t_testName
[ ?cornerName t_cornerName ]
[ ?pointId x_pointId ]
[ ?evalType t_evalType ]
)
=> x_value / nil"
"Returns value of the given output.")
("maeGetParamConditions"
"maeGetParamConditions(
x_designPointID 
?typeName t_typeName
)
=> l_designParamConditions / nil"
"Returns the design parameter conditions for the given design point ID.")
("maeGetParameter"
"maeGetParameter(
t_paramName
[ ?typeName t_typeName ]
[ ?typeValue t_typeValue ]
[ ?session t_sessionName ]
)
=> t_value / nil"
"Returns value of the given parameter for the given test or corner.")
("maeGetResultOutputs"
"maeGetResultOutputs(
[ ?testName t_testName ]
)
=> l_outputNames / nil"
"Returns the list of outputs for the opened result.")
("maeGetResultTests"
"maeGetResultTests()
=> l_testNames / nil"
"Returns a list of tests for the opened result.")
("maeGetResultsViewSelectedCellsDetails"
"maeGetResultsViewSelectedCellsDetails(
t_sessionName
)
=> l_resultData / l_faultResultData /nil"
"Returns a list of data point ID, test name, and output name for each result value selected in the Detail, Detail-Transpose, or Fault results view of the currently visible run history. If the selected cell is in the column that does not show any results value, for example, Test or Output, no data is returned from that.")
("maeGetSpecStatus"
"maeGetSpecStatus(
t_outputName
t_testName
[ ?pointId n_pointId ]
)
=> pass / fail / undefined"
"Returns the specification status for the given output, test and point id.")
("maeGetTestOutputs"
"maeGetTestOutputs(
t_testName
[ ?session t_session ]
)
=> l_outputs / nil"
"Returns the list of outputs for the specified test in the current session or a specific maestro session.")
("maeGetOverallSpecStatus"
"maeGetOverallSpecStatus(
[ ?verbose verbose ]
)
=> t / nil"
"Returns the overall specification status for the current history.")
("maeGetOverallYield"
"maeGetOverallYield(
t_historyName
[ t_sessionName ]
)
=> t / nil"
"Returns the overall yield for the given history.")
("maeImportHistory"
"maeImportHistory(
t_libName
t_cellName
t_viewName
[ ?session t_sessionName ]
[ ?history t_historyName ]
[ ?copyPSF g_copyPSF ]
[ ?overwrite g_overwrite ]
)
=> t / nil"
"Imports the zip file for the given history from one cellview into the current cellview.")
("maeOpenResults"
"maeOpenResults(
[ ?session t_sessionName ]
[ ?history t_historyName ]
[ ?run t_runName ]
)
=> t / nil"
"Opens the result for the given history or run plan, and sets the result pointer to be used by other functions.")
("maeReadResDB"
"maeReadResDB(
[ ?historyName t_historyName ] 
[ ?session t_sessionName ] 
[ ?run t_runName ]
)
=> h_resultsDBObj / nil"
"Returns a handle to the results database for the given history.")
("maeRestoreHistory"
"maeRestoreHistory(
t_histName
[ ?session t_sessionName ] 
)
=> t / nil"
"Restores the given history as the active setup.")
("maeRunLogDiagnostics"
"maeRunLogDiagnostics(
[ ?session t_session ]
[ ?lib t_libName ]
[ ?cell t_cellName ]
[ ?view t_viewName ]
[ ?directory t_directory ]
[ ?historyName t_historyName ]
[ ?points l_points ]
[ ?testNames l_testNames ]
[ ?checks l_checks ]
[ ?jobs x_jobs ]
[ ?tolerance x_tolerance ] 
[ ?display g_display ] 
[ ?log t_log ] 
)
=> x_ID / nil"
"Runs a list of checks on the log files for the specified history and generates the ADE Diagnostics report. Troubleshooting simulation errors using log files can be a difficult task because ADE Assembler saves multiple log files that are generated by different components of the LSCS architecture. The ADE diagnostics reports provides a detailed analysis of such errors and helps in debugging.")
("maeWriteDatasheet"
"maeWriteDatasheet(
[ ?directory t_directory ]
[ ?resultsSummary g_resultsSummary ]
[ ?testsSummary g_testsSummary ]
[ ?detailedResults g_detailedResults ]
[ ?plots g_points ]
[ ?designVarsSummary g_designVarsSummary ]
[ ?paramsSummary g_paramsSummary ]
[ ?cornersSummary g_cornersSummary ]
[ ?setupSummary g_setupSummary ]
[ ?launchBrowser g_launchBrowser ]
[ ?name t_name ] 
[ ?session t_sessionName ] 
[ ?historyName t_historyName ] 
)
=> t / nil"
"Writes the results for the given history in a datasheet.")
("maeCloseViolationDb"
"maeCloseViolationDb(
x_dbId
)
=> t / nil"
"Closes an open checks and asserts database using the database ID returned by maeOpenViolationDb.")
("maeOpenViolationDb"
"maeOpenViolationDb(
t_sessionName
t_testName
t_historyName
)
=> x_dbId / nil"
"Opens a connection to the checks and asserts database for the given maestro cellview and returns a unique ID for the connection. You can use this ID to read or modify the database and its attached waiver SQL database using other SKILL functions. You must close this connection using maeCloseViolationDb to release the connection and complete the transactions on the database.")
("maeRefreshViolationDisplay"
"maeRefreshViolationDisplay(
t_sessionName
)
=> t / nil"
"Refreshes the Checks/Asserts results view. When it is already open and the database is modified, use this function to refresh the displayed results.")
("maeWaiveViolation"
"maeWaiveViolation(
x_dbId
[?objectName t_objectName]
[?objectType t_objectType]
[?checkerName t_checkerName]
[?analysisName t_analysisName]
[?time t_time]
[?comment t_comment]
[?historyName t_historyName]
[?designPoint x_designPoint]
[?corner t_cornerName]

)
=> t / nil"
"Adds a rule to the waivers SQL database that waives a check and assert for the given object.")
("maeUnWaiveViolation"
"maeUnWaiveViolation(
x_dbId
[?objectName t_objectName]
[?objectType t_objectType]
[?checkerName t_checkerName]
[?analysisName t_analysisName]
[?time t_time]
)
=> t / nil"
"Removes from the waivers SQL database a waive rule matching the given criteria.")
("maeAddPostRunScript"
"maeAddPostRunScript(
t_runName
t_postRunScriptFileName
[ ?session t_sessionName ]
)
=> t / nil"
"Adds the given post-run script to the specified run in the run plan.")
("maeAddPreRunScript"
"maeAddPreRunScript(
t_runName
t_preRunScriptFileName
[ ?session t_sessionName ]
)
=> t / nil"
"Adds the pre-run script to the specified run in the run plan.")
("maeCopySimulationOptions"
"maeCopySimulationOptions(
t_srcRun
[ ?destRun t_destRun ] | [ ?all g_all ]
[ ?session t_session ]
)
=> t / nil"
"Copies the simulation options from the source run to the destination run. Different run modes have different simulation options, therefore, It is mandatory that the source and destination runs have the same run mode. Otherwise, the function reports an error.")
("maeCreateNewRun"
"maeCreateNewRun(
[ ?session t_session ]
[ ?runName t_runName ]
[ ?newRunFromActiveSetup g_newRunFromActiveSetup ]
)
=> t / nil"
"Creates a new run in the run plan.")
("maeCreateRunCondition"
"maeCreateRunCondition(
t_sourceRunName
[ ?name t_name ]
[ ?run t_run ]
[ ?test t_test ]
[ ?output t_output ]
[ ?status t_status ]
[ ?session t_session ]
)
=> t / nil"
"Adds a run condition to the specified run in the run plan.")
("maeCreateRunCopy"
"maeCreateRunCopy(
?run t_run 
[ ?session t_session ]
[ ?copyName g_copyName ]
)
=> t / nil"
"Creates a copy of the specified run in the run plan.")
("maeCopyTestToRun"
"maeCopyTestToRun(
t_testName
[ ?session t_session ]
[ ?run t_run ] | [ ?all g_all ]
)
=> t / nil"
"Copies one or more tests from the active setup to a run in the run plan.")
("maeDeleteRun"
"maeDeleteRun(
[ ?run l_run ] | [ ?all g_all ]
[ ?session t_session ]
)
=> t / nil"
"Deletes the specified runs from the run plan.")
("maeDeleteRunCondition"
"maeDeleteRunCondition(
t_runName
[ ?name t_name ] | [ ?all g_all ]
)
=> t / nil"
"Deletes a run condition from a run in the run plan.")
("maeEditSimulationOptions"
"maeEditSimulationOptions(
t_run
l_options
)
=> t / nil"
"Edits the simulation options for the specified run.")
("maeEnableRun"
"maeEnableRun(
[ ?run t_run ]
[ ?enable g_enable ]
[ ?session t_session ]
[ ?all g_all ]
)
=> t / nil"
"Enable or disables the runs in a run plan.")
("maeGetEnabledRuns"
"maeGetEnabledRuns(
[ ?session t_sessionName ] 
)
=> l_enabledRuns / nil"
"Returns a list of run IDs for the enabled runs in the run plan.")
("maeGetNumberOfExecutedRuns"
"maeGetNumberOfExecutedRuns(
[ ?session t_sessionName ] 
[ ?runPlanName t_runPlanName ] 
)
=>x_runsCompleted"
"Returns the number of runs executed in the flow. It only counts a run that has been completed, partial runs are not included. This is exclusive for the fault dropping flow.")
("maeGetHistoryLockFlag"
"maeGetHistoryLockFlag(
[ ?historyName t_historyName ]
[ ?session t_sessionName ]
)
=> n_flag / nil"
"Returns the lock status for the specified history.")
("maeGetRunPlan"
"maeGetRunPlan(
[ ?session t_sessionName ]
[ ?historyName t_historyName ]
[ ?enabled t_enabled ]
)
=> l_runPlanNames / nil"
"Returns a list of all the runs available in the run plan for the given session or history.")
("maeGetCurrentRunPlanName"
"maeGetCurrentRunPlanName(
)
=> t_runPlanName"
"Returns the name of the history of the current run plan being run.")
("maeGetHistoryNameForCurrentRunInRunPlan"
"maeGetHistoryNameForCurrentRunInRunPlan(
)
=> t_historyName / nil"
"Returns the history name for the current run in the run plan.")
("maeIsFirstRunInRunPlan"
"maeIsFirstRunInRunPlan(
[ ?session t_sessionName ] 
[ ?historyName t_historyName ] 
)
=> t / nil"
"Checks if the current run is the first run executed in the run plan. Implemented exclusively for the fault dropping flow.")
("maeIsFinalRunCompleted"
"maeIsFinalRunCompleted(
[ ?session t_sessionName ] 
)
=> t / nil"
"Checks if the current run is the last run executed in the run plan. A run is said to be the last run if either no further runs exist in the run plan or no undetected faults are found in the current run.")
("maeGetAllPlottingTemplates"
"maeGetAllPlottingTemplates(
[ ?session t_sessionName ] 
)
=> l_templates / nil"
"Returns a list of all plotting templates saved in the given session.")
("maePlotWithPlottingTemplate"
"maePlotWithPlottingTemplate(
[ ?session t_sessionName ] 
[ ?history t_historyName ] 
[ ?replaceMode t_replaceMode ] 
[ ?name t_templateName ] 

)
=> l_windowsPlotted / nil"
"Plots the results for the given history using the specified plotting template.")
("maeSaveImagesUsingPlottingTemplate"
"maeSaveImagesUsingPlottingTemplate(
[ ?session t_sessionName ] 
[ ?history t_historyName ] 
[ ?replaceMode t_replaceMode ] 
[ ?name t_templateName ] 
[ ?dir t_dirPath ] 
[ ?saveEachSubwindowSeparately t_saveEachSubwindowSeparately ] 
)
=> t / nil"
"Plots and saves the results for the given history using the specified plotting template.")
("maeSensDeleteModel"
"maeSensDeleteModel(
t_modelName
[ ?session t_sessionName ] 
)
=> t / nil"
"Deletes the specified model from the setup for sensitivity analysis in the current or the specified maestro session.")
("maeSensDeleteModelGroup"
"maeSensDeleteModelGroup(
[ ?session t_sessionName ] 
)
=> t / nil"
"Deletes all the model groups specified in the Model Groups setting on the Sensitivity form for Sensitivity analysis in the current or the specified maestro session.")
("maeSensDeleteParameter"
"maeSensDeleteParameter(
t_parameterName
[ ?session t_sessionName ] 
)
=> t / nil"
"Deletes the specified parameter from the setup for Sensitivity analysis in the current or the specified maestro session.")
("maeSensDeleteVar"
"maeSensDeleteVar(
t_varName
[ ?session t_sessionName ] 
)
=> t / nil"
"Deletes the specified variable from the setup for Sensitivity analysis in the current or the specified maestro session. You can also use this function to delete the value for the Temperature field in the Sensitivity form.")
("maeSensEnableDesignVariation"
"maeSensEnableDesignVariation(
g_status
[ ?session t_sessionName ] 
)
=> t / nil"
"Selects or deselects the Enable Design and PVT Variation check box on the Sensitivity form for sensitivity analysis in the current or the specified maestro session.")
("maeSensEnableStatVariation"
"maeSensEnableStatVariation(
g_status
[ ?session t_sessionName ] 
)
=> t / nil"
"Selects or deselects the Enable Variation of Statistical Parameters check box in the Sensitivity form for Sensitivity analysis in the current or the specified maestro session.")
("maeSensGetModel"
"maeSensGetModel(
t_modelName
[ ?session t_sessionName ] 
)
=> l_modelDetails / nil"
"Returns a list of valid values and the nominal value for the specified model from the Sensitivity form for Sensitivity analysis in the current or the specified maestro session.")
("maeSensGetModelGroup"
"maeSensGetModelGroup(
[ ?session t_sessionName ] 
)
=> l_modelGroupDetails / nil"
"Returns a list of values specified in the Model Groups setting on the Sensitivity form for Sensitivity analysis in the current or the specified maestro session.")
("maeSensGetModels"
"maeSensGetModels(
[ ?session t_sessionName ] 
)
=> l_modelNames / nil"
"Returns a list containing the names of all enabled models on the Sensitivity form for sensitivity analysis in the current or the specified maestro session.")
("maeSensGetParameter"
"maeSensGetParameter(
t_parameterName
[ ?session t_sessionName ] 
)
=> l_paramDetails / nil"
"Returns a list of valid values and the nominal value for the specified parameter from the Sensitivity form for Sensitivity analysis in the current or the specified maestro session.")
("maeSensGetParameters"
"maeSensGetParameters(
[ ?session t_sessionName ] 
)
=> l_parameterNames / nil"
"Returns a list of all enabled parameters on the Sensitivity form for Sensitivity analysis in the current or the specified maestro session.")
("maeSensGetVar"
"maeSensGetVar(
t_varName
[ ?session t_sessionName ] 
)
=> l_varDetails / nil"
"Returns a list of valid values and the nominal value for the specified global variable from the Sensitivity form for sensitivity analysis in the current or the specified maestro session.")
("maeSensGetVars"
"maeSensGetVars(
[ ?session t_sessionName ] 
)
=> l_varNames / nil"
"Returns a list containing the names of all enabled global variables, including Temperature, on the Sensitivity form for the Sensitivity Analysis run mode in the current or the specified maestro session.")
("maeSensSetMethod"
"maeSensSetMethod(
t_methodName
[ ?session t_sessionName ] 
)
=> t / nil"
"Sets the value in the Method field on the Sensitivity form for Sensitivity analysis in the current or the specified maestro session.")
("maeSensSetModel"
"maeSensSetModel(
t_modelName
g_modelValue
[ ?nominalValue g_nominalValue ] 
[ ?session t_sessionName ] 
[ ?modelTest t_modelTest ] 
[ ?modelblock t_modelBlock ] 
)
=> t / nil"
"Adds a model on the Sensitivity form for Sensitivity Analysis in the current or the specified maestro session.")
("maeSensSetModelGroup"
"maeSensSetModelGroup(
g_modelGroupValue
[ ?nominalValue g_nominalValue ] 
[ ?session t_sessionName ] 
)
=> t / nil"
"Adds a model group on the Sensitivity form for sensitivity analysis in the current or the specified maestro session.")
("maeSensSetParameter"
"maeSensSetParameter(
t_parameterName
g_parameterValue
[ ?nominalValue g_nominalValue ] 
[ ?session t_sessionName ] 
)
=> t / nil"
"Adds a parameter on the Sensitivity form for Sensitivity analysis in the current or the specified maestro session. If a parameter already exists with the given name, its value is updated.")
("maeSensSetVar"
"maeSensSetVar(
t_varName
g_varValue
[ ?nominalValue g_nominalValue ] 
[ ?session t_sessionName ] 
)
=> t / nil"
"Adds a global variable to the run options for the Sensitivity analysis run mode in the current or the specified maestro session. If a global variable already exists with the specified name, its value is updated. You can also use this function to change the value of Temperature.")
("sevOpenXmlFile"
"sevOpenXmlFile(
t_stateFile
)
=> x_stateHandle / nil"
"Opens the specified XML state file. If the file does not exist, this function creates a new file.")
("sevConvertStateFormat"
"sevConvertStateFormat(
[ ?libs l_libs ]
[ ?stateDir t_stateDir ]
[ ?viewType t_viewType ]
[ ?format t_format ]
[ ?backup g_backup ]
[ ?recover g_recover ]
[ ?autoCheckin g_autoCheckin ]
[ ?popUpWarnWin g_popUpWarnWin ]
=> t / nil"
"Translates all ADE XL states from normal to XML format in the current directory. This function can also be used to do translate a specific parameter set. You can use this function in the OCEAN script and perform the translation in a batch.")
("sevCloseXmlFile"
"sevCloseXmlFile(
t_stateFile
)"
"Closes the specified XML state handle.")
("sevWriteTable"
"sevWriteTable(
x_stateHandle
S_componentName
o_table
[ ?partition l_partitions ]
)
=> t / nil"
"Writes the component table in the specified XML state file.")
("sevReadTable"
"sevReadTable(
x_stateHandle
S_componentName
o_table
)
=> t / nil"
"Returns the component table from the specified XML state file.")
("sevWriteValue"
"sevWriteValue(
x_stateHandle 
t_componentName
t_attributeName
t_compValue
)
=> t / nil"
"Writes a XML component value in the specified XML state file.")
("sevReadValue"
"sevReadValue(
x_stateHandle 
t_componentName
t_attributeName
)
=> t_componentValue / nil"
"Reads the value of an XML component from the specified XML state file.")
("maeGetMTSMode"
"maeGetMTSMode(
t_testName
[ ?session t_sessionName ]
)
=> t / nil"
"Indicates whether the locally scoped models and options (MTS options) are enabled for the specified test.")
("maeSetMTSMode"
"maeSetMTSMode(
t_testName
[ ?session t_sessionName ]
[ @rest g_mtsMode ]
)
=> t / nil"
"Enables the locally scoped models and options (MTS options) for the specified test.")
("maeGetMTSBlock"
"maeGetMTSBlock(
t_testName
[ ?lib t_lib ]
[ ?cell t_cell ]
[ ?inst t_instName ]
[ ?type t_type ]
[ ?session t_sessionName ]
)
=> l_mtsBlockInformation / nil"
"Returns the requested MTS-related information about the specified library cell (block) or instance.")
("maeSetMTSBlock"
"maeSetMTSBlock(
t_testName
[ ?lib t_lib ]
[ ?cell t_cell ]
[ ?inst t_instName ]
[ ?enable g_enable ]
[ ?modelFiles l_modelFiles ]
[ ?simOptions l_simOptions ]
[ ?session t_sessionName ]
[ ?mode t_mode ]
)
=> t / nil"
"Enables local scoping for the specified library cell (block) or instance and sets the specified MTS options. This includes the models files to be scoped locally and the process parameters, such as scale and temp to be included in the simulation locally.")
("getFaultTranData"
"getFaultTranData(
t_netName | t_terminalName
n_faultTime 
)
=> x_voltage / o_currentWaveform / nil"
"Returns the waveform data for a fault analysis run at the given time.")
("maeAddFaultRule"
"maeAddFaultRule(
[ ?session t_sessionName ] 
[ ?faultType t_faultType ] 
[ ?resistance t_resistance ] 
[ ?weightExpr t_weightExpr ] 
[ ?weightFactor t_weightFactor ] 
[ ?inst t_instance ] 
[ ?excludeInst t_excludeInst ] 
[ ?excludeSubckt t_excludeSubckt ] 
[ ?faultDevices t_faultDevices ] 
[ ?pinNames t_pinNames ] 
[ ?extraOptions t_extraOptions ]
[ ?useNetlistSyntax g_useNetlistSyntax ]
[ ?enableIEEE2427Mode g_enableIEEE2427Mode ]
[ ?enableFaultCollapse g_enableFaultCollapse ]
)
=> t / nil"
"Creates a new fault rule with the given set of properties.")
("maeAddFaultsToFaultGroup"
"maeAddFaultsToFaultGroup(
[ ?session t_sessionName ]
[ ?faultsName l_faultsName ]
[ ?faultGroupsName l_faultGroupsName ]
)
=> t / nil"
"Adds the given faults to one or more fault groups.")
("maeAddUndetectedFaultsFromHistoryToGroup"
"maeAddUndetectedFaultsFromHistoryToGroup(
[ ?session t_sessionName ]
[ ?faultGroupName t_faultGroupName ]
[ ?historyName t_historyName ]
)
=> t / nil"
"Adds the undetected faults from a history to the specified group in the active setup.")
("maeChangeTypeFromExprToFaultExpr"
"maeChangeTypeFromExprToFaultExpr(
t_sessionName
?historyName t_historyName 
?corner t_corner 
)
=> t / nil"
"Provides an automated way to create fault expressions from the expressions that passed in a Single Run, Sweeps and Corners history.")
("maeClearExistingFaultsForRevalidation"
"maeClearExistingFaultsForRevalidation(
[ ?session t_sessionName ]
)
=> t / nil"
"Clears the cache for all fault rules that exist in the active fault setup.")
("maeCopyFaultGroups"
"maeCopyFaultGroups(
[ ?groupNamesList l_groupNames ]
)
=> t / nil"
"Creates a copy of the specified fault groups and saves those with the default names source-group-name_copy_incremental-num.")
("maeCreateOrRenameFaultGroup"
"maeCreateOrRenameFaultGroup(
t_newGroupName
[ ?oldGroupName t_oldGroupName ]
[ ?session t_sessionName ]
)
=> t / nil"
"Creates or renames a group with the specified name in the active fault setup.")
("maeDeleteFaultGroup"
"maeDeleteFaultGroup(
t_groupName
[ ?session t_sessionName ]
)
=> t / nil"
"Deletes the specified fault group from the active fault setup.")
("maeDeleteFaultRule"
"maeDeleteFaultRule(
t_faultRuleName
[ ?session t_sessionName ]
)
=> t / nil"
"Deletes the specified fault rule from the active fault setup.")
("maeEditFaultRule"
"maeEditFaultRule(
t_faultRuleName
[ ?session t_sessionName ] 
[ ?resistance t_resistance ] 
[ ?weightExpr t_weightExpr ] 
[ ?weightFactor t_weightFactor ] 
[ ?inst t_instance ] 
[ ?excludeInst t_excludeInst ] 
[ ?excludeSubckt t_excludeSubckt ] 
[ ?faultDevices t_faultDevices ] 
[ ?pinNames t_pinNames ] 
[ ?extraOptions t_extraOptions ]
[ ?useNetlistSyntax g_useNetlistSyntax ]
[ ?enableIEEE2427Mode g_enableIEEE2427Mode ]
[ ?enableFaultCollapse g_enableFaultCollapse ]
)
=> t / nil"
"Edits the given fault rule by changing the specified properties. The function updates only the given properties. The values of other properties remain unchanged.")
("maeEnableFaults"
"maeEnableFaults(
[ ?session t_sessionName ]
[ ?groupNamesList l_groupNamesList ]
[ ?ruleNamesList l_ruleNamesList ]
[ ?enable g_enable ]
[ ?enableAll g_enableAll ]
[ ?disableAll g_disableAll ]
)
=> list(libName cellName viewName) / nil"
"Enables or disables the given fault rules and groups.")
("maeGetDUTForFaults"
"maeGetDUTForFaults(
[ ?session t_sessionName ]
)
=> l_LCVDetails / nil"
"Returns a list containing the library, cell, and view name of the design under test in the active fault setup.")
("maeGetFaultGroups"
"maeGetFaultGroups(
[ ?session t_sessionName ]
)
=> l_faultGroupNames/ nil"
"Returns a list of fault groups that exist in the active fault setup.")
("maeGetFaultGroupToRun"
"maeGetFaultGroupToRun(
[ ?session t_sessionName ] 
)
=> t_faultGroupToRun / nil"
"Returns the name of the fault group selected for the fault simulation run. This value is specified by the faultGroupToRun parameter.")
("maeGetFaultRule"
"maeGetFaultRule(
[ faultRuleName t_faultRuleName]
[ ?session t_sessionName ] 
)
=> l_faultRule / nil"
"Returns the properties set for the fault rule with the given name.")
("maeGetFaultRules"
"maeGetFaultRules(
[ ?session t_sessionName ] 
)
=>l_faultRuleNames / nil"
"Returns a list of the names of fault rules in the fault setup.")
("maeGetFaultRunModeOptions "
"maeGetFaultRunModeOptions(
[ ?session t_sessionName ] 
[ ?faultAnalysisType t_faultAnalysisType ] 
)
=> l_runModeOptions / nil"
"Retrieves the run options for the fault simulation.")
("maeGetFaults"
"maeGetFaults(
[ ?session t_sessionName ] 
[ ?activeGroupToRun g_activeGroupToRun ] 
[ ?faultRuleName t_faultRuleName ] 
[ ?groupName t_groupname ]
)
=> t_faultsFileName / nil"
"Runs Spectre info analysis to generate the faults for the specified fault group or fault rule. The generated faults are saved in a file. To view the generated faults, you can either open the file or use the Preview Faults commands in the Fault Setup assistant.")
("maeGetFaultSamplingOptions"
"maeGetFaultSamplingOptions(
[ ?session t_sessionName ] 
)
=> l_samplingOptions / nil"
"Returns the sampling options set for fault simulation.")
("maeGetGlobalFaultOptions"
"maeGetGlobalFaultOptions(
[ ?session t_sessionName ] 
)=> l_globalOptions / nil"
"Returns the global fault options set in the Virtuoso ADE Fault Setup Global Preferences form. These options are applicable to all faults unless overridden in individual faults or fault rules.")
("maeRunFaultSimulationWithFaultDroppingForActiveTests"
"maeRunFaultSimulationWithFaultDroppingForActiveTests(
[ ?session t_sessionName ] 
)
=> t_historyName / nil"
"Runs the fault dropping flow in batch mode for the enabled tests in the given session.")
("maeSetDUTForFaults"
"maeSetDUTForFaults(
t_libName 
t_cellName 
t_viewName 
[ ?session t_sessionName ] 
)
=> t / nil"
"Sets the specified design under test for the fault setup.")
("maeSetFaultAnalysisType "
"maeSetFaultAnalysisType(
[ ?analysisType t_analysisType ]
[ ?session t_sessionName ]
)
=> t / nil"
"Sets the analysis type for the fault simulation run mode.")
("maeSetFaultDFARunModeOptions "
"maeSetFaultDFARunModeOptions(
[ ?session t_sessionName ] 
[ ?extraOptions t_extraOptions ] 
[ ?runNominal g_runNominal ] 
)
=> t / nil"
"Sets the run mode options for the Direct Fault Analysis (DFA) to be run for fault simulation.")
("maeSetFaultSamplingOptions"
"maeSetFaultSamplingOptions(
[ ?session t_sessionName ] 
[ ?enableSampling g_enableSampling ] 
[ ?samplingMethod t_samplingMethod ] 
[ ?sampleByNumOrRatio t_sampleByNumOrRatio ] 
[ ?sampleNum t_sampleNum ] 
[ ?sampleRatio t_sampleRatio ] 
[ ?seedValue t_seedValue ] 
[ ?confidenceValue t_confidenceValue ] 
)
=> t / nil"
"Sets the sampling options for the fault setup.")
("maeSetFaultTFARunModeOptions "
"maeSetFaultTFARunModeOptions (
[ ?session t_sessionName ] 
[ ?extraOptions t_extraOptions ] 
[ ?simulationMethod t_simulationMethod ] 
[ ?maxIterations t_maxIterations ] 
[ ?leadTime t_leadTime ] 
[ ?faultPointsMethod t_faultPointsMethod ] 
[ ?faultTimePoints g_faultTimePoints ] 
[ ?start_step_stop l_start_step_stop ] 
)
=> t / nil"
"Sets the run mode options for Transient Fault Analysis to be run for fault simulation.")
("maeSetGlobalFaultOptions"
"maeSetGlobalFaultOptions (
[ ?session t_sessionName ] 
[ ?defaultBridgeResistance t_defaultBridgeResistance ] 
[ ?defaultOpenResistance t_defaultOpenResistance] 
[ ?defaultStuckAtResistance t_defaultStuckAtResistance ] 
[ ?stuckAtGround t_stuckAtGround ] 
[ ?stuckAtSupply t_stuckAtSupply ] 
[ ?defaultWeightExpr t_defaultWeightExpr ] 
[ ?defaultWeightFactor t_defaultWeightFactor ] 
[ ?defaultIndividualFaultWeight t_defaultIndividualFaultWeight ] 
[ ?applyFaultCollapsing t_applyFaultCollapsing ] 
)
=> t / nil"
"Sets global preferences for fault simulations.")
("maeGenerateFuSaReport"
"maeGenerateFuSaReport(
[ ?session t_sessionName ] 
[ ?historyName t_historyName ] 
[ ?outFile t_outFile ] 
[ ?checkerExprList l_checkerExprList ] 
[ ?mode t_mode ] 
[ ?modeID x_modeID ] 
[ ?confidenceLevel n_confidenceLevel ]
[ ?viewFusaReport g_viewFusaReportValue ]
)
=> t / nil"
"Generates a functional safety report for a fault simulation run.")
("maeGetNumberOfUndetectedFaultsFromHistory"
"maeGetNumberOfUndetectedFaultsFromHistory(
[ ?session t_sessionName ] 
[ ?historyName t_historyName ] 
)
=> l_UDFaults / nil"
"Returns the list of undetected faults for the history provided.")
("maeMergeFaultHistories"
"maeMergeFaultHistories(
[ ?session t_sessionName ] 
[ ?historiesToMerge l_historiesToMerge ] 
[ ?finalHistoryName t_finalHistoryName ] 
[ ?logFile t_logFile ] 
)
=> t/ nil"
"Merges fault histories into one.")
("maePrintFaultDroppingStatistics"
"maePrintFaultDroppingStatistics(
[ ?session t_sessionName ] 
[ ?historiesName l_historiesName ] 
[ ?logFile t_logFile ] 
)
=> t"
"Prints the formatted results obtained after execution of the fault dropping flow. It also writes the same to the log file in the current work directory. This is exclusive for the fault dropping flow.")
("maeSaveFaultsRunCount"
"maeSaveFaultsRunCount(
[ ?session t_sessionName ]
[ ?faultsCount x_faultsCount ]
)
=> x_faultsCount"
"Saves the faults count globally for further use. If a fault count already exists, it adds the provided value to the existing value. This is exclusive for the fault dropping flow.")
("maeSwitchActiveFaultGroupForCurrentRun"
"maeSwitchActiveFaultGroupForCurrentRun(
t_historyName 
)
=> t / nil"
"Sets the fault group to run for the current run in run plan. This is exclusive to the fault dropping flow.")
("maeSetFaultGroupToRun"
"maeSetFaultGroupToRun(
[ ?session t_sessionName ] 
[ ?faultGroupToRun t_faultGroupToRun ] 
)
=> t / nil"
"Sets the fault group to run for the active fault setup.")
("axlCloseSession"
"axlCloseSession( 
t_session 
) 
=> t / nil"
"Closes the specified session.")
("axlCloseSessionInWindow"
"axlCloseSessionInWindow( 
[ w_window ]
) 
=> t / nil"
"Closes the given session in the current window, if there is one opened.")
("axlCreateSession"
"axlCreateSession( 
t_sessionName 
) 
=> t_sessionName / nil"
"Creates a new session with the specified name. You can use this function to create a new session before running a SKILL code for a maestro cellview in the non-GUI mode.")
("axlGetMainSetupDB"
"axlGetMainSetupDB( 
t_session 
) 
=> x_mainSDB / nil"
"Returns a handle to the working setup database of the named session.")
("axlGetSessionCellName"
"axlGetSessionCellName( 
g_value 
) 
=> t_cellName / nil"
"Returns the cell name associated with the session or setup database.")
("axlGetSessionLibName"
"axlGetSessionLibName( 
g_value 
) 
=> t_libName / nil"
"Returns the library name associated with the given session or setup database.")
("axlGetSessionViewName"
"axlGetSessionViewName( 
g_value 
) 
=> t_viewName / nil"
"Returns the view name associated with the given session or setup database.")
("axlGetSessionWindowNumber"
"axlGetSessionWindowNumber( 
t_sessionName 
) 
=> x_number / nil"
"Returns a unique integer representing a number corresponding to a given session name.")
("axlGetToolSession"
"axlGetToolSession(
t_sessionName
t_testName
[ ?history x_history ]
) 
=> g_sessionID / nil"
"ADE Explorer or ADE Assembler internally maintains a unique in-memory identifier for each active test. This function returns that unique identifier for the specified test.")
("axlGetWindowSession"
"axlGetWindowSession( 
[ w_window ] 
) 
=> t_sessionName / nil"
"Returns the ADE session associated with a window.")
("axlGetCurrentResultSimulationHost"
"axlGetCurrentResultSimulationHost( 
t_sessionName 
) 
=> t_hostName"
"This is a callback function that runs from a Results table context menu.")
("axlIsSessionReadOnly"
"axlIsSessionReadOnly( 
t_axlSession 
) 
=> t / nil"
"This functions determines whether the specified session is opened in read-only or edit mode.")
("axlIsValidAXLSession"
"axlIsValidAXLSession(
t_session
) 
=> t / nil"
"Checks the validity of the specified session.")
("axlMainAppSaveSetup"
"axlMainAppSaveSetup( 
[ t_sessionName ]
) 
=> t / nil"
"Saves the ADE state and setup database information associated with the given session to relevant persistent files on disk. This function is useful only in the non-GUI mode.")
("axlNoSession"
"axlNoSession( 
[ w_window ]
) 
=> t / nil"
"Returns t if there is no session in the current window.")
("axlRemoveSetupState"
"axlRemoveSetupState( 
t_sessionName
t_stateName
) 
=> t / nil"
"Removes the specified setup state for the given session.")
("axlSaveSetupState"
"axlSaveSetupState(
t_session
t_stateName
l_tags
[ ?inReadOnly readOnlyAction ]
) 
=> t / nil"
"Saves a setup state for the specified session.")
("axlSessionConnect"
"axlSessionConnect( 
t_sessionName
t_signalName
s_callbackFunc
) 
=> t / nil"
"Registers a SKILL callback to be connected to a known signal or trigger emitted from an ADE session.")
("axlSessionDisconnect"
"axlSessionDisconnect( 
t_sessionName
s_callbackFunction
) 
=> t / nil"
"Disconnects the specified SKILL callback connected to one or more known signals emitted by the ADE Explorer and ADE Assembler session.")
("axlSessionRegisterCreationCallback"
"axlSessionRegisterCreationCallback( 
s_callbackFunction
) 
=> t / nil"
"Registers a SKILL function as callback for an event. The callback is called whenever that event occurs.")
("axlSessionSignalList"
"axlSessionSignalList( 
t_session 
) 
=> l_signals / nil"
"Returns a list of all the signals or triggers that are emitted from the given session. You can create custom callback functions to be executed when these events are triggered.")
("axlSessionSignalSignature"
"axlSessionSignalSignature( 
t_session 
t_signal 
) 
=> t_signature / nil"
"Returns the signature of a given signal that is emitted by a session. This function serves as a utility function to determine how to implement the slot or callback function in SKILL.")
("axlSetMainSetupDB"
"axlSetMainSetupDB( 
t_session 
t_setupdbPath 
) 
=> x_hsdb / nil"
"Sets the working setup database for a session to the setup database specified by the given setupDBPath. This function is useful when you create a new session in a SKILL script and then you want to setup a database for that.")
("axlSetMainSetupDBLCV"
"axlSetMainSetupDBLCV( 
t_session 
t_libName
t_cellName
t_viewName
[ ?mode t_mode ]
) 
=> x_mainSDB / nil"
"Sets the working setup database for a given session to the setup database specified by the given library, cell, or view.")
("axlSetupStates"
"axlSetupStates( 
t_session 
) 
=> l_states"
"Retrieves a list of setup states from the given session.")
("axlSuppressPersistedQuestionDialog"
"axlSuppressPersistedQuestionDialog( 
x_msgID 
) 
=> t / nil"
"Suppresses the question dialog for a specified msgId in a Virtuoso session.")
("axlShowPersistedQuestionDialog"
"axlShowPersistedQuestionDialog( 
x_msgID 
) 
=> t / nil"
"Shows the suppressed question dialog for a specified msgId in a Virtuoso session.")
("axlToolSetOpPointInfo"
"axlToolSetOpPointInfo( 
g_sessionID 
t_testName
[ ?instanceName t_instanceName ]
[ ?parameters t_parameters ]
) 
=> o_sevOpPoint / nil"
"Adds the signal specified for the oppoint type item to the Output Setup table in a test setup and returns the signal object.")
("axlCloseSetupDB"
"axlCloseSetupDB( 
x_sdb 
) 
=> t / nil"
"Closes an open setup database.")
("axlCommitSetupDB"
"axlCommitSetupDB( 
x_hsdb 
) 
=> x_database"
"Saves the setup database file, for instance, the maestro.sdb or data.sdb file.")
("axlCommitSetupDBAndHistoryAs"
"axlCommitSetupDBAndHistoryAs( 
x_hsdb 
t_setupdbName 
) 
=> x_hsdb"
"Saves the setup database along with history entries under a new name.")
("axlCommitSetupDBas"
"axlCommitSetupDBas( 
x_hsdb 
t_setupdbName 
) 
=> t / nil"
"Saves the setup database under a new name.")
("axlDiffSetup"
"axlDiffSetup( 
x_handlea 
x_handleb 
) 
=> l_diffs"
"Compares two setup databases and reports the differences.")
("axlDeleteNote"
"axlDeleteNote( 
x_mainSDB 
t_item 
t_name
) 
=> t / nil"
"Deletes a note from the given test, history, corner, parameters, variable or Reliability Analysis setup.")
("axlGetCopyRefResultsOption"
"axlGetCopyRefResultsOption(
x_hsdb 
) 
=> t / nil"
"Specifies whether the simulation results are required to be copied or moved from the reference history based on the settings in the setup database.")
("axlGetElementParent"
"axlGetElementParent( 
x_element 
) 
=> x_parent / nil"
"Returns the handle to the parent of the specified setup database element.")
("axlGetEnabled"
"axlGetEnabled( 
x_element 
) 
=> t / nil"
"Checks whether a setup database element is enabled or not.")
("axlGetLocalResultsDir"
"axlGetLocalResultsDir( 
x_historyHandle 
) 
=> t_dirPath / nil"
"Returns the local results directory associated with a run on a remote machine.")
("axlIsLocalResultsDir"
"axlIsLocalResultsDir( 
x_historyHandle 
) 
=> t / nil"
"Returns the status of Use Local Simulation Results Directory flag for the specified history item.")
("axlExportSetup"
"axlExportSetup( 
t_session 
x_hsdb
t_path
l_tags
) 
=> t / nil"
"Exports the setup from the currently loaded setup database to a different file. The list of tags passed are the top-level elements like variables, tests, etc to export.")
("axlGetHistoryGroupChildren"
"axlGetHistoryGroupChildren( 
x_element 
) 
=> l_children"
"Returns a list containing a handle to all history children entries in the history group and a list of names of all the history children entries.")
("axlGetActiveSetup"
"axlGetActiveSetup( 
x_mainSDB 
) 
=> x_activeSetup"
"Returns a handle to the active setup. You can use this handle to get or set setup details for the active setup.")
("axlGetHistoryGroupChildrenEntry"
"axlGetHistoryGroupChildrenEntry( 
x_childrenHandle 
t_name
) 
=> x_history / 0"
"Finds a history entry in a group run by name and returns the handle to it.")
("axlGetNote"
"axlGetNote( 
x_hsdb
t_item
t_name
) 
=> t_note / nil"
"Returns notes from the specified test, history, corner, parameters, variable or Reliability Analysis setup.")
("axlGetPointNetlistDir"
"axlGetPointNetlistDir(
x_historyID
t_testName 
[ ?cornerName t_cornerName ]
[ ?designPointId x_designPointId ] 
)
=> t_pointNetlistDir / nil"
"Returns the netlist directory for a particular corner and design point combination in the given test run of the specified history.")
("axlGetPointPsfDir"
"axlGetPointPsfDir(
x_historyID
t_testName 
[ ?cornerName t_cornerName ]
[ ?designPointId x_designPointId ]
)
=> t_pointPsfDir / nil"
"Returns the psf directory for a particular corner and design point combination in the given test run of the given history.")
("axlGetPointRunDir"
"axlGetPointRunDir(
x_historyID
t_testName 
[ ?cornerName t_cornerName ]
[ ?designPointId x_designPointId ] 
)
=> t_pointRunDir / nil"
"Returns the run directory for a particular corner and design point combination in the given test run of the specified history.")
("axlGetPointTroubleshootDir"
"axlGetPointTroubleshootDir(
x_historyID
t_testName 
[ ?cornerName t_cornerName ]
[ ?designPointId x_designPointId ] 
)
=> t_trblDir / nil"
"Returns the troubleshoot directory for a particular corner and design point combination in a specified test run of the given history.")
("axlGetResultsLocation"
"axlGetResultsLocation( 
x_hsdb 
) 
=> t_resultsLocation / nil"
"Returns the results location for the specified setup database.")
("axlGetReuseNetlist"
"axlGetReuseNetlistOption( 
x_hsdb 
) 
=> t / nil"
"Checks if the option to use reference netlist is enabled for the setup database. This option helps in reusing the netlist of the reference history for the incremental simulation run.")
("axlGetScript"
"axlGetScript( 
x_element 
t_scriptName 
) 
=> x_script / nil"
"Finds a script by name and returns a handle to it.")
("axlGetScriptPath"
"axlGetScriptPath( 
x_script 
) 
=> t_path / nil"
"Returns the path of a script.")
("axlGetScripts"
"axlGetScripts( 
x_element 
) 
=> l_scripts / nil"
"Returns a list containing the handle to all scripts for this database entry and a list of all script names.")
("axlGetSessionFromSetupDB"
"axlGetSessionFromSetupDB( 
x_hsdb 
) 
=> t_sessionName / nil"
"Determines the session associated with the provided setup database handle.")
("axlGetSetupDBDir"
"axlGetSetupDBDir( 
x_hsdb 
) 
=> t_dir / nil"
"Returns the path to the directory of the specified setup database.")
("axlGetSetupInfo"
"axlGetSetupInfo( 
t_sessionName
[ ?testName t_testName ]
) 
=> r_setupInfo / nil"
"Returns the setup information for the complete setup or a specific test. This includes the number of corners, sweep points, and data points in the setup.")
("axlGetTopLevel"
"axlGetTopLevel( 
x_element 
) 
=> x_hsdb / g_errorOrZero"
"Returns the handle to the setup database containing the specified element.")
("axlGetUseIncremental"
"axlGetUseIncremental( 
x_hsdb 
) 
=> t / nil"
"Checks if using reference results as cache during incremental run is enabled for the active setup or checkpoint.")
("axlImportSetup"
"axlImportSetup( 
t_session 
t_path
l_tags
[ t_historyName ]
[ s_operation ]
) 
=> t / nil"
"Imports the setup from a file. The list of tags passed are the top-level elements like vars, tests, etc to import.")
("axlLoadSetupState"
"axlLoadSetupState( 
t_session 
t_stateName
l_tags
s_operation
) 
=> t / nil"
"Loads a setup state.")
("axlNewSetupDB"
"axlNewSetupDB( 
t_setupdbName 
) 
=> x_hsdb / nil"
"Opens the named setup database and returns its handle. If the named setup database does not already exist, this function creates one and returns a handle to it.")
("axlNewSetupDBLCV"
"axlNewSetupDBLCV( 
t_libraryName
t_cellName
t_viewName
) 
=> t / nil"
"Creates a new setup database in the specified location. It automatically overwrites any existing setup database in any of the above mentioned locations.")
("axlPutNote"
"axlPutNote( 
x_mainSDB 
t_item 
t_name
t_note
) 
=> t / nil"
"Adds a note to the given test, history, corner, parameters, variable or Reliability Analysis setup.")
("axlPutScript"
"axlPutScript( 
x_element 
t_scriptName 
t_path 
) 
=> x_script / nil"
"Inserts or finds a script by name, sets its path, and returns a handle to that script.")
("axlPutTest"
"axlPutTest( 
x_hsdb 
t_test 
t_tool
) 
=> x_test / nil"
"Finds or inserts a test into the setup database and returns a handle to that test.")
("axlRemoveElement"
"axlRemoveElement( 
x_element 
) 
=> t / nil"
"Removes an element and all its children from the setup database.")
("axlResetActive"
"axlResetActive( 
x_hsdb 
)
=> t / nil"
"Resets the active setup database.")
("axlSaveSetup"
"axlSaveSetup( 
) 
=> t / nil"
"Saves the setup database file and test state files for the current window. The behavior of this function is similar to File - Save. If the cellview was opened in the read-only mode, a new library, cell, and view value must be provided for which you need to save the setup details.")
("axlSaveSetupToLib"
"axlSaveSetupToLib( 
x_hsdb 
t_libName 
t_cellName 
t_viewName 
) 
=> t / nil"
"Saves the setup database to the specified lib/cell/view.")
("axlSDBDebugPrint"
"axlSDBDebugPrint(
x_SDBH
)
=> x_SDBH"
"Prints the in-memory database rooted at the supplied handle. Useful for debugging so that SDB modifications can be seen without saving the XML to disk.")
("axlSDBGetChild"
"axlSDBGetChild(
x_SDBH
t_name
[ t_value ]
)
=> x_hsdb / nil"
"Works as a wrapper around axlSDBGetChildren and returns a setup database handle to a single child element. An error will be reported if multiple matching elements are found.")
("axlSDBGetChildren"
"axlSDBGetChildren(
x_SDBH
[ t_name ]
[ t_value ]
S_returnAs
)
=> l_children / nil"
"Returns child elements of the provided setup database handle.")
("axlSDBGetChildVal"
"axlSDBGetChildVal(
x_SDBH
t_name
)
=> t_value / nil"
"Works as a wrapper around axlSDBGetChild and returns the value for a single child element.")
("axlSDBGetExtension"
"axlSDBGetExtension(
x_mainSDBH
t_extensionName
)
=> x_SDBH / nil"
"Returns the named setup database extension.")
("axlSDBGetName"
"axlSDBGetName(
x_SDBH
)
=> t_name / nil"
"Returns the name of the provided setup database handle.")
("axlSDBGetValue"
"axlSDBGetValue(
x_SDBH
)
=> t_value / nil"
"Returns the value of the provided setup database handle.")
("axlSDBHp"
"aaxlSDBHp(
g_potentialSDBH
)
=> t / nil"
"Returns whether the supplied argument is a valid setup database handle.")
("axlSDBPutExtension"
"axlSDBPutExtension(
x_mainSDBH
t_extensionName
)
=> x_SDBH / nil"
"Adds an extension to the ADE setup database under which customization can be created.")
("axlSDBSetChild"
"axlSDBSetChild(
x_SDBH
t_name
t_value
)
=> x_SDBH / nil"
"Creates a new child element under the provided setup database handle.")
("axlSDBSetMultipleEntry"
"axlSDBSetMultipleEntry(
t_name
)
=> t / nil"
"Sets a setup database name to be a multiple entry name. By default, a setup database handle is a single entry name.  A single-entry element is differentiated only by its name, whereas a multi-entry element is differentiated by both name and value.")
("axlSDBSetValue"
"axlSDBSetValue(
x_SDBH
t_newValue
)
=> t / nil"
"Sets the value of the provided setup database handle.")
("axlSetAllSweepsEnabled"
"axlSetAllSweepsEnabled(
x_hsdb 
g_enableStatus
) 
=> t / nil"
"Sets the selection status of the Point Sweeps check box in the Run Summary assistant pane.")
("axlSetCopyRefResultsOption"
"axlSetCopyRefResultsOption(
x_hsdb 
g_value
) 
=> x_hsdb / 0"
"Specifies whether the simulation results need to be copied or moved from the reference history.")
("axlSetEnabled"
"axlSetEnabled( 
x_element 
g_enable 
) 
=> t / nil"
"Enables or disables a setup database element, such as a test or a variable.")
("axlSetReferenceHistoryItemName"
"axlSetReferenceHistoryItemName( 
x_hsdb
t_referenceHistoryName 
) 
=> x_hsdb / 0"
"Sets the reference history name for the active setup or checkpoint. You can reuse the results or netlist from the reference history during an incremental simulation run. The reference history name set using this function also appears in the Reference field on the Reference History toolbar.")
("axlSetReuseNetlistOption"
"axlSetReuseNetlistOption( 
x_hsdb 
g_value
) 
=> x_hsdb / 0"
"Enables or disables the option to use the reference netlist for the active setup or checkpoint. If this option is enabled, netlist of the design is reused for the incremental run. Otherwise, the design in renetlisted.")
("axlSetUseIncremental"
"axlSetUseIncremental( 
x_hsdb 
g_value
) 
=> x_hsdb / 0"
"Enables or disables the setup database option in active setup or checkpoint for using reference results as cache during incremental run. This function selects or clears the Use reference netlist check box on the Reference History form.")
("axlSetScriptPath"
"axlSetScriptPath( 
x_script 
t_path 
) 
=> t / nil"
"Sets the path of a script.")
("axlWriteDatasheet"
"axlWriteDatasheet( 
t_axlSession 
x_historyEntry 
[ ?directory t_directory ] 
[ ?resultsSummary g_resultsSummary ] 
[ ?testsSummary g_testsSummary ] 
[ ?detailedResults g_detailedResults ] 
[ ?plots g_plots ] 
[ ?designVarsSummary g_designVarsSummary ] 
[ ?paramsSummary g_paramsSummary ] 
[ ?cornersSummary g_cornersSummary ] 
[ ?setupSummary g_setupSummary ] 
[ ?schematicDiagrams g_schematicDiagrams ]
[ ?launchBrowser g_launchBrowser ]
[ ?name t_name ]
)
=> t / nil"
"Creates a datasheet for the specified history entry.")
("axlWriteDatasheetForm"
"axlWriteDatasheetForm( 
x_axlSession 
t_historyEntry 
) 
=> t / nil"
"Causes a form to appear so that you can specify various options for generating a datasheet.")
("maeGetReferenceHistories"
"maeGetReferenceHistories( 
x_hsdb
) 
=> l_referenceHistoryNames"
"Returns a list of names of the reference histories used in the active setup or the given history.")
("axlGetVar"
"axlGetVar( 
x_element 
t_varName 
) 
=> x_var / nil"
"Finds a variable associated with the specified database element and returns a handle to it.")
("axlGetVars"
"axlGetVars( 
x_element 
) 
=> l_vars / nil"
"Returns a list containing a handle to all variables associated with the given database element (the setup database, a corner, or a history checkpoint) and a list of all variable names.")
("axlGetVarValue"
"axlGetVarValue( 
x_varHandle
) 
=> t_value / nil"
"Returns value of the given variable.")
("axlPutVar"
"axlPutVar( 
x_element 
t_varName 
t_value 
) 
=> x_varHandle / nil"
"Creates or finds a variable by the given name for the specified database element and sets its value.")
("axlGetAllVarsDisabled"
"axlGetAllVarsDisabled(
x_mainSDB 
) 
=> t / nil"
"Returns the status for inclusion of the global variables in a simulation. In the GUI, this is the selection status of the Global Variables check box in the Data View assistant pane of ADE Assembler.")
("axlSetAllVarsDisabled"
"axlSetAllVarsDisabled(
x_mainSDB 
g_enableStatus
) 
=> t / nil"
"Sets the selection status of the option to include the global variables in simulations. In the GUI, this is the selection status of the Global Variables check box in the Data View assistant pane of ADE Assembler.")
("axlSetDefaultVariables"
"axlSetDefaultVariables( 
l_variables 
[ t_libName ] 
) 
=> t / nil"
"Creates a set of default variables in the Global Variables tree on the Data View pane and in the Parameters and Variables assistant of ADE Assembler.")
("axlSetDesignVariablePerTest"
"axlSetDesignVariablePerTest( 
x_mainSDB
t_varName
t_testName
[ ?enabled g_enableStatus ]
) 
=> t / nil"
"Enables or disables a design variable for a specific test. In the Setup assistant of ADE Explorer or the Data View assistant of ADE Assembler, it selects or clears the check box next to a design variable under a test.")
("maeExportDesignVariables"
"maeExportDesignVariables( 
t_fileName
[ ?exportTest t_exportTest ]
[ ?all g_all ]
) 
=> t / nil"
"Exports the design variables from the specified test to the given CSV file.")
("maeImportDesignVariables"
"maeImportDesignVariables( 
t_fileName
[ ?importFromTest t_importFromTest ]
[ ?importToTest t_importToTest ]
[ ?all g_all ]
) 
=> t / nil"
"Imports the design variables from the specified CSV file to the given test.")
("axlGetParameters"
"axlGetParameters(
x_mainSDB
)
=> l_parameterPaths / nil"
"Returns a list of paths to all the device parameters found in the given database.")
("axlGetParameter"
"axlGetParameter(
x_mainSDB
t_parameterPath
)
=> x_parameterHandle / 0"
"Returns the database handle to the given device parameter in the setup database.")
("axlGetParameterValue"
"axlGetParameterValue(
x_mainSDB
t_parameterPath
)
=> t_parameterValue / nil"
"Returns value of the specified device parameter in the setup database.")
("axlGetAllParametersDisabled"
"axlGetAllParametersDisabled(
x_mainSDB 
) 
=> t / nil"
"Returns the selection status of the option to include the device parameters in simulations. In the GUI, this is the selection status of the Parameters check box in the Data View assistant pane.")
("axlRegisterCustomDeviceFilter"
"axlRegisterCustomDeviceFilter( 
t_name
s_function
) 
=> t / nil"
"Adds a custom filter for device instance parameters on the Variables and Parameters assistant pane in ADE Explorer and ADE Assembler.")
("axlSetParameter"
"axlSetParameter(
x_mainSDB
t_parameterPath
t_value
)
=> t / nil"
"Sets a value for the specified device parameter.")
("axlSetAllParametersDisabled"
"axlSetAllParametersDisabled(
x_mainSDB 
g_enableStatus
) 
=> t / nil"
"Sets the status of the Parameters check box in the Data View assistant pane in ADE Explorer and ADE Assembler.")
("axlAddModelPermissibleSectionLists"
"axlAddModelPermissibleSectionLists( 
x_handleModel 
l_sectionNames
) 
=> l_sectionHandles / nil"
"Creates a new list or adds new section names to the existing list of permissible section names for the given model imported from a PCF file. If a model file includes many sections out of which only a limited number of sections are of relevance to your testbench, you can create a permissible section list for that model file. If the LimitModelSections environment variable is set to LimitedList, while displaying the list of section names in the Corners Setup UI, the tool checks the permissible section list for a model file and shows only the relevant names. If you specify a section name that is not included in the permissible list, the tool shows appropriate errors.")
("axlGetModel"
"axlGetModel( 
x_cornerHandle 
t_modelName 
) 
=> x_modelFile / 0"
"Returns a handle to the specified model file associated with the given corner.")
("axlGetModelBlock"
"axlGetModelBlock( 
x_modelHandle 
) 
=> t_blockName / nil"
"Returns the block name with which the specified model is associated. By default, a model file is associated with a test and therefore, the block name is set to Global. However, in MTS mode, a model can be associated with a specific block in the design. Using this function, you can get the name of the block with which a model file is associated.")
("axlGetModelFile"
"axlGetModelFile( 
x_modelHandle 
) 
=> t_modelFile / nil"
"Returns the model file path for the specified model.")
("axlGetModelGroup"
"axlGetModelGroup( 
x_mainSDB 
t_modelGroupName 
) 
=> x_modelGroup / nil"
"Returns a handle to the specified model group in the setup database.")
("axlGetModelGroupName"
"axlGetModelGroupName( 
x_cornerHandle 
) 
=> t_modelGroupName / nil"
"Returns the name of the model group associated with the specified corner.")
("axlGetModelGroups"
"axlGetModelGroups( 
x_mainSDB 
) 
=> l_modelGroups / nil"
"Returns a list of the model group names in a given setup database.")
("axlGetModelPermissibleSectionLists"
"axlGetModelPermissibleSectionLists( 
x_handleModel 
) 
=> l_sectionName / nil"
"Returns a list of permissible section names for the given model extracted from a PCF file.")
("axlGetModelSection"
"axlGetModelSection( 
x_modelHandle 
) 
=> t_sectionName / nil"
"Returns the model section being used for the corner with which the model file is associated.")
("axlGetModelSections"
"axlGetModelSection( 
t_fileName
) 
=> l_sectionNames / nil"
"Returns a list of simulator sections in the specified model file.")
("axlGetModelTest"
"axlGetModelTest( 
x_modelHandle 
) 
=> t_testName / nil"
"Returns the name of the test associated with the specified model. By default, a model file is associated with a test. However, in MTS mode, a model can be associated with a specific block in the design. Using this function, you can get the name of the test with which a model file is associated.")
("axlGetModels"
"axlGetModels( 
x_cornerHandle 
) 
=> l_modelFiles / nil"
"Returns a list of model files associated with the givne corner.")
("axlPutModel"
"axlPutModel( 
x_cornerHandle 
t_modelFileName 
[ ?testName t_testName ] 
[ ?blockName t_blockName ] 
) 
=> x_modelHandle / nil"
"Adds a model file to the specified corner.")
("axlPutModelGroup"
"axlPutModelGroup( 
x_mainSDB 
t_modelGroupName 
) 
=> x_modelGroup / nil"
"Adds a model group to the setup database or returns the handle to the model group if it already exists.")
("axlSetModelBlock"
"axlSetModelBlock( 
x_modelHandle 
t_blockName 
) 
=> x_modelBlock / nil"
"Sets the name of the block for the specified model. By default, a model is associated with all the design blocks and is set as Global. In the MTS mode, a model is associated with a specific MTS block, so you need to use this function to specify the name of that block.")
("axlSetModelFile"
"axlSetModelFile( 
x_modelHandle 
t_modelFile 
) 
=> t_modelFile / nil"
"Sets the model file for the specified model.")
("axlSetModelGroupName"
"axlSetModelGroupName( 
x_corner 
t_modelGroupName 
) 
=> x_modelGroup / nil"
"Sets or associates the given model group with the specified corner.")
("axlSetModelPermissibleSectionLists"
"axlSetModelPermissibleSectionLists( 
x_modelHandle 
l_sectionNames
) 
=> l_sectionHandles / nil"
"Sets a permissible section list for the given model extracted from a PCF file. If a model file includes many sections out of which only a limited number of sections are of relevance to your testbench, you can create a permissible section list for that model file. If the LimitModelSections environment variable is set to LimitedList, while displaying the list of section names in the Corners Setup UI, the tool checks the permissible section list for a model file and shows only the relevant names.")
("axlSetModelSection"
"axlSetModelSection( 
x_modelHandle 
t_sectionName 
) 
=> x_modelSection / nil"
"Sets the section name for the specified model.")
("axlSetModelTest"
"axlSetModelTest( 
x_modelHandle 
t_testName 
) 
=> x_modelTest / nil"
"Sets the name of the test to be associated with the specified model. By default, a model is associated with all the tests. In case of MTS mode, you need to associate the model with a specific test. Alternatively, you can use the axlPutModel function to specify the test name while adding a model.")
("ALIAS"
"ALIAS( 
t_globalVar 
) 
=> t_globalVarValue / nil"
"Can be used in two scenarios- to give alias or alternate names to long net names or instance name paths, and to return the first value of a waveform result, for non-swept variables.")
("axlAddOutputExpr"
"axlAddOutputExpr(
t_sessionName
t_testName
t_outputName
[ ?expr t_expr ]
[ ?evalType t_evalType ]
[ ?exprDPLs l_exprDPLs ]
[ ?plot g_plot ]
[ ?save g_save ]
)
=> t / t_error"
"Adds an output expression to a test setup.")
("axlAddOutputs"
"axlAddOutputs(
l_outputNames
)
=> t / nil"
"Defines one or more output measures in an OCEAN script.")
("axlAddOutputsColumn"
"axlAddOutputsColumn(
x_mainSDB
t_columnName
)
=> t / nil"
"Adds a new user-defined column to the outputs table.")
("axlAddOutputSignal"
"axlAddOutputSignal(
t_sessionName
t_testName
t_signalName
[ ?type t_outputType ]
[ ?outputName t_outputName ]
[ ?plot g_plot ]
[ ?save g_save ]
)
=> t / t_error"
"Adds a signal to a test setup.")
("axlDeleteOutput"
"axlDeleteOutput(
t_sessionName
t_testName
[ ?outputName t_outputName ]
[ ?type t_outputType ]
)
=> t / t_error"
"Deletes an output from a test setup.")
("axlDeleteOutputsColumn"
"axlDeleteOutputsColumn(
x_mainSDB
t_columnName
)
=> t / nil"
"Deletes a user-defined column from the Outputs table.")
("axlGetCustomOutputResultMenu"
"axlGetCustomOutputResultMenu(
[ g_adeSession ]
)
=> l_commandDetails"
"A callback function that you can use to add custom commands in the shortcut menu of the Results tab of Virtuoso ADE Explorer and Virtuoso ADE Assembler. These products call this function to get the custom command names and the associated callback functions to be added to the menu.")
("axlGetOutputNotation"
"axlGetOutputNotation(
x_sdb
t_testName
t_outputID
)
=> t_notation / " ""
"Returns the notation style set for the specified output of the test.")
("axlGetOutputSignificantDigits"
"axlGetOutputSignificantDigits(
x_sdb
t_testName
t_outputID
)
=> t_digits / 0"
"Returns the number of significant digits set for the specified output of the test.")
("axlGetOutputSuffix"
"axlGetOutputSuffix(
x_sdb
t_testName
t_outputID
)
=> t_suffix / " ""
"Returns the suffix set to the specified output of the test.")
("axlGetOutputUnits"
"axlGetOutputUnits(
x_sdb
t_testName
t_outputName
)
=> t_unit / " ""
"Returns the suffix set to the specified output of the test.")
("axlGetOutputUserDefinedData"
"axlGetOutputUserDefinedData(
x_sdb
t_testName
t_outputName
t_columnName
)
=> t_unit / " ""
"Returns the value saved in a user-defined column for the given output and test name combination.")
("axlGetTemperatureForCurrentPointInRun"
"axlGetTemperatureForCurrentPointInRun(
)
=> t_temperature / nil"
"Within the OCEAN measurement script, this function allows to access the temperature of the current point in the run.")
("axlGetUserDefinedOutputsColumns"
"axlGetUserDefinedOutputsColumns(
x_sdb
)
=> l_columnNames / nil"
"Returns a list of names of the user-defined columns in the specified setup database.")
("axlOutputResult"
"axlOutputResult(
g_value
[ t_outputName ]
)
=> t / nil"
"Specifies the value of an output in an OCEAN script file. This function only assigns a value to a measure, but does not add it to the script. You need to use the axlAddOutputs function to add or define output measures in an OCEAN script.")
("axlOutputsExportToFile"
"axlOutputsExportToFile(
t_sessionName
t_fileName
[ ?omitTestCol g_omitTestCol ]
)
=> t / nil"
"Exports outputs from the currently active setup to the specified CSV file.")
("axlOutputsImportFromFile"
"axlOutputsImportFromFile(
t_sessionName
t_fileName
[ ?operation t_operationType ]
[ ?test t_test ]
)
=> t / nil"
"Imports outputs from the specified CSV file. Outputs can be exported to a CSV file by using axlOutputsExportToFile.")
("axlPutOutputNotation"
"axlPutOutputNotation(
x_sdb
t_testName
t_outputID
t_value
)
=> x_sdb / nil"
"Sets the notation style for the specified output of the test.")
("axlPutOutputSignificantDigits"
"axlPutOutputSignificantDigits(
x_sdb
t_testName
t_outputID
x_value
)
=> x_sdb / nil"
"Sets the number of significant digits corresponding to the specified output of the test.")
("axlPutOutputSuffix"
"axlPutOutputSuffix(
x_sdb
t_testName
t_outputID
x_value
)
=> x_sdb / nil"
"Sets the suffix corresponding to the specified output of the test.")
("axlPutOutputUnits"
"axlPutOutputUnits(
x_sdb
t_testName
t_outputID
t_value
)
=> x_sdb / nil"
"Sets the unit to the specified output of the test.")
("axlRenameOutputsColumn"
"axlRenameOutputsColumn(
x_mainSDB
t_columnName
t_newColumnName
)
=> t / nil"
"Changes the name of a user-defined column in the outputs table.")
("axlSetOutputUserDefinedData"
"axlSetOutputUserDefinedData(
x_mainSDB
t_testName
t_outputName
t_columnName
t_columnValue
)
=> t / nil"
"Sets the value in the user-defined column for the specified test name and output.")
("calcVal"
"calcVal(
t_outputName
[ t_testName ]
[ ?cornerName t_cornerName ]
[ ?historyName t_historyName ]
[ ?lib t_libName ]
[ ?cell t_cellName ]
[ ?view t_viewName ]
[ ?run t_runName ]
[ ?result t_resultName ]
[ ?getFirstSweepPoint t_getFirstSweepPoint ]
[ ?ignoreParams g_ignoreParams ]
[ ?matchParams g_matchParams ]
[ ?defaultVal t_defaultVal ]
[ ?relxName t_relxName ]
[ ?ageValue t_ageValue ]
[ ?ageUnit t_ageUnit ]
[ ?she g_she ]
)
=> g_output / nil"
"Returns the value of an output from the same or another test. You can use the value returned by this function in another output expression.")
("measureAcross"
"measureAcross(
t_expression
[ ?parameters l_parameters ]
)
=> x_scalar / o_waveform / nil"
"Computes the given calculator expression across the parameters provided in the parameter list. Use this function only when you are creating expressions for outputs that can be evaluated across any dimension. These expressions have their eval type as any. If you specify this expression for other eval types, the parameter list is ignored.")
("axlGetCornersForATest"
"axlGetCornersForATest( 
x_session 
t_test 
) 
=> l_corners / nil"
"Returns a list of corners enabled for the given test.")
("axlGetEnabledGlobalVarPerTest"
"axlGetEnabledGlobalVarPerTest( 
x_hsdb
t_varName
t_test 
) 
=> t / nil"
"Returns the status of a global variable for the given test. When a global variable is overridden for a test, this function returns nil, which implies that the value of the global variable will not be considered for the test. Instead, the test will use a local value set for that variable.")
("axlGetEnabledTests"
"axlGetEnabledTests( 
x_mainSDB
) 
=> l_tests / nil"
"Returns a list of tests enabled in the given setup database.")
("axlGetOrigTestToolArgs"
"axlGetOrigTestToolArgs( 
x_hsdb 
) 
=> l_toolOptions / nil"
"Returns an associative list of original tool options set for the test before you ran the simulation after modifying the test setup.")
("axlGetTest"
"axlGetTest( 
x_hsdb 
t_test 
) 
=> x_test / nil"
"Finds a test in the setup database and returns its handle.")
("axlGetTests"
"axlGetTests( 
x_hsdb 
) 
=> l_tests / nil"
"Returns a list containing a handle to all tests in the setup database and a list of all test names.")
("axlGetTestToolArgs"
"axlGetTestToolArgs( 
x_hsdb 
) 
=> l_toolOptions / nil"
"Returns an associative list of tool option names and values for a test.")
("axlSetTestToolArgs"
"axlSetTestToolArgs( 
x_hsdb 
l_toolOptions 
) 
=> x_hsdb / nil"
"Sets the tool options for the test.")
("axlToolSetOriginalSetupOptions"
"axlToolSetOriginalSetupOptions( 
t_session 
t_test 
l_toolOptions 
[ ?history x_history ]
) 
=> t / nil"
"Sets options to their original values for the tool instance associated with the specified session and test.")
("axlToolSetSetupOptions"
"axlToolSetSetupOptions( 
t_session 
t_test 
l_toolOptions 
) 
=> t / nil"
"Sets the option values for the tool instance associated with the specified session and test.")
("axlCustomADETestName"
"axlCustomADETestName( 
t_libName 
t_cellName 
t_viewName 
t_stateName 
)
=> t_testName / nil"
"A function that can be defined in the .cdsinit file or in CIW to customize the test name in ADE XL. The default format of test name is <library-name>:<cell-name>:<sequence-num>. You can use this function to customize the format to be used for test name. While creating a new test, ADE XL checks for the existence of a definition of axlCustomADETestName. If found, ADE XL calls this function and uses the returned value as the test name.")
("axlWriteOceanScriptLCV"
"axlWriteOceanScriptLCV(
t_fileName
t_libraryName
t_cellName
t_viewName
=> t / nil"
"Writes an OCEAN script for the given cellview in the specified file. If axlWriteOceanScriptLCV()is used in an existing session, it will write the current in-memory values and not the values saved on the disk.")
("axlAddSpecToOutput"
"axlAddSpecToOutput( 
x_hsdb
t_testName
t_resultName
[ ?min g_minValue ]
[ ?max g_maxValue ]
[ ?gt g_greaterThanValue ]
[ ?lt g_lessThanValue ]
[ ?range g_rangeValues ]
[ ?tol g_toleranceValue ]
[ ?info g_info ]
[ ?weight g_weightingFactor ]
[ ?corner g_cornerName ]
) 
=> t / t_error"
"Adds a specification to an output defined for a test. You can also use this function to modify an existing specification for an output.")
("axlGetSpecs"
"axlGetSpecs( 
x_hsdb 
) 
=> l_list / nil"
"Returns a list containing a handle to all specifications in the setup database and a list of all specification names.")
("axlGetSpec"
"axlGetSpec( 
x_hsdb 
t_specName 
) 
=> x_spec / 0"
"Finds the named specification in the setup database and returns its handle.")
("axlGetSpecData"
"axlGetSpecData( 
x_hsdb
t_resultName
t_testName
[ t_cornerName ]
) 
=> l_specDetails / nil"
"Returns the specification for the given result, test, and corner combination in the given setup database.")
("axlGetSpecWeight"
"axlGetSpecWeight( 
x_spec 
) 
=> t_weight / nil"
"Returns the weight value for a specification. This value represents the weighting factor for the specification during optimization.")
("axlGetAllCornersEnabled"
"axlGetAllCornersEnabled( 
x_mainSDB 
) 
=> t / nil"
"Returns the selection status of the Corners check box in the Run Summary assistant in ADE Assembler or the Explorer Run Summary assistant in ADE Explorer.")
("axlCorners"
"axlCorners( 
t_session 
[ g_refresh ]
) 
=> t / nil"
"Opens the Corners Setup form.")
("axlGetCorner"
"axlGetCorner( 
x_mainSDB 
t_cornerName 
) 
=> x_corner / nil"
"Finds a corner by its name and returns a handle to that corner.")
("axlGetCorners"
"axlGetCorners( 
x_mainSDB 
) 
=> l_corners / nil"
"Returns a list containing a handle to all corners and a list of names of corners and corner groups in the setup database.")
("axlGetCornerDisabledTests"
"axlGetCornerDisabledTests( 
x_cornerHandle 
) 
=> l_testNames / nil"
"Returns a list containing a handle to the disabled tests and the names of tests that are disabled for the given corner.")
("axlGetCornerCountForName"
"axlGetCornerCountForName( 
x_mainSDB 
t_cornerGroup
) 
=> x_cornerCount / -1"
"Returns the count of individual corners contained in the specified corner group.")
("axlGetCornerNameForCurrentPointInRun"
"axlGetCornerNameForCurrentPointInRun(
)
=> t_cornerName"
"Returns the name of the corner for the current point being simulated. This function is useful for customized processing or debugging in the OCEAN script-based measures.")
("axlGetNominalCornerEnabled"
"axlGetNominalCornerEnabled( 
x_mainSDB 
) 
=> t / nil"
"Checks whether the nominal corner is enabled in the specified setup database. This is same as the status of the Nominal check box in the Run Summary assistant.")
("axlGetNominalCornerTestEnabled"
"axlGetNominalCornerTestEnabled( 
t_testHandle
) 
=> t / nil"
"Returns the status of the check box corresponding to the given test in the Nominal column on the Corners Setup form.")
("axlGetStatVars"
"axlGetStatVars(
x_mainSDB
x_cornerId
)
=> l_vars / nil"
"Returns a list of the names of statistical variables that use the statistical::mismatch or statistical::global prefix for the given statistical corner.")
("axlLoadCorners"
"axlLoadCorners( 
x_mainSDB 
t_SDBfileName
) 
=> x_cornersHandle / 0"
"Loads a set of corners from the specified XML file in which the corners were saved earlier.")
("axlLoadCornersFromPcfToSetupDB"
"axlLoadCornersFromPcfToSetupDB (
t_session
t_fileName
t_testNameList
g_overwriteExistingCorners
) 
=> t / nil"
"Imports a set of predefined corners from a process customization file into the corners setup for the given session.")
("axlPlotAcrossDesignPoints"
"axlPlotAcrossDesignPoints( 
t_session
t_testName
t_historyName
t_outputName
t_cornerName 
) 
=> t / nil"
"Plots an output across all the design points for a particular corner.")
("axlPutCorner"
"axlPutCorner( 
x_mainSDB 
t_cornerName 
) 
=> x_corner / nil"
"Adds a new corner by the given name and returns a handle to that corner. If a corner already exists with the same name, the function returns the handle to that corner.")
("axlPutDisabledCorner"
"axlPutDisabledCorner( 
x_testHandle 
t_cornerName 
) 
=> x_disabledcorner / nil"
"Adds a new corner by the given name and returns a handle to that corner. If a corner already exists with the same name, the function returns the handle to that corner. In addition, the corner is disabled for the specified test name, but enabled for other tests in the session.")
("axlSetDefaultCornerEnabled"
"axlSetDefaultCornerEnabled( 
x_testHandle 
g_enable 
) 
=> 1 / 0"
"Enables or disables the default (nominal) corner for the specified test. The program creates a nominal corner when you create a test. This corner represents the absence of corner-specific information.")
("axlSetAllCornersEnabled"
"axlSetAllCornersEnabled(
x_mainSDB 
g_enable
) 
=> t / nil"
"Enables or disables all the corners for simulation. This changes the selection status of the Corners check box in the Run Summary assistant.")
("axlSetCornerName"
"axlSetCornerName(
x_cornerHandle 
t_cornerName
) 
=> t / nil"
"Sets or updates the name of the given corner.")
("axlSetCornerTestEnabled"
"axlSetCornerTestEnabled(
x_cornerHandle 
t_testName
g_enableFlag
) 
=> x_num / nil"
"Enables or disables simulation of a test for the given corner. This function changes the status of the check box corresponding to a test in the column for the given corner.")
("axlSetNominalCornerEnabled"
"axlSetNominalCornerEnabled(
x_mainSDB 
g_enable
) 
=> t / nil"
"Enables or disables the nominal corner in the specified setup database.")
("axlSetNominalCornerTestEnabled"
"axlSetNominalCornerTestEnabled( 
x_testHandle
g_enableFlag
) 
=> t / nil"
"Sets the status of the check box corresponding to the given test in the Nominal column on the Corners Setup form.")
("axlSetWCCTime"
"axlSetWCCTime(
x_specID
t_time
)
=> t / nil"
"Sets the time information for the given specification handle of a worst-case corner.")
("axlGetWCCCorner"
"axlGetWCCCorner(
x_specHandle 
) 
=> t_value / nil"
"Gets the corner name for the given specification handle of a worst-case corner.")
("axlGetWCCHistory"
"axlGetWCCHistory(
x_specHandle 
)
=> t_historyName / nil"
"Returns name of the history for a specification of a worst-case corner.")
("axlGetWCCResult"
"axlGetWCCResult(
x_specHandle 
) 
=> t_result / nil"
"Returns result of a specification of a worst-case corner.")
("axlGetWCCSpec"
"axlGetWCCSpec(
x_cornerHandle 
t_specName
) 
=> x_spec / nil"
"Returns handle to a specification for the specified worst-case corner.")
("axlGetWCCSpecs"
"axlGetWCCSpecs(
x_wccHandle
) 
=> l_specs / nil"
"Returns a list of specifications for the given worst-case corner.")
("axlGetWCCTest"
"axlGetWCCTest(
x_wccHandle 
) 
=> t_testName / nil"
"Returns the name of the test of the specification associated with a worst-case corner.")
("axlGetWCCTime"
"axlGetWCCTime(
x_specId
)
=> t_time / nil"
"Returns the generated time information for the given specification handle of a worst-case corner.")
("axlGetWCCRangeBound"
"axlGetWCCRangeBound(
x_hsdb 
) 
=> t_rangeBound"
"Returns an integer value that specifies whether the worst-case corner corresponds to the minimum or the maximum value of the spec.")
("axlGetWCCVar"
"axlGetWCCVar(
x_hscr 
t_name
) 
=> x_handle / nil"
"Finds the specified variable by name and returns a handle to it.")
("axlGetWCCVarMonotonicity"
"axlGetWCCVarMonotonicity(
x_hsdb 
) 
=> t_monotonicity / nil"
"Gets the monotonicity of a specific variable or parameter of the worst-case corner.")
("axlGetWCCVars"
"axlGetWCCVars(
x_hsdb
)
=> l_vars / nil"
"Returns a list containing a handle to all variables and a list of all variable names in a worst-case corner.")
("axlGetWYCSigmaTargetLimit"
"axlGetWYCSigmaTargetLimit(
)
=> n_sigma_limit"
"Gets the sigma-to-target limit for the Improve Yield flow using worst yield corners. If this value is not set, the flow internally sets it to 100.")
("axlSetWYCSigmaTargetLimit"
"axlSetWYCSigmaTargetLimit(
n_sigma_limit
)
=> t / nil"
"Sets the sigma-to-target limit for Improve Yield flow using worst yield corners.")
("maeGetSimulationMessages"
"maeGetSimulationMessages(
[ ?session t_session ]
[ ?msgType t_messageType ]
)
=> t_messages / nil"
"Displays an error message of the given type during the simulation run.")
("maeGetMappingForJobAndPoint"
"maeGetMappingForJobAndPoint(
[ ?session t_session ]
)
=> l_jobPointMapping / nil"
"Returns a list containing the mapping of job IDs to the point IDs allocated to them for all the simulations run in the current ADE Explorer or ADE Assembler session. After starting a simulation run, you can use this information to debug incomplete simulations.")
("maeOpenLogViewer"
"maeOpenLogViewer(
[ t_dbFilePath ]
)
=> t / nil"
"Opens the Log Viewer window, where you can view the messages loaded from a database.")
("maeResumeSimulation"
"maeResumeSimulation(
[ t_session ]
)
=> t / nil"
"Resumes the simulations that were earlier suspended automatically by ADE Explorer or ADE Assembler according to the settings specified on the Resources tab of the Job Policy Setup form.")
("maeRunSimulation"
"maeRunSimulation(
[ ?session t_sessionName ] 
[ ?runMode t_runMode ]
[ ?callback t_callback ]
[ ?run t_runPlan ]
[ ?waitUntilDone g_waitUntilDone ]
[ ?returnRunId g_returnRunId ]
)
=> t_histname / x_runID / nil"
"Sets the given run mode for the given session and runs simulation.")
("maeStopSimulation"
"maeStopSimulation(
[ ?historyName l_historyNames ]
[ ?session t_sessionName ] 
)
=> t / nil"
"Stops simulation runs for the given histories.")
("maeSuspendSimulation"
"maeSuspendSimulation(
[ t_sessionName ] 
)
=> t / nil"
"Suspends the simulation run for the specified session. If not specified, the current simulation run is suspended.")
("maeSetPreRunScript"
"maeSetPreRunScript(
t_scriptName
[ ?tests l_testNames ]
[ ?enabled g_enabled ]
[ ?session t_sessionName ] 
)
=> t / nil"
"Sets the given script as a pre-run script for the given test and sets its status.")
("maeSetRunOption"
"maeSetRunOption(
t_mode
t_runOptionName
t_runOptionValue
[ ?session t_sessionName ] 
)
=> t / nil"
"Sets value for a run option.")
("maeWaitUntilDone"
"maeWaitUntilDone(
g_historyNames 
[ ?session t_sessionName ] 
)
=> t / nil"
"Specifies the names of historic checkpoints for which the tool must wait before proceeding.")
("maeWriteScript"
"maeWriteScript(
t_fileName
[ ?session t_session ]
[ ?shouldRunActive g_shouldRunActive ] 
[ ?runPlans l_runPlans ] 
[ ?histories l_histories ] 
)
=> t / nil"
"Creates a script with the specified setup details. This script can be run from the command line.")
("axlExportOutputView"
"axlExportOutputView( 
t_sessionName 
t_fileName 
t_viewType 
[ ?history g_historyName ]
[ ?testName g_testName ]
[ ?filterName t_filterName ]
[ ?clearAllFilters g_clearAllFilters]
)
=> t / nil"
"Exports the results view to the specified .csv or .html file.")
("axlGetAllSweepsEnabled"
"axlGetAllSweepsEnabled( 
x_hsdb 
) 
=> t / nil"
"Returns the selection status of the Sweep check box in the Run Summary assistant.")
("axlGetCurrentRunMode"
"axlGetCurrentRunMode( 
x_hsdb 
) 
=> t_mode / nil"
"Returns the current simulation run mode of a given session.")
("axlGetParasiticRunMode"
"axlGetParasiticRunMode(
x_mainSDB
)
=> t_runMode"
"Gets the parasitic run mode name from the active setup or history checkpoint.")
("axlGetParasiticParaLCV"
"axlGetParasiticParaLCV(
t_sessionName
t_paraRunMode
)
=> t_cellViewName"
"Gets the name of the parasitic cellview attached to the parasitic run mode in the active setup or history checkpoint.")
("axlGetParasiticSchLCV"
"axlGetParasiticSchLCV(
t_sessionName
t_parasiticRunMode
)
=> t_cellViewName"
"Gets the name of the schematic cellview attached to the parasitic run mode in the active setup or history checkpoint.")
("axlGetPreRunScript"
"axlGetPreRunScript(
t_sessionName
t_testName
)
=> t_filePath"
"Returns the path to the pre-run script file attached to the given test.")
("axlGetRunDistributeOptions"
"axlGetRunDistributeOptions( 
x_hsdb 
) 
=> r_runOptions / nil"
"Returns the current run option settings for the given setup database.")
("axlGetRunData"
"axlGetRunData( 
t_sessionName 
x_runID 
) 
=> x_historyHandle / nil"
"Returns the handle to the history obtained after running a simulation in the given session. You can use this handle to get access to the history results or to get setup details by using the history checkpoint.")
("axlGetRunMode"
"axlGetRunMode( 
x_hsdb 
t_mode 
) 
=> x_mode / nil"
"Returns a handle to the named run mode in the specified setup database.")
("axlGetRunModes"
"axlGetRunModes( 
x_mainSDB 
) 
=> l_modes / nil"
"Returns a list of available run modes from the specified setup database.")
("axlGetRunOption"
"axlGetRunOption( 
x_hsdb 
t_mode 
t_runoptName 
) 
=> x_runOption / nil"
"Returns a handle to the named run option (t_runoptName) in the setup database for the specified run mode (t_mode).")
("axlGetRunOptionName"
"axlGetRunOptionName( 
x_runOption 
) 
=> t_runoptName / nil"
"Returns the run option name.")
("axlGetRunOptions"
"axlGetRunOptions( 
x_hsdb 
t_runModeName
) 
=> l_list / nil"
"Returns a list containing a handle to all run option names for the specified run mode.")
("axlGetRunOptionValue"
"axlGetRunOptionValue( 
x_runOption 
) 
=> t_runoptValue / nil"
"Returns the value associated with the provided run option.")
("axlGetRunStatus"
"axlGetRunStatus( 
t_sessionName
[ ?optionName t_optionName ]
[ ?historyName t_historyName ]
) 
=> l_statusValues"
"Returns the completion status in terms of the number of points, tests, or corners completed for all histories running in the given session or for the specified history.")
("axlIsSimUsingStatParams"
"axlIsSimUsingStatParams(
)
=> t / nil"
"Returns t if statistical variables are being set or varied for a particular simulation run. For example, statistical parameters in a Monte Carlo run or a statistical corner for Improve Yield.")
("axlPutRunOption"
"axlPutRunOption(
x_hsdb
t_mode
t_runoptName
) 
=> x_runOption / nil"
"Adds a run option to the setup database or edits an existing one and returns the handle to the option. The list of valid option names (t_runoptName) depends on the run mode (t_mode).")
("axlRunAllTests"
"axlRunAllTests( 
t_session 
t_mode 
) 
=> x_runid / nil"
"Starts a run with all enabled tests.")
("axlRunAllTestsWithCallback"
"axlRunAllTestsWithCallback( 
t_session 
t_mode 
t_callback 
) 
=> x_runid / nil"
"Starts a simulation run with all enabled tests and specifies a SKILL expression to call upon their completion.")
("axlRunSimulation"
"axlRunSimulation( 
[ ?session t_session ]
[ ?callback t_callback ]
) 
=> x_runid / nil"
"Starts a simulation run of all enabled tests and specifies a SKILL expression to call upon completion.")
("axlSetCurrentRunMode"
"axlSetCurrentRunMode( 
x_hsdb 
t_mode 
) 
=> t / nil"
"Sets the current simulation run mode for the given database.")
("axlImportPreRunScript"
"axlImportPreRunScript(
t_sessionName
t_testName
t_preRunScriptName
)
=> t_preRunScriptName / nil"
"Imports and attaches the given script to the specified test. In the GUI of the application, you can right-click the test name and choose Add/Edit Pre Run Script to view or edit the pre-run script attached to the test.")
("axlSetParasiticRunMode"
"axlSetParasiticRunMode(
x_mainSDB
t_runModeName

)
=> t / nil"
"Sets the parasitic run mode for the given setup.")
("axlSetPreRunScript"
"axlSetPreRunScript(
t_sessionName
t_testName
t_scriptName
)
=> t_filePath / nil"
"Sets or adds a pre-run script for a test.")
("axlSetPreRunScriptEnabled"
"axlSetPreRunScriptEnabled(
t_sessionName
t_testName
g_enabled
)
=> t / nil"
"Enables or disables execution of pre-run scripts before running simulations.")
("axlSetRunDistributeOptions"
"axlSetRunDistributeOptions( 
x_hsdb 
[ ?RunIn t_runIn ]
[ ?DivideJobs t_divideJobs ]
[ ?JobLimit n_jobLimit ]
) 
=> t / nil"
"Sets the specified run option settings for the given setup database. These settings are also visible in the Run Options form.")
("axlSetRunOptionName"
"axlSetRunOptionName( 
x_runOption 
t_runoptName 
) 
=> t / nil"
"Sets the run option name.")
("axlStop"
"axlStop( 
t_session
x_runid
) 
=> t / nil"
"Stops a run based on its ID.")
("axlStopAll"
"axlStopAll( 
t_session 
) 
=> t / nil"
"Stops all runs currently evaluating in the session.")
("axlReadHistoryResDB"
"axlReadHistoryResDB( 
t_historyName 
[ ?session t_sessionName ]
) 
=> h_ResultsDBObj / nil"
"Returns a handle to the results database saved with the specified history.")
("axlReadResDB"
"axlReadResDB( 
t_ResultsDBFileName 
) 
=> h_ResultsDBObj / nil"
"Returns a handle to the specified results database. This handle provides read-only access to the results database that contains objects of the following types:")
("axlSetRunOptionValue"
"axlSetRunOptionValue( 
x_runOptionHandle 
t_runOptionValue
) 
=> t / nil"
"Sets a value for the given run option.")
("maeGetHistoryCloudUUID"
"maeGetHistoryCloudUUID(
t_sessionName 
t_historyName 
)
=> t_UUID / nil"
"Returns the UUID for the specified history saved for a simulation run on the cloud for the given session. UUID is the unique identifier used by ADE Assembler for the histories saved on the cloud. You can use this function when the simulation was run using the Cloud distribution method.")
("axlGetCurrentHistory"
"axlGetCurrentHistory( 
t_sessionName 
) 
=> x_historyHandle / nil"
"Returns the internal integer value representing the current history entry in active use.")
("axlGetDataViewHistoryUserMenu"
"axlGetDataViewHistoryUserMenu( 
t_sessionName 
x_historyHandle
) 
=> l_menuStructItems"
"This callback function is called when you right-click a history item in the History tab of the Data View assistant. You can override this function in .cdsinit to add customized menu items in the popup menus of the history items.")
("axlGetHistory"
"axlGetHistory( 
x_hsdb 
) 
=> l_history / nil"
"Returns a list containing a handle to all history entries in the setup database and a list of all the history entries.")
("axlGetHistoryCheckpoint"
"axlGetHistoryCheckpoint( 
x_history 
) 
=> x_checkpoint / nil"
"Returns the handle to the checkpoint of a history entry.")
("axlGetHistoryEntry"
"axlGetHistoryEntry( 
x_hsdb 
t_historyName 
) 
=> x_history / nil"
"Finds the specified history entry in the setup database and returns the handle to that entry.")
("axlGetHistoryGroup"
"axlGetHistoryGroup( 
x_hsdb 
t_histgrpName 
) 
=> x_history / nil"
"Returns a handle to the specified history group in the setup database.")
("axlGetHistoryLock"
"axlGetHistoryLock( 
x_historyHandle 
) 
=> t / nil"
"Returns the lock status of the given history. When a history item is locked, the corresponding setup details and results cannot be deleted.")
("axlGetHistoryName"
"axlGetHistoryName( 
x_historyEntry 
) 
=> t_historyName / nil"
"Returns the name of the history item that holds the data for the latest simulation run.")
("axlGetHistoryOutputs"
"axlGetHistoryOutputs( 
t_sessionName 
x_historyEntry 
?testName x_testName ) 

=> l_outputStructures / nil"
"Returns a list of output structures for the given history and test. If the test name is not given, returns a list of all outputs from the given history. If a session with the given history is not already created, this function opens the history and creates that session too.")
("axlGetHistoryPrefix"
"axlGetHistoryPrefix( 
x_sessionName 
) 
=> t_historyPrefix / nil"
"Returns the current history prefix value from the given session. The prefix value depends on the run mode selected in the session.")
("axlGetHistoryResults"
"axlGetHistoryResults( 
x_history 
) 
=> t_results / nil"
"Gets the results database from a history entry. This function calls axlGetResultsLocation to get the results location.")
("axlGetOverwriteHistory"
"axlGetOverwriteHistory(
x_history
)
=> t / nil"
"Returns a Boolean value specifying the status of the Overwrite History check box in the Save Options form for the active setup.")
("axlGetOverwriteHistoryName"
"axlGetOverwriteHistoryName(
x_setup
)
=> t_historyName / nil"
"Returns the name of the history that is set to be overwritten for the active setup.")
("axlLoadHistory"
"axlLoadHistory( 
x_to 
x_from 
) 
=> x_hsdb / nil"
"Copies the setup database branch and returns the handle to the copy.")
("axlSetHistoryLock"
"axlSetHistoryLock( 
x_handleHistory 
g_enable
) 
=> t / nil"
"Locks the specified checkpoint history. After it is locked, you cannot delete the history or the simulation data saved for it.")
("axlSetHistoryName"
"axlSetHistoryName ( 
x_historyHandle 
t_newHistoryName
) 
=> t / nil"
"Sets a new name for the specified history.")
("axlSetHistoryPrefixInPreRunTrigger "
"axlSetHistoryPrefixInPreRunTrigger ( 
t_session 
t_historyPrefix
) 
=> t_historyPrefix / nil"
"Sets a prefix to be used in the history name for a new run.")
("axlSetOverwriteHistory"
"axlSetOverwriteHistory(
x_setup
g_overwriteStatus
)
=> t / nil"
"Enables or disables the Overwrite History check box in the Save Options form for the active setup.")
("axlSetOverwriteHistoryName"
"axlSetOverwriteHistoryName(
x_setup
t_overwriteHistoryName
)
=>t / nil"
"Sets the name of the history to be overwritten for the specified active setup.")
("axlOpenResDB"
"axlOpenResDB( 
t_fileName 
) 
=> o_obj / nil"
"Opens the database file specified by t_fileName. If the file does not exist, it is created.")
("axlPutHistoryEntry"
"axlPutHistoryEntry( 
x_hsdb 
t_historyName 
) 
=> x_history / nil"
"Inserts or finds a history entry in the setup database and returns a handle to that entry.")
("axlReEvaluateHistory"
"axlReEvaluateHistory( 
t_sessionName 
x_historyHandle
S_mode
) 
=> t / nil"
"Re-evaluates the history in the specified mode with respect to the active setup for a given session.")
("axlRemoveSimulationResults"
"axlRemoveSimulationResults(
x_historySDB
)
=> t / nil"
"Removes the simulation results data for the given history. The function removes only the results saved by the simulator. The results database and the history item is not removed.")
("axlRestoreHistory"
"axlRestoreHistory(
t_session
x_historyEntry
)
=> t"
"Sets the given history as the active setup in the given session.")
("axlViewHistoryResults"
"axlViewHistoryResults(
t_session
x_hsdb
)
=> t"
"Display the results for the specified history item on the Results tab of the given session.")
("axlWriteMonteCarloResultsCSV"
"axlWriteMonteCarloResultsCSV
t_session
t_historyName
[ ?testName t_testName ]
[ ?cornerName t_cornerName ]
[ ?outputName t_outputPath ]
)
=> t / nil"
"Writes the results of the given Monte Carlo run history in CSV format. The tool saves the results for each corner in a separate CSV file.")
("axlAddJobPolicy"
"axlAddJobPolicy( 
t_jobPolicyName 
t_selectedPath
l_jobPolicyProperties
) 
=> t / nil"
"Adds or saves a job policy at the specified location.")
("axlAttachJobPolicy"
"axlAttachJobPolicy( 
t_sessionName
t_jobPolicyName
t_toolName
l_jobPolicyProperties 
[ t_testName ]
) 
=> t / nil"
"Adds and attaches a job policy to the setup.")
("axlDeleteJobPolicy"
"axlDeleteJobPolicy( 
t_jobPolicyName 
) 
=> t / nil"
"Deletes the named job policy from the setup.")
("axlDetachJobPolicy"
"axlDetachJobPolicy(
t_sessionName
t_jobType
t_testName
=> t / nil"
"Detaches a job policy from the specified test.")
("axlJobIntfcDebugPrintf"
"axlJobIntfcDebugPrintf(
t_formatString
[g_arg1 ... g_argn]
)
=> t / nil"
"Formats and writes output to the log if interface debugging is enabled.")
("axlJobIntfcDebugToFile"
"axlJobIntfcDebugToFile(
t_file_name
)
=> t / nil"
"Enables the interface job debugging and sets the output to a file.")
("axlJobIntfcDebugp"
"axlJobIntfcDebugp(
)
=> t / nil"
"Specifies whether interface debugging is enabled.")
("axlJobIntfcExitMethod"
"axlJobIntfcExitMethod(
g_inst
)
=> t / nil"
"Job Interface member function used to exit a job. The application usually attempts to call exit(0) on remote job cleanup the job's resources properly. However, if this fails or if the tool is forced to kill all jobs, the exit method will be called on every remote job. This method may be called after the job has already exited. This job can also be called multiple times.")
("axlJobIntfcHealthMethod"
"axlJobIntfcHealthMethod(
g_inst
S_currentHealth
)
=> S_newHealth"
"Job Interface member function used to return the current health of the job. The application calls this function regularly (currently, every 5 seconds) on each job in order to recognize health changes. The available health types are: unknown, alive, or dead.")
("axlJobIntfcSetDebug"
"axlJobIntfcSetDebug(
g_enable
)
=> t / nil"
"Enables or disables printing of the job interface diagnostics to the CIW.")
("axlJobIntfcStartJobArrayMethod"
"axlJobIntfcStartJobArrayMethod(
g_inst
x_startIndex
x_endIndex
)
=> t / nil"
"Job interface member function to start a job array where the job IDs are set between the range of the specified start and end indexes for the array. For example, if the start and end indexes are set to 4 and 10 respectively, the jobs with IDs 4, 5, 6, 7, 8, 9, and 10 would be launched.")
("axlJobIntfcStartMethod"
"axlJobIntfcStartMethod(
g_inst
)
=> t / nil"
"Job Interface member function to start a job. For each new job ID, a new instance of the selected interface class will be created. After some basic properties are set on the instance, it will be passed to the start method of the class.")
("axlJPGUICustDiffer"
"axlJPGUICustDiffer(
g_inst
l_propList1
l_propList2
)
=> t / nil"
"Job Policy GUI Customization member function that determines whether l_propList1 and l_propList2 differ. The Job Policy GUI uses this method to determine if the GUI settings differ from those already attached to the tool.")
("axlJPGUICustHiddenSections"
"axlJPGUICustHiddenSections(
g_inst
)
=> l_hiddenSections"
"Job Policy GUI Customization member function that returns a list of sections or fields to be hidden from the Job Policy Setup form.")
("axlJPGUICustHIFields"
"axlJPGUICustHIFields(
g_inst
x_offset
)
=> l_fields"
"Job Policy GUI Customization member function to create the HI field displayed for a particular JP GUI customization. The Job Policy GUI calls this method once during initialization. If no customizations are desired, the function does not need to be specialized.")
("axlJPGUICustOffset"
"axlJPGUICustOffset(
g_inst
)
=> x_offset"
"Job policy GUI customization member function to return the y size of the HI field customizations provided with the axlJPGUICustHIFields method. The value is obtained by adding 10 to the y position of the last HI element. The Job Policy form uses this value as the y offset for the form elements underneath the customization area.")
("axlJPGUICusReadFromForm"
"axlJPGUICustReadFromForm(
g_inst
g_form
l_dataDpl
)
=> nil"
"Job Policy GUI Customization member function to read any HI customization into a property list that will be saved as a job policy.")
("axlJPGUICustSelected"
"axlJPGUICustSelected(
g_inst
g_form
g_enabled
)
=> nil"
"Job Policy GUI Customization member function to enable or disable any HI customizations. The Job Policy GUI calls this function every time the job policy type is changed.")
("axlRegisterJobIntfc"
"axlRegisterJobIntfc(
s_displayName
s_className
[ ?isInitializedFun u_isInitFun ]
[ ?displayInGUI g_shouldDisplay ]
)
=> t"
"Registers a job interface class into the application. Job interfaces should be registered before use, preferably during virtuoso initialization.")
("axlJPGUICustWriteToForm"
"axlJPGUICustWriteToForm(
g_inst
g_form
l_dataDpl
)
=> nil"
"Job Policy GUI Customization member function to load a property list that is saved as a job policy into HI customizations.")
("axlRegisteredJobIntfcNames"
"axlRegisteredJobIntfcNames(
)
=> l_names / nil"
"Retrieves the registered job interfaces.")
("axlRegisteredJPGUICust"
"axlRegisteredJPGUICust(
S_name
g_inst
)
=> t"
"Job Policy GUI Customization member function to register a customization into the Job Policy Setup form. Any registered customizations will appear the next time the job policy Setup form is displayed.")
("axlGetAttachedJobPolicy"
"axlGetAttachedJobPolicy( 
[ t_sessionName ]
[ t_toolType ]
[ t_testName ]
) 
=> l_jobPolicyProperties / nil"
"Returns the current job policy attached to the setup or to the given test.")
("axlGetJobPolicy"
"axlGetJobPolicy( 
t_jobPolicyName 
) 
=> l_jobPolicyProperties / nil"
"Returns a disembodied property list containing property-value pairs for the job policy.")
("axlGetJobPolicyTypes"
"axlGetJobPolicyTypes( 
) 
=> l_jobPolicyNames / nil"
"Returns a list containing names of all available job policies.")
("axlIsICRPProcess"
"axlIsICRPProcess( 
) 
=> t / nil"
"Returns t if the code is currently running in a remote child process for the tool. You can use this function in your .cdsinit file or in custom SKILL code.")
("axlSaveJobPolicy"
"axlSaveJobPolicy( 
t_policyName
[t_targetDirectory]
) 
=> t / nil"
"Saves the policy given by the t_policyName argument.")
("axlSetJobPolicyProperty"
"axlSetJobPolicyProperty( 
t_jobPolicyName 
t_jobPropertyName 
t_jobPropertyValue 
) 
=> t / nil"
"Sets a property name-value pair for the specified job policy. You can use this function to update the properties of an existing policy. To apply the updated properties to all the sessions, set the updated policy as the default policy for the tool by using the defaultJobPolicy environment variable.")
("axlStopAllJobs"
"axlStopAllJobs( 
[ t_sessionName ]
[ g_forceFlag ]
) 
=> t / nil"
"Stops all jobs you started during the current or specified session, regardless of their state (started, getting configured, running)")
("axlStopJob"
"axlStopJob( 
t_sessionName
x_jobId
[ g_forceFlag ]
) 
=> t / nil"
"Stops a job.")
("maeClearAllTestJobPolicies"
"maeClearAllTestJobPolicies(
[ ?session t_sessionName ]
)
=> t / nil"
"Clears the test-level job policy setup for each test in the setup. The job policy setup at the global level is not removed.")
("maeClearTestJobPolicy"
"maeClearTestJobPolicy(
t_testName
[ ?session t_sessionName ]
)
=> t / nil"
"Clears the job setup of a given test and applies the global job setup.")
("maeCreateNetlistForCorner"
"maeCreateNetlistForCorner(
t_testName
t_cornerName 
t_netlistDir
[ ?session t_session ]
)
=> t / nil"
"Generates a netlist for the specified corner. In case the setup contains a corner sweep, the netlist will be created for the first sweep point of the specified corner.")
("maeGetAllJobPolicies"
"maeGetAllJobPolicies()
=> l_jobPolicyNames / nil"
"Returns the job policies of all the tests in the specified session.")
("maeGetJobControlMode"
"maeGetJobControlMode(
[ ?session t_sessionName ]
)
=> t_controlMode / nil"
"Returns the job control mode currently set in the given session.")
("maeGetJobPolicy"
"maeGetJobPolicy(
[ ?session t_sessionName ]
[ ?testName t_testName ]
[ ?jobType t_jobType ]
)
=> l_jobPolicyProperties / nil"
"Returns the details of the job policy attached to the given test. If no test name is given, the function returns the policy attached to the current setup.")
("maeGetJobPolicyByName"
"maeGetJobPolicyByName(
t_policyName
[ ?session t_sessionName ]
)
=> l_jobPolicyProperties / nil"
"Returns a disembodied property list containing property-value pairs for the given job policy.")
("maeHasTestJobPolicy"
"maeHasTestJobPolicy(
t_testName
[ ?session t_sessionName ]
)
=> t / nil"
"Checks if the given test has a test-specific job policy setup.")
("maeIsEvaluatorProcess"
"maeIsEvaluatorProcess(
[ ?session t_session ]
)
=> t / nil"
"Returns t if currently the expression evaluator service process is running for ADE Assembler or ADE Explorer. You can use this function in your .cdsinit file or in custom SKILL code.")
("maeIsNetlistProcess"
"maeIsNetlistProcess(
[ ?session t_session ]
)
=> t / nil"
"Returns t if currently the netlister service process is running for ADE Assembler or ADE Explorer. You can use this function in your .cdsinit file or in custom SKILL code.")
("maeSetJobControlMode"
"maeSetJobControlMode
t_mode(
[ ?session t_sessionName ]
)
=> t / nil"
"Sets the job control mode in the given session.")
("maeSetJobPolicy"
"maeSetJobPolicy (
g_jobPolicyDPL
[ ?testName t_testName ]
[ ?jobType t_jobType ]
[ ?session t_sessionName ] 
)
=> t / nil"
"Sets the given job policy to the specified setup for the given test.")
("maeStopAllJobs"
"maeStopAllJobs(
[ ?session t_sessionName ]
[ ?jobType t_jobType ]
[ ?force g_force ]
[ ?exitCode t_exitCode ]
)
=> t / nil"
"Stops all the simulation or netlisting jobs you started during the current session regardless of their state (started, getting configured, running).")
("maeStopJob"
"maeStopJob(
[ ?session t_sessionName ]
[ ?jobType t_jobType ]
[ ?force g_force ]
[ ?exitCode t_exitCode ]
)
=> t / nil"
"Stops the job for the specified job ID regardless of its state.")
("asiInit<yourSimulator>"
"asiInit<yourSimulator>( 
o_tool 
) 
=> t"
"Calls the procedures to initialize your simulator's environment. This function must be defined for socket interfaces. Do not use it for direct interfaces.")
("asiRegisterTool"
"asiRegisterTool(
'<simulatorName>
[ ?class			s_className ]
[ ?private			s_private ]
[ ?initFunc			s_initFunc ]
[ ?mixedSig			s_mixedSig ]
)
=> t"
"Registers your simulator and your initialization function. ")
("asiInitDataAccessFunction"
"asiInitDataAccessFunction( 
o_tool 
) 
=> t / nil"
"Initializes the data access function for the tool. This function can be used by a third-party integrator to define their own data access functions.")
("asiInitEnvOption"
"asiInitEnvOption( 
o_tool 
) 
=> t / nil"
"Initializes the tool-specific environment options for the tools that are derived from the asiAnalog class. This is not applicable for tools derived from the asiSocket class. This function can be used by third-party integrators to define their own environment options.")
("asiInitAnalysis"
"asiInitAnalysis( 
o_tool 
) 
=> t / nil"
"Initializes the tool-specific analysis options for the tools that are derived from the asiAnalog class. This is not applicable for tools derived from the asiSocket class. This function can be used by third-party integrators to define their own analysis options.")
("asiInitAdvAnalysis"
"asiInitAdvAnalysis( 
o_tool 
)
=> t / nil"
"Initializes the tool-specific analysis options for the tools derived from the asiAnalog class. This method can be used by third-party integrators to define their own analysis options in ADE XL.")
("asiInitSimOption"
"asiInitSimOption( 
o_tool 
) 
=> t / nil"
"Initializes the simulation options for the tools that are derived from the asiAnalog class. This is not applicable for tools derived from the asiSocket class. This function can be used by third-party integrators to define their own simulation options.")
("asiGetPageCallBack"
"asiGetPageCallBack(
o_obj
)
=> s_func / nil"
"Returns the callback function name when changing tabs in a form.")
("asiSetPageCallBack"
"asiSetPageCallBack(
o_obj
s_func
)
=> t/ nil"
"Returns the status (whether successful or failed) of the specified callback function, when changing tabs in a form.")
("asiGetNetlistFormatterClass"
"asiGetNetlistFormatterClass( 
o_tool 
) 
=> s_class / nil"
"Returns the netlist formatter class for the specified tool.")
("asiSetNetlistFormatterClass"
"asiSetNetlistFormatterClass( 
o_tool 
s_class 
) 
=> s_class"
"Registers the netlist formatter class with the tool. This function is normally called from the asiInitFormatter method and should be defined for the interface.")
("asiCreateFormatter"
"asiCreateFormatter( 
o_session 
) 
=> o_formatter"
"Creates a design object with the nlCreateDesign call, using the information on the OASIS session. Subsequently, the formatter is created with a call to nlCreateFormatter, using the information on the session. The formatter is added to the session and can be obtained with asiGetFormatter. This is a convenience function that you cannot redefine, and the interface should not call it.")
("asiCreateCdsenvFile"
"asiCreateCdsenvFile( 
s_toolName 
) 
=> t / nil"
"Creates a .cdsenv file for the specified tool and dumps it to the current working directory. This is meant as a development utility for integrators only.")
("asiGetFormatter"
"asiGetFormatter( 
o_session 
) 
=> o_formatter / nil"
"Returns the formatter created with the last asiCreateFormatter call. This is a convenience function that you should not redefine and the interface should not call.")
("asiGetSimInputFileName"
"asiGetSimInputFileName( 
o_session 
) 
=> t_name"
"Returns the name of the simulator input file. For the asiAnalog_session class, this is input followed by the return value of asiGetSimInputFileSuffix.")
("asiGetSimInputFileSuffix"
"asiGetSimInputFileSuffix( 
o_session 
)
=> t_name"
"Returns the suffix used for the simulator input file. This method can be redefined, and must return a string, or a SKILL error will result.")
("nlGetNetlister"
"nlGetNetlister(
o_formatter
) 
=> o_netlister"
"Returns an object representing the netlister.")
("nlGetPCellParamSource"
"nlGetPCellParamSource( 
o_cellView 
l_parameters 
)
=> l_BooleanValues / nil"
"Identifies the source of value of the Pcell parameters of the given cellview.")
("nlGetScratchInstance"
"nlGetScratchInstance(
t_libName
t_cellName
t_viewName
t_instanceName
)
=> d_databaseID / nil"
"Returns the database ID of the scratch instance to be used for Pcell evaluations.")
("nlGetScratchInstPcellParamValue"
"nlGetScratchInstPcellParamValue(
t_instID
t_paramName
)
=> t_value / nil"
"Returns the parameter value of the scratch instance to be used for Pcell evaluations.")
("nlGetSwitchMaster"
"nlGetSwitchMaster(
t_libName
t_cellName
t_viewName
t_instanceName
t_deviceParamName
)
=> d_databaseID / nil"
"Returns the database ID of the switch master.")
("nlGetToolName"
"nlGetToolName( 
o_formatter 
) 
=> s_toolName"
"Returns a symbol representing the simulator. It returns the value of the tool name. This name is used for the selection of the simulator information on the library component.")
("nlInitialize"
"nlInitialize( 
o_formatter 
) 
=> o_formatter / nil"
"For the nlFormatter class, this method initializes the netlister. This method can be redefined for the simulator-specific netlister and is called by nlCreateFormatter. This method initializes all simulator-specific aspects of netlisting such as name mapping. For the nlAnalogFormatter class, this method sets a number of netlist options. These options and their values are shown in the table below.")
("nlPrintHeader"
"nlPrintHeader( 
o_formatter 
) 
=> t / nil"
"This method writes the beginning comment, adds .GLOBAL, and prints header comments.")
("nlIncludePspiceFile"
"nlIncludePspiceFile( 
o_formatter 
t_fileName 
t_masterName
) 
=> t / nil"
"Prints the include statement for pspice cellviews in the design. This function is called before printing the footer for the netlist for all pspice modules. If your simulator does not support pspice views, call nlError function in this method.")
("nlIncludeVerilogaFile"
"nlIncludeVerilogaFile( 
o_formatter 
t_filename 
t_master
) 
=> t / nil"
"Prints the include statement for Verilog-a cell views in the design. This is called before printing the footer for the netlist for all Verilog-a modules. If your simulator does not support Verilog-a views, call nlError in this method.")
("nlIncludeVerilogFile"
"nlIncludeVerilogFile( 
o_formatter 
t_filename 
t_master
) 
=> t / nil"
"Prints the include statement for Verilog type text cell view in the design. This is called before printing the footer for the netlist for all Verilog text cell views. If your simulator does not support Verilog-a views, call nlError in this method.")
("nlIncludeDbDSPFTextFile"
"nlIncludeDbDSPFTextFile(
o_formatter
t_filename
t_master
)
=> t / nil"
"Prints the dspf_include statement for the DSPF type text cellview in the design.")
("nlIncludeDbSPICEMODELTextFile"
"nlIncludeDbSPICEMODELTextFile(
o_formatter
t_filename
)
=> t / nil"
"Prints the include statement for SPICEMODEL cellviews in the design. This function is called before printing the footer for the netlist for all SPICEMODEL modules. If your simulator does not support SPICEMODEL views, call the nlError function in this method.")
("nlIsPcellInstance"
"nlIsPcellInstance(
t_libName
t_cellName
t_viewName
t_instanceName
)
=> t / nil"
"Checks if the specified instance name represents a schematic Pcell instance.")
("nlIsPcellParam"
"nlIsPcellParam(
t_libName
t_cellName
t_viewName
t_instanceName
t_deviceParamName
)
=> t / nil"
"Checks if the specified device parameter represents a Pcell parameter.")
("nlIsSmartExtractedView"
"nlIsSmartExtractedView(
o_cellViewHandle
) 
=> t / nil"
"Identifies if the currently netlisted cellview is of the type smart_view. You can use this function in custom netlist procedures to modify the syntax printed to the netlist as required. For example, you can modify the syntax to determine if the printing of parenthesis needs to be enabled or disabled when printing the port connections of the instance.")
("nlPrintFooter"
"nlPrintFooter( 
o_formatter 
) 
=> t / nil"
"This method is called at the end of netlisting. It does not print anything at the end of the netlist for the nlAnalogFormatter class.")
("nlPrintSubcktHeaderComments"
"nlPrintSubcktHeaderComments( 
o_formatter 
o_cellView 
) 
=> t"
"Prints the comments for the subcircuit header and the mapping information when the printSubcktComments option is set.")
("nlPrintTopCellHeaderComments"
"nlPrintTopCellHeaderComments( 
o_formatter 
o_cellView 
) 
=> t"
"Calls nlPrintSubcktHeaderComments for the nlAnalogFormatter class.")
("nlPrintTopCellFooterComments"
"nlPrintTopCellFooterComments( 
o_formatter 
o_cellView 
) 
=> t"
"Returns t at the analogFormatter level.")
("nlPrintTopCellHeader"
"nlPrintTopCellHeader( 
o_formatter 
o_cellView 
) 
=> t / nil"
"Prints the header of the top-level circuit by calling nlPrintTopCellHeaderComments.")
("nlPrintTopCellFooter"
"nlPrintTopCellFooter( 
o_formatter 
o_cellView 
) 
=> t / nil"
"Writes the top cell view footer. This function prints an empty line and calls nlPrintTopCellFooterComments.")
("nlPrintSubcktHeader"
"nlPrintSubcktHeader( 
o_formatter 
o_cellView 
) 
=> t / nil"
"Writes the header for a subcircuit following these steps: prints comments by calling nlPrintSubcktHeaderComments; prints the subckt begin keyword by calling nlPrintSubcktBegin; prints the subckt name by calling nlPrintSubcktName; prints the subckt terminal list by calling nlPrintSubcktTerminalList.")
("nlPrintSubcktFooter"
"nlPrintSubcktFooter( 
o_formatter 
o_cellView 
) 
=> t / nil"
"Writes the footer for the subcircuit. For the nlAnalogFormatter class, it prints .ends.")
("nlPrintSubcktFooterComments"
"nlPrintSubcktFooterComments( 
o_formatter 
o_cellView 
) 
=> t"
"Prints the comments for the subcircuit footer by printing the string 'End of subcircuit definition.' preceded by the comment begin string.")
("nlPrintInstComments"
"nlPrintInstComments( 
o_formatter 
o_instance 
) 
=> t"
"Prints the comments for an instance.")
("nlPrintInst"
"nlPrintInst( 
o_formatter 
o_instance 
) 
=> t / nil"
"Prints the netlist statement for an instance. This is the default netlist procedure for a component.")
("nlPrintInstEnd"
"nlPrintInstEnd( 
o_formatter 
o_instance 
) 
=> t / nil"
"Prints the end of the instance statement, which is a return (\n). This method is called by the netlister after the netlist procedure or by nlPrintInst.")
("nlPrintSubcktBegin"
"nlPrintSubcktBegin( 
o_formatter 
o_cellView 
) 
=> t / nil"
"Prints the .subckt keyword for the nlAnalogFormatter class. This method is called by nlSubcktHeader.")
("nlPrintSubcktName"
"nlPrintSubcktName( 
o_formatter 
o_cellView 
) 
=> t / nil"
"Prints a space and the simulator name of the subcircuit. This method is used by nlSubcktHeader.")
("nlPrintSubcktEnd"
"nlPrintSubcktEnd( 
o_formatter 
o_cellView 
) 
=> t / nil"
"For the nlAnalogFormatter class, prints the .ends keyword, followed by a space and the simulator name of the subcircuit, to mark the end of the subcircuit definition. It is called by nlPrintSubcktFooter.")
("nlPrintHeaderComments"
"nlPrintHeaderComments( 
o_formatter 
) 
=> t / nil"
"Prints the comments for the netlist file, including the library, cell, and view names of the top-level cellview of the design netlisted. This method only has effect when the printFileComments netlist option is set.")
("nlPrintSubcktParameters"
"nlPrintSubcktParameters( 
o_formatter 
o_cellView 
) 
=> t / nil"
"Prints the passed parameters for the subcircuit definition.")
("nlPrintSubcktTerminalList"
"nlPrintSubcktTerminalList( 
o_formatter 
o_cellView 
) 
=> t / nil"
"Prints the simulator names of the signals connected to the terminals for a subcircuit definition and handles the signals resulting from inherited connections at a lower level .")
("nlPrintInstName"
"nlPrintInstName( 
o_formatter 
o_instance 
) 
=> t / nil"
"Prints the simulator name of the instance, taking the instance name prefix specified on the component into account when the simulator so requires. This is determined with the useInstNamePrefix netlist option.")
("nlPrintInstSignals"
"nlPrintInstSignals( 
o_formatter 
o_instance 
) 
=> t / nil"
"Prints the simulator names of the signals according to the terminal order specified on the component, using the nlGetSignalList method of the instance.")
("nlPrintModelName"
"nlPrintModelName( 
o_formatter 
o_instance 
) 
=> t / nil"
"Prints the model name. The nlGetModelName for the instance is used for the model name.")
("nlPrintInstParameters"
"nlPrintInstParameters( 
o_formatter 
o_instance 
) 
=> t / nil"
"Prints the instance parameters in name=value pairs.")
("nlError"
"nlError( 
o_netlister 
t_error 
) 
=> nil"
"Issues a user error. The error is printed immediately and it is collected on the object. In this way, if netlisting is interrupted, the user is aware of any errors that occurred during netlisting. All errors are printed to the netlist log file.")
("nlObjError"
"nlObjError( 
o_netlister 
o_object 
t_error 
) 
=> nil"
"Similar to nlError, but prints a description of the object along with the error message. The description includes the library name, the cell name, the view name, and the instance name in case the object is an instance.")
("nlGetDesign"
"nlGetDesign( 
o_netlister 
) 
=> o_design"
"Returns the design object.")
("nlGetGlobalNets"
"nlGetGlobalNets( 
o_netlister 
) 
=> l_globalNets"
"Returns a list of global nets. This method should only be used in the nlPrintHeader method of the formatter.")
("nlGetNetlistDir"
"nlGetNetlistDir( 
o_netlister 
) 
=> t_netlistDir"
"Returns the netlist directory.")
("nlDisplayOption"
"nlDisplayOption( 
o_netlister 
) 
=> t"
"Prints the option names available on this object along with their values.")
("nlGetCurrentSwitchMaster"
"nlGetCurrentSwitchMaster( 
o_netlister 
) 
=> S_id"
"This function returns the database ID for the current switch master for the instance in hierarchical incremental netlisting. This function should only be used while printing the instance statement. Avoid using this function if possible.")
("nlGetNetlistedStopCellViewList"
"nlGetNetlistedStopCellViewList( 
o_netlister 
) 
=> l_cellView"
"Returns a list of cellview objects treated as stop cells for the specified netlister object.")
("nlGetOption"
"nlGetOption( 
o_netlister 
s_name 
) 
=> g_value"
"Returns the value of the option.")
("nlGetOptionNameList"
"nlGetOptionNameList( 
o_netlister 
) 
=> l_names"
"Returns a list of option names available on this object.")
("nlMapGlobalNet"
"nlMapGlobalNet( 
o_netlister
t_net 
) 
=> t_map"
"Maps a global net (signal) to the simulator name. This should only be used in the nlPrintHeader method of the formatter. Use at any other time is an error.")
("nlInfo"
"nlInfo( 
o_netlister 
t_info 
[ g_arg ... ]
) 
=> t"
"Sends an informational message to the calling application.")
("nlSetOption"
"nlSetOption( 
o_netlister 
s_option 
g_value 
) 
=> t / nil"
"Sets an option value.")
("nlWarning"
"nlWarning( 
o_netlister 
t_warning 
[ g_arg ... ] 
) 
=> t"
"Issue a warning to the user.")
("nlPrintComment"
"nlPrintComment( 
o_netlister 
[ t_arg1 t_arg2 ... ] 
) 
=> t / nil"
"Prints a comment.")
("nlPrintIndentString"
"nlPrintIndentString( 
o_netlister 
) 
=> t / nil"
"Prints the indent string for the instance statement. When inside the top-level circuit, the empty string is printed. When inside subcircuit definitions, the value of the subcktIndentString netlist option is printed.")
("nlPrintString"
"nlPrintString( 
o_netlister, 
[ @rest t_args ]
) 
=> t / nil"
"Prints the string arguments to the file. This function does the required line folding, prefixing, and, postfixing.")
("nlPrintStringNoFold"
"nlPrintStringNoFold( 
o_netlister, 
[ @rest t_args ]
)
=> t / nil"
"Prints the string arguments to the file, like the function nlPrintString. This function does the required prefixing and postfixing, but does not fold the line until a newline character or maxLineLength is encountered. While in a 'no fold' print mode, calls cannot be made to nlPrintString.")
("nlIsModelNameInherited"
"nlIsModelNameInherited( 
o_instance 
) 
=> t / nil"
"Returns t if the model name for the stopping instance is passed through the hierarchy through parameters.")
("nlGetFormatter"
"nlGetFormatter( 
o_instance 
) 
=> o_formatter"
"Returns the formatter.")
("nlGetSimName"
"nlGetSimName( 
o_instance 
) 
=> t_name"
"If the input type is cellview object, then returns the simulator name of the subcircuit. If the input type is instance object, then returns the mapped name of the instance. The name returned depends on the useInstNamePrefix netlist option. When it is not set, the name prefix is not taken into account. However, for instances representing interface elements, the name prefix is always taken into account. No mapping is performed for interface elements.")
("nlGetSignalList"
"nlGetSignalList( 
o_instance 
) 
=> l_signals"
"Returns a list of mapped signal names for the instance according to the terminal order specified for the cellview.")
("nlGetTerminalList"
"nlGetTerminalList( 
o_instance 
) 
=> l_terminals"
"Returns a list of terminal names in the order specified on the pin order property on the schematic, or on the termOrder property on the CDF, or on the cellview of the instance, in that order.")
("nlGetTerminalSignalName"
"nlGetTerminalSignalName( 
o_instance 
t_terminal 
[ x_bit ] 
) 
=> t_signal"
"Returns the name of the signal connected to the terminal.")
("nlGetNumberOfBits"
"nlGetNumberOfBits( 
o_instance 
t_terminal 
) 
=> x_bits"
"Returns the number of bits on the instance and terminal specified.")
("nlGetModelName"
"nlGetModelName( 
o_instance 
) 
=> t_modelName"
"This method must be used to obtain the model name of an instance. Use of this method assures consistency in netlisting across interfaces. For instances that represent subcircuits, this method returns a name chosen by the netlister, using the modulePrefix netlist option.")
("nlGetParamList"
"nlGetParamList( 
o_instance 
)
=> l_parameters"
"Returns the list of parameters of the specified instance or cellview.")
("nlGetParamStringValue"
"nlGetParamStringValue( 
o_instance 
s_parameter 
) 
=> t_value / nil"
"Returns a string representing the parameter value for the instance and parameter name.")
("nlGetId"
"nlGetId( 
o_cellView 
) 
=> g_id"
"Returns the database ID for the instance. If the instance represents a cdba instance, this is a database ID.")
("nlIncludeSrcFile"
"nlIncludeSrcFile( 
o_formatter 
t_filename 
)
=> t / nil"
"Prints the include statement for instances bound to source files using Hierarchy Editor. This is called while printing the footer for the netlist for all the source files to which any instance in the design is bound. If your simulator does not support source file bindings, call nlError in this method.")
("nlPrintComments"
"nlPrintComments( 
o_instance 
) 
=> t"
"Prints the comments for the instance being netlisted.")
("nlGetCellName"
"nlGetCellName(
o_inst
)
=> t_cellName"
"Gets the cell name of the specified instance.")
("nlGetLibName"
"nlGetLibName(
o_inst
)
=> t_libName"
"Gets the library name of the specified instance.")
("nlGetSimTerminalNets"
"nlGetSimTerminalNets( 
o_cellView 
) 
=> l_signals"
"Returns the list of mapped names of signals connecting to the terminals of the cellview based on the terminal order specified for the cellview. Several signals may come from inherited connections.  Signal buses are handled in scalar form.")
("nlGetTerminalNets"
"nlGetTerminalNets( 
o_cellView 
) 
=> l_signals"
"Returns the schematic names of the signals connected to the terminals. Many of the signals may come from inherited connections.")
("nlGetSwitchViewList"
"nlGetSwitchViewList( 
o_cellView 
) 
=> l_switchViews"
"Returns the switch view list for the cellView.")
("nlGetViewName"
"nlGetViewName( 
o_cellView 
) 
=> t_cellViewName"
"Returns the view name of the specified cellview object.")
("nlGetTopLibName"
"nlGetTopLibName( 
o_design 
) 
=> t_topLibName"
"Returns the library name of the design.")
("nlGetTopCellName"
"nlGetTopCellName( 
o_design 
) 
=> t_topCellName"
"Returns the cell name of the design.")
("nlGetTopViewName"
"nlGetTopViewName( 
o_design 
) 
=> t_topViewName"
"Returns the view name of the design.")
("nlTranslateFlatIEPathName"
"nlTranslateFlatIEPathName(
o_formatter 
t_hierDelimiter 
t_iePathName
) 
=> t_iePathName"
"Parses a hierachical IE instance path and returns the path of the IE instance that is to be printed in the digital netlist.")
("nlSetPcellName"
"nlSetPcellName(
S_cv
t_paramNames
g_paramValues
)
=> t / nil"
"Define this function if the default generic OSS naming convention for Pcells needs to be customized.")
("ansCdlCompPrim"
"ansCdlCompPrim(
)"
"Enables printing of device information for primitives in the auCdl netlist. Specify this function as a netlist procedure in the CDF for the primitive devices for which you want the device information to be printed in the auCdl netlist.")
("ansCdlHnlPrintInst"
"ansCdlHnlPrintInst(
)"
"Customizes how device information is written in the auCdl netlist. Specify this function as a netlist procedure in the CDF for the devices for which you want to customize the device information in the auCdl netlist.")
("ansCdlPrintString"
"ansCdlPrintString(
&_fp 
S_inst 
S_master 
S_parent
)"
"Prints comment strings in the device information for instances in the auCdl netlist. To print comment strings in the device information, you must also use the 'string argument in the auCdlInstPrintOrder variable defined in the .simrc file. For more information about the auCdlInstPrintOrder variable, see the Virtuoso ADE Explorer User Guide.")
("ansCdlPrintInheritedParams"
"ansCdlPrintInheritedParams(
&_fp 
l_pairList
)"
"Customizes how inherited parameters are written in the auCdl netlist.")
("ansCdlPrintInstParams"
"ansCdlPrintInstParams(
&_fp 
l_pairList
)"
"Customizes how instance parameters are written in the auCdl netlist.")
("ansCdlPrintInstProps"
"ansCdlPrintInstProps(
&_fp 
l_pairList
)"
"Enables printing of user-defined instance properties and also customizes the format in which the properties are printed in the netlist.")
("ansCdlPrintInstName"
"ansCdlPrintInstName(
&_fp 
t_prefix 
t_name 
t_mappedName 
g_isPrimitive 
S_inst 
S_master
)"
"Customizes how instance names are written in the auCdl netlist.")
("ansCdlPrintModelName"
"ansCdlPrintModelName(
&_fp 
g_isAPrimitive 
g_definedPropVal 
g_modelPropInstVal 
g_componentPropInstVal 
g_cdfModelName 
g_cdfComponentName
)"
"Customizes the order in which auCdl looks for model names for primitives and the format in which the model information is written in the netlist.")
("ansCdlPrintModuleName"
"ansCdlPrintModuleName(
&_fp 
g_isAPrimitive 
S_inst 
S_master 
S_parent 
t_appedModuleName
)"
"Customizes how module names are written in the auCdl netlist for subcircuits.")
("ansCdlPrintConnections"
"ansCdlPrintConnections(
&_fp 
l_connections
)"
"Customizes how the nets connected to a device are written in the auCdl netlist.")
("ansCdlGetSegmentConnections"
"ansCdlGetSegmentConnections( 
S_inst 
l_connectionPairs 
n_iterSeg 
n_iterMult 
n_numSegments 
n_multiplicityFactor 
t_segmentConnType 
n_netCount 
)"
"This function is used to customize the auCdl netlist when the ansCdlHnlPrintInst function is specified as a netlist procedure in the CDF for the device. It controls how connectivity information is written in the netlist for instances for which a multiplicity factor is specified using the m or M property. For example, if an instance with a connection list like ((termA netA) (termB netB)) has to be converted into two segments connected in series, the modified connection list for the first segment will be 
((termA netA) (termB tempnet_0)) and ((termA tempnet_0) (termB netB)) for the second segment. Define this function as a procedure in the .simrc file.")
("ansCdlPrintSwitchPCellInst"
"ansCdlPrintSwitchPCellInst( 
)"
"Writes the switch Pcell instance in the auCdl netlist based on the size and input values of the instance.")
("ansCdlPrintSwitchPCellInstParam"
"ansCdlPrintSwitchPCellInstParam(
&_fp
l_paramsNameValuePairList
)"
"Writes into the auCdl netlist the list of CDF parameters and values defined for switch Pcell instances.")
("ansCdlPrintSwitchPCellSubcktConn"
"ansCdlPrintSwitchPCellSubcktConn(
&_fp
l_connections
)"
"Writes into the auCdl netlist the switch Pcell connections specified by hnlSpecialPCellLibCell in the .simrc file.")
("ansCdlPrintSwitchPCellSubCircuit"
"ansCdlPrintSwitchPCellSubCircuit(
&_fp
)"
"Writes into the auCdl netlist the subckt definitions specified by hnlSpecialPCellLibCell in the .simrc file.")
("ansCdlGetSegmentInfo"
"ansCdlGetSegmentInfo( 
S_inst
S_master
S_parent
)
=> l_segment"
"This function is used to customize the auCdl netlist when the ansCdlHnlPrintInst function is specified as a netlist procedure in the CDF for the device. It returns the number of segments for an instance and the connection type (series, parallel, or user defined connection type name) between the segments. Define this function as a procedure in the .simrc file.")
("ansCdlGetSegmentInstParams"
"ansCdlGetSegmentInstParams( 
S_inst 
l_propsList 
n_iterSeg 
n_iterMult 
n_numSegments 
n_multiplicityFactor 
t_segmentConnType 
)
=> l_segment"
"Customizes the auCdl netlist when the ansCdlHnlPrintInst function is specified as a netlist procedure in the CDF for the device.")
("ansCdlGetSimPropValue"
"ansCdlGetSimPropValue ( 
t_propName 
)
=> t_propVal / nil"
"Returns the value of a specified property on the current instance being netlisted when the ansCdlHnlPrintInst function is specified as a netlist procedure in the CDF for the device.")
("ansCdlGetMultiplicity"
"ansCdlGetMultiplicity( 
S_inst 
S_master 
S_parent 
)
=> n_multiplicityFactor"
"Controls how multiplicity (converting an instance into multiple instances connected in parallel) is handled for an instance in the design when the ansCdlHnlPrintInst function is specified as a netlist procedure in the CDF for the master of the instance.")
("auCdl"
"auCdl(
)
=> t / nil"
"This function sets defaults of all the variables defined in si.env like preserveRES, shortRES as well as other global variables like cdlSimViewList, cdlPrintComments etc. The function also sets the list of functions and variables that must be unbound when environments(simulators) are changed.")
("acdlArtPrintIncludedNetlist"
"acdlArtPrintIncludedNetlist(
x_artOutfile_file_pointer 
t_filePath
) 
=> t_userSpecified"
"Controls how an included netlist is included in the main netlist file. This function can be overridden by user settings. If user-override is not specified, the included netlist is copied without any modification. However, if both acdlPrintIncludedNetlist and acdlArtPrintIncludedNetlist are defined, acdlPrintIncludedNetlist is called. acdlArtPrintIncludedNetlist is preferred because the file pointer is not closed and re-initialized.")
("acdlCurrentInstName"
"acdlCurrentInstName(
)
=> t_mappedInstName"
"Maps instance names during hierarchical or flat netlisting.")
("auLvs"
"auLvs(
)
=> t / nil"
"This is the primary function for LVS. It sets up all the actions needed to netlist the layout and schematics design as well as invoke LVS (for comparison) itself.")
("auProbeAddDevsForNet"
"auProbeAddDevsForNet(
)
=> t / nil"
"This procedure enables you to select nets using the cursor or by typing the names in the CIW to add probes for all devices connected to the selected net. The function displays the prompt, Point to net or enter net name in CIW. On pointing to the net or typing the net name in CIW, probes would be added on all the devices connected to the selected net.")
("LVS"
"LVS(
)
=> t / nil"
"This is the primary function for LVS. It sets up all the actions needed to netlist the layout and schematics design as well as invoke LVS itself.")
("hnlHspicePrintInstPropVal"
"hnlHspicePrintInstPropVal( 
t_propName 
) 
=> t_propVal / nil"
"This procedure returns the value of the property specified by propName if it exists on the current instance. If the value of this property has the syntax specifying an inherited value it returns the name of the property whose value is being inherited without the surrounding syntax.")
("hnlHspiceInstPropVal"
"hnlHspiceInstPropVal( 
l_paramList 
) 
=> t / nil"
"This procedure prints a list of property values to the netlist.")
("hnlHspicePrintInstPropEqVal"
"hnlHspicePrintInstPropEqVal( 
l_paramList 
) 
=> t / nil"
"This procedure prints a list of property values to the netlist. It is similar to the procedure hnlHspicePrintInstPropVal except that the property name and the symbol, = is included before the value.")
("hnlHspicePrintMOSfetModel"
"hnlHspicePrintMOSfetModel(
) 
=> t / nil"
"This function prints out the line for a MOSFET model.")
("hnlHspicePrintNMOSfetElement"
"hnlHspicePrintNMOSfetElement(
) 
=> t / nil"
"This function prints out the line for a n-MOSFET model.")
("asiDisplayNetlistOption"
"asiDisplayNetlistOption( 
o_tool 
) 
=> t / nil"
"Displays the current set of netlist options and values. Use this function only to determine which netlist options you can modify.")
("asiGetNetlistOption"
"asiGetNetlistOption(
{ o_session | o_tool }
s_name
)
=> g_value / nil"
"Gets the value of the specified netlist option. ")
("asiInit<yourSimulator>NetlistOption"
"asiInit<yourSimulator>NetlistOption( 
o_tool 
) 
=> t"
"Calls the procedures that modify your simulator's netlist options.")
("asiSetNetlistOption"
"asiSetNetlistOption( 
{ o_session | o_tool }
s_name
g_value
)
=> g_value / nil"
"Sets a netlisting option.")
("asiVerilogNetlistMoreCB"
"asiVerilogNetlistMoreCB(
) 
=> t"
"Displays the Verilog HNL Netlisting Option form.")
("asiGetDigitalNetlistFileName"
"asiGetDigitalNetlistFileName( 
o_session
) 
=> t_digitalNetlistFileName"
"Returns the digital netlist file name.")
("asiConstructDigitalNetlist"
"asiConstructDigitalNetlist( 
o_session
) 
=> t / nil"
"Constructs the digital netlist file for viewing.")
("asiInitializeNetlisterMixed"
"asiInitializeNetlisterMixed(
o_session 
) 
=> t_mixedSignalDesignObject / nil"
"Initializes the mixed-signal netlister. Partitions the design and then calls nlCreateDesign to get the design object. Does not re-partition if the design has not changed since last partition.")
("asiNetlistMixed"
"asiNetlistMixed( 
o_session 
) 
=> g_status / nil"
"This method performs mixed netlisting. It creates a formatter object with nlCreateFormatter, after which the netlister is run and a netlist is generated with nlNetlist.")
("asiGetVerilogCommandLineOption"
"asiGetVerilogCommandLineOption( 
o_session 
) 
=> t_verilogCommandLineOption"
"Returns the Verilog simulator command line options.")
("asiGetDigitalCommandLineOption"
"asiGetDigitalCommandLineOption( 
o_session 
) 
=> t_digitalCommandLineOption"
"Returns the digital part of the mixed simulation command line options.")
("asiPrepareDigitalSimulation"
"asiPrepareDigitalSimulation( 
o_session
) 
=> t / nil"
"Performs digital run directory clean up. It removes the file that stores the exit code for any previous digital simulation and cleans up the digital simulator old log file.")
("asiCheckDigitalSimulationSuccess"
"asiCheckDigitalSimulationSuccess( 
o_session
) 
=> t / nil"
"Reports the success or failure of the simulation by looking at the digital simulator status file. Further, if no digital signals are saved by the user, this function updates the logFileVerilog file to indicate that no digital waveforms are available for viewing.")
("asiGetNetworkId"
"asiGetNetworkId(
o_session 
) 
=> o_networkId"
"Returns the network ID of a mixed-signal design.")
("asiGetDigitalStimulusFileName"
"asiGetDigitalStimulusFileName( 
o_session
) 
=> t_digitalStimulusFileName"
"Returns the digital stimulus file name. This file name is the concatenated path string of the digital netlist run directory followed by testfixture.verimix.")
("asiEditDigitalStimulus"
"asiEditDigitalStimulus( 
o_session
) 
=> o_childId / nil"
"This method edits the digital stimulus file. It gets the full path to the stimulus file by calling asiGetDigitalStimulusFileName. If the stimulus file does not exist, the asiNetlist flowchart step is executed to run the netlister and create a digital stimulus file. Finally the stimulus file is opened in an editor.")
("asiPartitionDesign"
"asiPartitionDesign( 
o_session 
) 
=> t / nil"
"This method partitions a mixed-signal design into analog and digital parts.")
("asiGetDigitalSimulatorLogFileName"
"asiGetDigitalSimulatorLogFileName( 
o_session
) 
=> t_verilogLogFileName"
"Retrieves the digital simulator log file name for the given design.")
("asiGetDigitalSimExecName"
"asiGetDigitalSimExecName(
o_session
) 
=> t_digitalSimExecName"
"Displays the verimix executable name.")
("asiSetVerilogHost"
"asiSetVerilogHost( 
o_session 
t_host 
) 
=> t_digitalSimulatorHostName"
"Sets the digital simulator host name for mixed-signal simulation.")
("asiSetVerilogHostMode"
"asiSetVerilogHostMode( 
o_session
t_hostMode 
) 
=> t_digitalSimulatorHostMode"
"Specifies whether the digital simulator will run locally or on a remote host. If you specify remote, you must specify the host name by using the asiSetVerilogHost command.")
("asiGetVerilogHost"
"asiGetVerilogHost( 
o_session 
) 
=> t_digitalSimulatorHostName"
"Returns the digital simulator host name for mixed-signal simulation. This method first verifies if host name was set using asiSetVerilogHost. If yes, it returns that host name. Otherwise, it returns the default value of digitalHost in the .cdsenv file for tool asimenv and partition startup.")
("asiGetVerilogHostMode"
"asiGetVerilogHostMode( 
o_session
) 
=> t_digitalSimulatorHostMode"
"Returns the digital simulator host mode for mixed-signal simulation. This method first verifies if host mode was set using asiSetVerilogHostMode. If yes, it returns that mode. Otherwise, it returns the default value of digitalHostMode in the .cdsenv file for tool asimenv and partition startup.")
("asiGetAnalogRunDir"
"asiGetAnalogRunDir( 
o_session 
) 
=> t_AnalogSimulatorRunDir"
"Returns the analog simulator run directory.")
("asiGetDigitalRunDir"
"asiGetDigitalRunDir( 
o_session
) 
=> t_DigitalSimulatorRunDir"
"Returns the digital simulator run directory.")
("asiGetAnalogKeepList"
"asiGetAnalogKeepList( 
o_session 
) 
=> l_AnalogSignalDescriptionList"
"Returns a list of user-selected output signals that are analog. This method first checks if the current simulation session is mixed-signal. If yes, then it returns all the user-selected output signals within the analog partition of the mixed-signal design. Otherwise, it calls asiGetKeepList to get the list of signals and currents to be saved during simulation.")
("asiGetDigitalKeepList"
"asiGetDigitalKeepList( 
o_session 
) 
=> l_DigitalSignalDescriptionList"
"Returns a list of user-selected output signals that are digital.")
("asiInitMixedKeepOption"
"asiInitMixedKeepOption( 
o_tool
)
=> t"
"Initializes the mixed-signal keep options variables.")
("asiInitVerilog"
"asiInitVerilog( 
o_tool
) 
=> t"
"Initializes the Verilog tool.")
("asiInitVerilogEnvOption"
"asiInitVerilogEnvOption( 
o_tool 
)
=> t"
"Initializes the base Verilog environment options.")
("asiInitVerilogFNLEnvOption"
"asiInitVerilogFNLEnvOption( 
o_tool 
) 
=> t"
"Initializes the Verilog FNL netlisting options.")
("asiInitVerilogHNLEnvOption"
"asiInitVerilogHNLEnvOption(
o_tool
)
=> t"
"Initializes the Verilog HNL netlisting options.")
("asiInitVerilogSimOption"
"asiInitVerilogSimOption( 
o_tool 
)
=> t"
"Initializes the simulation options for Verilog.")
("asiSetAnalogSimulator"
"asiSetAnalogSimulator( 
o_tool
s_analogSimulator 
)
=> s_analogSimulator"
"Sets the analog simulator.")
("asiSetDigitalSimulator"
"asiSetDigitalSimulator( 
o_tool
s_digitalSimulator
)
=> s_digitalSimulator"
"Sets the digital simulator.")
("mspDisplaySetPartSetupForm"
"mspDisplaySetPartSetupForm(
)
=> t / nil"
"This function displays the Partitions Options form, which can be used to edit and set the values for the Analog Stop View Set and Digital Stop View Set.")
("mspEditIEProps"
"mspEditIEProps( 
t_objectType
)
=> t / nil"
"This is the main entry procedure for the Interface Element property editor. It takes an object type. The object type can be one of instTerm, instance, terminal, cellView, lib, or default.")
("hnlVerilogPrintNmosPmos"
"hnlVerilogPrintNmosPmos( 
t_name
) 
=> t"
"Used by netlister to print pmos, rpmos, nmos, or rnmos gates.")
("hnlVerilogPrintCmos"
"hnlVerilogPrintCmos( 
t_name
)
=> t"
"Used by netlister to print cmos, rcmos gates.")
("nlGetCdf"
"nlGetCdf(
o_inst
) 
=> o_cdfId"
"Obtains the CDF information of the IE cell. CDF information contains the default IE parameter, default IE macro model file name and parameter mapping from CDF to simulator specific names.")
("asiAddEnvOption"
"asiAddEnvOption(
o_tool
[ ?name s_name ]
[ ?prompt t_prompt ]
[ ?type s_type ]
[ ?choices l_choices ]
[ ?itemsPerRow x_itemsPerRow ]
[ ?value g_value ]
[ ?min g_min ]
[ ?max g_max ]
[ ?allowExpr s_allowExpr ]
[ ?row x_row ]
[ ?column x_column ]
[ ?width x_width ]
[ ?coordinates l_coordinates ]
[ ?displayOrder x_displayOrder ]
[ ?labelText t_labelText ]
[ ?private s_private ]
[ ?display s_display ]
[ ?editable s_editable ]
[ ?appCB s_appCB ]
[ ?callback t_callback ]
[ ?formApplyCB s_formApplyCB ]
[ ?changeCB st_changeCB ]
[ ?doubleClickCB st_doubleClickCB ]
[ ?numRows x_numRows ]
[ ?multipleSelect s_multipleSelect ]
[ ?browse g_browse ]
[ ?mode t_browseMode ]
[ ?invalidateFunc s_invalidateFunc ]
[ ?defaultSubcircuitCall s_defaultSubcircuitCall ]
)
=> o_envVar / nil"
"Adds a new simulation environment option.")
("asiChangeEnvOption"
"asiChangeEnvOption(
o_tool
[ ?name s_name ]
[ ?prompt t_prompt ]
[ ?type s_type ]
[ ?choices l_choices ]
[ ?itemsPerRow x_itemsPerRow ]
[ ?value g_value ]
[ ?min g_min ]
[ ?max g_max ]
[ ?allowExpr s_allowExpr ]
[ ?row x_row ]
[ ?column x_column ]
[ ?width x_width ]
[ ?coordinates l_coordinates ]
[ ?displayOrder x_displayOrder ]
[ ?labelText t_labelText ]
[ ?private s_private ]
[ ?display s_display ]
[ ?editable s_editable ]
[ ?appCB s_appCB ]
[ ?callback t_callback ]
[ ?formApplyCB s_formApplyCB ]
[ ?changeCB st_changeCB ]
[ ?doubleClickCB st_doubleClickCB ]
[ ?numRows x_numRows ]
[ ?multipleSelect s_multipleSelect ]
[ ?invalidateFunc s_invalidateFunc ]
)
=> o_envVar / nil"
"Changes a simulation environment option.")
("asiChangeEnvOptionFormProperties"
"asiChangeEnvOptionFormProperties(
o_tool
[ ?type s_type ]
[ ?width x_width ]
[ ?columns x_columns ]
)
=> o_formObj / nil"
"Changes the display characteristics of the Environment Options form.")
("asiDeleteEnvOption"
"asiDeleteEnvOption( 
o_tool 
s_name 
) 
=> t / nil"
"Deletes a simulation environment option.")
("asiDisplayEnvOption"
"asiDisplayEnvOption( 
o_tool 
) 
=> t / nil"
"Displays the current set of simulation environment option names and values. Use this function only to determine which environment options you want to modify. Do not use this function as part of another procedure.")
("asiDisplayEnvOptionFormProperties"
"asiDisplayEnvOptionFormProperties( 
o_tool 
) 
=> t / nil"
"Displays the form characteristics for the Environment Options form. Use this function only to determine which form characteristics you want to modify.")
("asiGetEnvOptionChoices"
"asiGetEnvOptionChoices(
{ o_session | o_tool }
s_name 
)
=> l_choices / nil"
"Gets the list of choices for an environment option that is set up as a list box. ")
("asiGetEnvOptionVal"
"asiGetEnvOptionVal(
{ o_session | o_tool }
s_name 
)
=> g_value / nil"
"Gets the value for the specified simulation environment option.")
("asiInit<yourSimulator>EnvOption"
"asiInit<yourSimulator>EnvOption( 
o_tool 
) 
=> t"
"Calls your procedures to modify the simulation options.")
("asiSetEnvOptionChoices"
"asiSetEnvOptionChoices(
{ o_session | o_tool }
s_name
l_choices
)
=> l_choices / nil"
"Specifies the list of choices to appear in the list box field for the specified environment option.")
("asiSetEnvOptionVal"
"asiSetEnvOptionVal(
{ o_session | o_tool }
s_name
g_value
)
=> g_value / nil"
"Sets the value of the specified simulation environment option.")
("asiExtractQRCTechPathFromDSPF"
"asiExtractQRCTechPathFromDSPF( 
t_dspfFile
)
=> t_QRCTechDir / nil"
"Extracts the path to the QRC technology directory from the specified DSPF file.")
("asiExtractQRCTechPathFromSession"
"asiExtractQRCTechPathFromSession(
t_session
)
=> t_QRCTechDir / nil"
"Extracts the path to the QRC technology directory from the DSPF file defined in the EMIR setup for the specified session.")
("asiGetAnalogSimulator"
"asiGetAnalogSimulator( 
{ o_session | o_tool } 
) 
=> s_simulatorName"
"Gets the value of the analog simulator for a tool or session object.")
("asiGetAdvAnalysis"
"asiGetAdvAnalysis(
{ o_session | o_tool }
s_analysisName
) 
=> o_analysis / nil"
"Returns the object of advanced analyses, such as Monte Carlo. This function is similar to the asiGetAnalysis function and is normally used by third party integrator to implement the simulator interface for their simulators.")
("asiGetDesignVarListWithOriginalExpressions"
"asiGetDesignVarListWithOriginalExpressions(
o_session 
) 
=> l_designVars / nil"
"Returns a list of name-value pairs for design variables specified in the given session.")
("asiGetEMIROptionVal"
"asiGetEMIROptionVal(
o_session 
s_name
) 
=> g_value / nil"
"Returns the value of the specified EMIR option from the EMIR Analysis Setup form.")
("asiGetNetlistFileListToSymLink"
"asiGetNetlistFileListToSymLink(
o_session
)
=> l_files / nil"
"Returns the list of files present in the netlist directory and created by the asiNetlist procedure.")
("asiGetDigitalSimulator"
"asiGetDigitalSimulator( 
{ o_session | o_tool } 
) 
=> s_simulatorName / nil"
"Gets the value of the digital simulator for a tool or session object.")
("asiAnalogAutoloadProc"
"asiAnalogAutoloadProc(
) 
=> t"
"Called by OASIS for the purpose of autoloading the context. This is done so that the classes are defined before the tool is created and initialization is started.")
("ansAnalogRegCDFsimInfo"
"ansAnalogRegCDFsimInfo(
) 
=> t"
"This is a utility function used to create a CDF for the <yourSimulator> simulator.The ansAnalogRegCDFsimInfo functions are called by the CDF editor. These functions are used to provide data type information for all the simInfo attributes.")
("asiCheckAcEnabledWhenNoiseEnabled"
"asiCheckAcEnabledWhenNoiseEnabled( 
o_session 
r_form 
) 
=> t / nil"
"This method verifies that an AC analysis is enabled when a noise analysis is selected. If this is not the case, it displays an error message in the error dialog box of thw analysis form and sets the error status of the form. It is called during the form apply callback.")
("asiCheckAnalysis"
"asiCheckAnalysis( 
o_analog 
r_form 
) 
=> t / nil"
"Checking function for the analysis class. e.g. for Spectre simulator object it checks each field value in the environment, highlights any errors, returns t or nil. Can be used for different analog simulator analysis objects.")
("asiCheckBlank"
"asiCheckBlank( 
o_obj 
r_form 
s_fieldName 
) 
=> t / nil"
"Verifies that the s_fieldName entry is non-blank.")
("asiCreateIncludeStatementFile"
"asiCreateIncludeStatementFile( 
o_simulatorSession 
t_netlistFile
t_includeNetlistFile 
) 
=> t_includeNetlistFile / nil"
"Creates a file that contains a statement to include netlist for simulation. Override this function to create a customized include statement according to the the simulator netlisting procedure and syntax.")
("asiGetAnalysisField"
"asiGetAnalysisField( 
o_analysis 
s_fieldName 
)  
=> o_fieldEnvVar / nil"
"Returns the specified analysis field object.")
("asiGetHighPerformanceOptionVal"
"asiGetHighPerformanceOptionVal( 
o_session 
s_varName 
)  
=> t_varNameVal / nil"
"Returns the field value of the High Performance form with the passed session object.")
("asiSetHighPerformanceOptionVal"
"asiSetHighPerformanceOptionVal( 
s_sessionName 
s_varName 
s_varValue 
)  
=> t_Value / nil"
"Sets the value for the specified High Performance option variable.")
("asiDisplayHighPerformanceOption"
"asiDisplayHighPerformanceOption( 
o_toolName 
)  
=> t / nil"
"Displays a list of variable and values of the High Performance Simulation Option form.")
("asiGetDesignCellName"
"asiGetDesignCellName( 
o_session 
) 
=> t_cellName / nil"
"Returns the cell name of the design associated with the passed session object.")
("asiGetDesignLibName"
"asiGetDesignLibName( 
o_session 
)
=> t_libName / nil"
"Returns the library name of the design associated with the passed object.")
("asiGetDesignViewName"
"asiGetDesignViewName( 
o_session 
) 
=> t_viewName / nil"
"Returns the view name of the design associated with the passed object.")
("asiGetDrlData"
"asiGetDrlData( 
t_anaType 
l_specifier 
t_dataDir 
) 
=> g_familyOrWaveform / nil"
"Returns the results data for the given specifier from the given data directory.")
("asiGetId"
"asiGetId( 
o_session 
) 
=> x_id"
"Returns the name of the session ID associated with the given OASIS session.")
("asiGetIterationUpdateFile"
"asiGetIterationUpdateFile( 
o_session 
) 
=> t_fileName / nil"
"Returns the name and path to the simulator-specific file in which the iteration number and the corresponding PSF data location is written after each Monte Carlo iteration completes. This file is used to monitor the progress of the Monte Carlo run and to get the directory path from where the PSF data corresponding to an iteration is read.")
("asiGetResultsPsfDir"
"asiGetResultsPsfDir(
o_session
)  
=> t_PsfDir / nil"
"Returns the name of the PSF directory for the current or last-run simulation.")
("asiGetResultsNetlistDir"
"asiGetResultsNetlistDir(
o_session
)  
=> t_netlistDir / nil"
"Returns the name of the netlist directory for the current or last-run simulation.")
("asiGetSimulatorList"
"asiGetSimulatorList( 
[ s_subclass ] 
)
=> l_simulatorNameList / nil"
"The function returns a list of all simulation interfaces within the specified simulator subclass.")
("asiGetSimCommandLineOrder"
"asiGetSimCommandLineOrder( 
o_session 
) 
=> s_optionList / nil"
"Returns the order of options used in the simulator run command. By default, it returns the options in the following order:")
("asiGetStimulusGlobals"
"asiGetStimulusGlobals(
o_session
) 
=> l_globals / nil"
"This method retrieves the list of global stimuli from the session.")
("asiGetStimulusInputs"
"asiGetStimulusInputs(
o_session
) 
=> l_inputs / nil"
"This method retrieves the list of input stimuli from the session.")
("asiIsConfigDesign"
"asiIsConfigDesign( 
o_session 
) 
=> t / nil"
"The function returns t if the design associated with the session is a Cadence 5.x configuration.")
("asiSetValid"
"asiSetValid( 
o_analysis
g_value
) 
=> t / nil"
"The functions sets valid analysis in the current simulation environment. The call to asiSetValid should be used with asiCheck/asiCheckAnalysis method for the analysis.")
("asiCheckBlankNumericLeq"
"asiCheckBlankNumericLeq( 
o_obj 
r_form 
s_fieldName 
g_value 
) 
=> t / nil"
"Verifies that the s_fieldName entry is a numeric value less than or equal to g_value.")
("asiCheckBlankNumericGeq"
"asiCheckBlankNumericGeq( 
o_obj 
r_form 
s_fieldName 
g_value 
) 
=> t / nil"
"Verifies that the s_fieldName entry is a numeric value greater than or equal to g_value.")
("asiFormatGraphicalStimuli"
"asiFormatGraphicalStimuli( 
o_session  
p_fp 
) 
=> t / nil"
"Formats the graphical stimuli statements to send to Cadence SPICE.")
("asiFormatGraphicalStimulusFileList"
"asiFormatGraphicalStimulusFileList( 
o_session
&_fp 
) 
=> t_string"
"Formats the statement that includes the graphical stimulus files.")
("asiAddOceanAlias"
"asiAddOceanAlias( 
s_simulatorName 
s_alias 
s_analysisName 
)
=> t / nil"
"Adds an ocean alias to the current simulator. This is useful for defining ocean related data access aliases for third party simulator integration.")
("asiGetAvailableMCOptions"
"asiGetAvailableMCOptions(
)
=> l_list / nil"
"Returns a list of Monte Carlo analysis options along with their description. The supported Monte Carlo analysis options are displayed in the <OptionName, Description> format.")
("asiGetSupportedMCOptions"
"asiGetSupportedMCOptions( 
o_session 
) 
=> l_list / nil"
"Returns a list of Monte Carlo analysis options supported by your simulator. Ensure that the option names returned by this method match with the option names returned by asiGetAvailableMCOptions.")
("asiSetEMIROptionVal"
"asiSetEMIROptionVal(
o_session 
s_name
g_value
) 
=> t / nil"
"Sets the given value for the specified EMIR option.")
("artOutfile"
"artOutfile( 
t_name 
t_mode 
x_len 
t_break 
t_cont 
t_begCom 
t_endCom 
t_tab 
t_comments 
) 
=> x_handle"
"Opens the named file. The first argument is mandatory. The other arguments keep their default values if they are not set.")
("artFprintf"
"artFprintf( 
x_handle 
t_text 
g_args 
) 
=> t / nil"
"Prints out data like the standard C library fprintf, with the handle returned from artOutfile() as the first argument.")
("artClose"
"artClose( 
x_handle 
) 
=> t / nil"
"Closes the file associated with the given handle.")
("artCloseAllFiles"
"artCloseAllFiles(
) 
=> t / nil"
"Closes all files opened with artOutfile().")
("artFlush"
"artFlush( 
x_handle 
) 
=> t / nil"
"Flushes the file associated with the given handle.")
("artListOpenFiles"
"artListOpenFiles(
)
=> l_names / nil"
"Lists names of all files opened with artOutfile.")
("asiAddSimOption"
"asiAddSimOption(
o_tool
[ ?name s_name ]
[ ?prompt t_prompt ]
[ ?type s_type ]
[ ?choices l_choices ]
[ ?itemsPerRow x_itemsPerRow ]
[ ?value g_value ]
[ ?min g_min ]
[ ?max g_max ]
[ ?allowExpr s_allowExpr ]
[ ?row x_row ]
[ ?column x_column ]
[ ?width x_width ]
[ ?coordinates l_coordinates ]
[ ?displayOrder x_displayOrder ]
[ ?labelText t_labelText ]
[ ?private s_private ]
[ ?display s_display ]
[ ?editable s_editable ]
[ ?appCB s_appCB ]
[ ?callback t_callback ]
[ ?formApplyCB s_formApplyCB ]
[ ?changeCB st_changeCB ]
[ ?doubleClickCB st_doubleClickCB ]
[ ?numRows x_numRows ]
[ ?multipleSelect s_multipleSelect ]
[ ?browse g_browse ]
[ ?mode t_browseMode ]
[ ?invalidateFunc s_invalidateFunc ]
[ ?genericName s_genericName ]
[ ?sendMethod s_sendMethod ]
)
=> o_envVar / nil"
"Adds a new simulator option.")
("asiChangeSimOption"
"asiChangeSimOption(
o_tool
[ ?name s_name ]
[ ?prompt t_prompt ]
[ ?type s_type ]
[ ?choices l_choices ]
[ ?itemsPerRow x_itemsPerRow ]
[ ?value g_value ]
[ ?min g_min ]
[ ?max g_max ]
[ ?allowExpr s_allowExpr ]
[ ?row x_row ]
[ ?column x_column ]
[ ?width x_width ]
[ ?coordinates l_coordinates ]
[ ?displayOrder x_displayOrder ]
[ ?labelText t_labelText ]
[ ?private s_private ]
[ ?display s_display ]
[ ?editable s_editable ]
[ ?appCB s_appCB ]
[ ?callback t_callback ]
[ ?formApplyCB s_formApplyCB ]
[ ?changeCB st_changeCB ]
[ ?doubleClickCB st_doubleClickCB ]
[ ?numRows x_numRows ]
[ ?multipleSelect s_multipleSelect ]
[ ?invalidateFunc s_invalidateFunc ]
[ ?genericName s_genericName ]
[ ?sendMethod s_sendMethod ]
) 
=> o_envVar / nil"
"Changes a simulator option.")
("asiChangeSimOptionFormProperties"
"asiChangeSimOptionFormProperties(
o_tool
[ ?type s_type ]
[ ?width x_width ]
[ ?columns x_columns ]
)
=> o_formObj / nil"
"Changes the display characteristics for the Simulator Options form.")
("asiDeleteSimOption"
"asiDeleteSimOption( 
o_tool 
s_name 
) 
=> t / nil"
"Deletes a simulator option.")
("asiDisplaySimOption"
"asiDisplaySimOption( 
{ o_tool | o_session } 
) 
=> t / nil"
"Displays the current set of simulator option names and values. Use this function only to determine which simulator options you want to modify. Do not use this function as part of another procedure.")
("asiDisplaySimOptionFormProperties"
"asiDisplaySimOptionFormProperties( 
o_tool 
) 
=> t / nil"
"Displays the characteristics of the Simulator Options form. Use this function only to determine which form characteristics you want to modify. Do not use this function as part of another procedure.")
("asiGetReservedWordList"
"asiGetReservedWordList( 
o_session 
)
=> l_list / nil"
"Returns the simulator specific reserved keyword list. All the keywords specified by asiGetReservedWordList will be taken as keywords and not design variables. This process will ensure that the design parameters are not printed in the simulation control file under `parameters' statement. By default, this function returns nil.")
("asiIsCaseSensitive"
"asiIsCaseSensitive( 
o_session 
) 
=> t / nil"
"Determines whether the simulator is case sensitive or not. Returns t, if the simulator is case sensitive, else returns nil. The default value for this function is t.")
("asiGetSimOptionChoices"
"asiGetSimOptionChoices(
{ o_session | o_tool }
s_name
)
=> l_choices / nil"
"Gets the list of choices for a simulator option that is set up as a list box.")
("asiGetSimOptionNameList"
"asiGetSimOptionNameList( 
o_tool 
)
=> l_nameList"
"Returns the list of simulator option names.")
("asiGetSimOptionSendMethod"
"asiGetSimOptionSendMethod(
{ o_session | o_tool }
s_name 
)
=> s_sendMethod / nil"
"Gets the sendMethod for the specified simulator option. The sendMethod indicates how the simulator option is sent to Cadence SPICE.")
("asiGetSimOptionVal"
"asiGetSimOptionVal(
{ o_session | o_tool }
s_name
)
=> g_value / nil"
"Gets the value for the specified simulator option.")
("asiGetSimulationRunCommand"
"asiGetSimulationRunCommand( 
o_session 
)
=> g_command / nil"
"Gets the simulation run command. For direct simulators, it also creates the runSimulation file.")
("asiInit<yourSimulator>SimOption"
"asiInit<yourSimulator>SimOption( 
o_tool 
) 
=> t"
"Calls the procedures to add your simulator options.")
("asiIsICLPSupported"
"asiIsICLPSupported(
o_session
) 
=> t / nil"
"Specifies whether the simulator supports ICLP simulations that are enabled by the Optimize Single Job Run option on the Job Policy Setup form.")
("asiSetHostOptions"
"asiSetHostOptions(
o_session
t_hostMode
[ t_host ]
[ t_remoteDir ]
) 
=> t / nil"
"Changes the host mode, host and remote directory for simulation.")
("asiSetSimOptionChoices"
"asiSetSimOptionChoices(
{ o_session | o_tool }
s_name
l_choices
)
=> l_choices / nil"
"Specifies the list of choices to appear in the list box field for the specified simulator option.")
("asiSetSimOptionVal"
"asiSetSimOptionVal(
{ o_session | o_tool }
s_name
g_value
)
=> g_value / nil"
"Sets the value of the specified simulator option.")
("asiGetSimulatorSrcList"
"asiGetSimulatorSrcList( 
o_session
) 
=> l_result"
"Customizes the values in the Function drop-down list of the Setup Analog Stimuli form.")
("asiAddAnalysis"
"asiAddAnalysis(
o_tool
[ ?name s_analysisName ]
[ ?prompt t_prompt ]
[ ?fieldList l_analysisFields ]
[ ?optionList l_analysisOptions ]
[ ?formType s_formType ]
[ ?enable s_enable ]
)
=> o_analysis / nil"
"Adds a new analysis.")
("asiAddAnalysisField"
"asiAddAnalysisField(
o_analysis
[ ?name s_fieldName ]
[ ?prompt t_prompt ]
[ ?type s_type ]
[ ?choices l_choices ]
[ ?itemsPerRow x_itemsPerRow ]
[ ?value g_value ]
[ ?min g_min ]
[ ?max g_max ]
[ ?allowExpr s_allowExpr ]
[ ?row x_row ]
[ ?column x_column ]
[ ?width x_width ]
[ ?coordinates l_coordinates ]
[ ?displayOrder x_displayOrder ]
[ ?labelText t_labelText ]
[ ?private s_private ]
[ ?display s_display ]
[ ?editable s_editable ]
[ ?appCB s_appCB ]
[ ?callback t_callback ]
[ ?formApplyCB s_formApplyCB ]
[ ?changeCB st_changeCB ]
[ ?doubleClickCB st_doubleClickCB ]
[ ?numRows x_numRows ]
[ ?multipleSelect s_multipleSelect ]
[ ?invalidateFunc s_invalidateFunc ]
)
=> o_envVar / nil"
"Adds an analysis field to an existing analysis.")
("asiAddAnalysisOption"
"asiAddAnalysisOption(
o_analysis
[ ?name s_optionName ]
[ ?prompt t_prompt ]
[ ?type s_type ]
[ ?choices l_choices ]
[ ?itemsPerRow x_itemsPerRow ]
[ ?value g_value ]
[ ?min g_min ]
[ ?max g_max ]
[ ?allowExpr s_allowExpr ]
[ ?row x_row ]
[ ?column x_column ]
[ ?width x_width ]
[ ?coordinates l_coordinates ]
[ ?displayOrder x_displayOrder ]
[ ?labelText t_labelText ]
[ ?private s_private ]
[ ?display s_display ]
[ ?editable s_editable ]
[ ?appCB s_appCB ]
[ ?callback t_callback ]
[ ?formApplyCB s_formApplyCB ]
[ ?changeCB st_changeCB ]
[ ?doubleClickCB st_doubleClickCB ]
[ ?numRows x_numRows ]
[ ?multipleSelect s_multipleSelect ]
[ ?browse g_browse ]
[ ?mode t_browseMode ]
[ ?invalidateFunc s_invalidateFunc ]
[ ?sendMethod s_sendMethod ]
)
=> o_envVar / nil"
"Adds an option to an existing analysis.")
("asiChangeAnalysis"
"asiChangeAnalysis(
o_tool
[ ?name s_analysisName ]
[ ?prompt t_prompt ]
[ ?fieldList l_analysisFields ]
[ ?optionList l_analysisOptions ]
[ ?formType s_formType ]
)
=> o_analysis / nil"
"Changes an existing analysis.")
("asiChangeAnalysisField"
"asiChangeAnalysisField(
o_analysis
[ ?name s_fieldName ]
[ ?prompt t_prompt ]
[ ?type s_type ]
[ ?choices l_choices ]
[ ?itemsPerRow x_itemsPerRow ]
[ ?value g_value ]
[ ?min g_min ]
[ ?max g_max ]
[ ?allowExpr s_allowExpr ]
[ ?row x_row ]
[ ?column x_column ]
[ ?width x_width ]
[ ?coordinates l_coordinates ]
[ ?displayOrder x_displayOrder ]
[ ?labelText t_labelText ]
[ ?private s_private ]
[ ?display s_display ]
[ ?editable s_editable ]
[ ?appCB s_appCB ]
[ ?callback t_callback ]
[ ?formApplyCB s_formApplyCB ]
[ ?changeCB st_changeCB ]
[ ?doubleClickCB st_doubleClickCB ]
[ ?numRows x_numRows ]
[ ?multipleSelect s_multipleSelect ]
[ ?invalidateFunc s_invalidateFunc ]
)
=> o_envVar / nil"
"Changes a field in an existing analysis.")
("asiChangeAnalysisOption"
"asiChangeAnalysisOption(
o_analysis
[ ?name s_optionName ]
[ ?prompt t_prompt ]
[ ?type s_type ]
[ ?choices l_choices ]
[ ?itemsPerRow x_itemsPerRow ]
[ ?value g_value ]
[ ?min g_min ]
[ ?max g_max ]
[ ?allowExpr s_allowExpr ]
[ ?row x_row ]
[ ?column x_column ]
[ ?width x_width ]
[ ?coordinates l_coordinates ]
[ ?displayOrder x_displayOrder ]
[ ?labelText t_labelText ]
[ ?private s_private ]
[ ?display s_display ]
[ ?editable s_editable ]
[ ?appCB s_appCB ]
[ ?callback t_callback ]
[ ?formApplyCB s_formApplyCB ]
[ ?changeCB st_changeCB ]
[ ?doubleClickCB st_doubleClickCB ]
[ ?numRows x_numRows ]
[ ?multipleSelect s_multipleSelect ]
[ ?invalidateFunc s_invalidateFunc ]
[ ?sendMethod s_sendMethod ]
)
=> o_envVar / nil"
"Changes an analysis option for an existing analysis.")
("asiChangeAnalysisOptionFormProperties"
"asiChangeAnalysisOptionFormProperties(
o_analysis
[ ?type s_type ]
[ ?width x_width ]
[ ?columns x_columns ]
)
=> o_formObj / nil"
"Changes the display characteristics for one of the analysis options forms.")
("asiCreateAnalysisField"
"asiCreateAnalysisField(
[ ?name s_fieldName ]
[ ?prompt t_prompt ]
[ ?type s_type ]
[ ?choices l_choices ]
[ ?itemsPerRow x_itemsPerRow ]
[ ?value g_value ]
[ ?min g_min ]
[ ?max g_max ]
[ ?allowExpr s_allowExpr ]
[ ?row x_row ]
[ ?column x_column ]
[ ?width x_width ]
[ ?coordinates l_coordinates ]
[ ?displayOrder x_displayOrder ]
[ ?labelText t_labelText ]
[ ?private s_private ]
[ ?display s_display ]
[ ?editable s_editable ]
[ ?appCB s_appCB ]
[ ?callback t_callback ]
[ ?formApplyCB s_formApplyCB ]
[ ?changeCB st_changeCB ]
[ ?doubleClickCB st_doubleClickCB ]
[ ?numRows x_numRows ]
[ ?multipleSelect s_multipleSelect ]
[ ?invalidateFunc s_invalidateFunc ]
)
=> o_envVar / nil"
"Creates a new analysis field, such as from or to, for a new or changed analysis.")
("asiCreateAnalysisOption"
"asiCreateAnalysisOption(
[ ?name s_optionName ]
[ ?prompt t_prompt ]
[ ?type s_type ]
[ ?choices l_choices ]
[ ?itemsPerRow x_itemsPerRow ]
[ ?value g_value ]
[ ?min g_min ]
[ ?max g_max ]
[ ?allowExpr s_allowExpr ]
[ ?row x_row ]
[ ?column x_column ]
[ ?width x_width ]
[ ?coordinates l_coordinates ]
[ ?displayOrder x_displayOrder ]
[ ?labelText t_labelText ]
[ ?private s_private ]
[ ?display s_display ]
[ ?editable s_editable ]
[ ?appCB s_appCB ]
[ ?callback t_callback ]
[ ?formApplyCB s_formApplyCB ]
[ ?changeCB st_changeCB ]
[ ?doubleClickCB st_doubleClickCB ]
[ ?numRows x_numRows ]
[ ?multipleSelect s_multipleSelect ]
[ ?invalidateFunc s_invalidateFunc ]
[ ?sendMethod s_sendMethod ]
)
=> o_envVar / nil"
"Creates a new analysis option for a new or changed analysis. You can call this function from within asiAddAnalysis or asiChangeAnalysis as an argument to ?optionList.")
("asiDeleteAnalysis"
"asiDeleteAnalysis( 
o_tool 
s_analysisName 
)
=> t / nil"
"Deletes an analysis from the given simulation tool.")
("asiDeleteAnalysisField"
"asiDeleteAnalysisField( 
o_analysis 
s_fieldName 
)
=> t / nil"
"Deletes an analysis field from an existing analysis.")
("asiDeleteAnalysisOption"
"asiDeleteAnalysisOption( 
o_analysis 
s_optionName 
) 
=> t / nil"
"Deletes an analysis option.")
("asiDisableAnalysis"
"asiDisableAnalysis( 
o_analysis 
) 
=> t / nil"
"Disables an analysis while keeping it in the analysis list. The analysis remains in the UI, but it is not sent to the simulator.")
("asiDisplayAnalysis"
"asiDisplayAnalysis( 
o_tool 
) 
=> t / nil"
"Displays the analyses for a tool. Use this function to determine which analyses you need to add or modify. Do not use this function as part of another procedure.")
("asiDisplayAnalysisField"
"asiDisplayAnalysisField( 
o_analysis 
) 
=> t / nil"
"Displays the analysis field names for an analysis. Use this function to determine which analysis field you want to modify. Do not use this function as part of another procedure.")
("asiDisplayAnalysisOption"
"asiDisplayAnalysisOption( 
o_analysis 
) 
=> t / nil"
"Displays the analysis option names for an analysis. Use this function to determine which analysis option you want to modify. Do not use this function as part of another procedure.")
("asiDisplayAnalysisOptionFormProperties"
"asiDisplayAnalysisOptionFormProperties( 
o_analysis 
)
=> t / nil"
"Displays the characteristics for one of the analysis options forms. Use this function only to determine which form characteristics you want to modify. Do not use this function as part of another procedure.")
("asiEnableAnalysis"
"asiEnableAnalysis( 
o_analysis
) 
=> t / nil"
"Enables an analysis, which means the analysis is selected and sent to the simulator.")
("asiGetAnalysis"
"asiGetAnalysis(
{ o_session | o_tool }
s_analysisName
)
=> o_analysis / nil"
"Gets an analysis object.")
("asiGetAnalysisFieldChoices"
"asiGetAnalysisFieldChoices( 
o_analysis 
s_fieldName 
)
=> l_choices / nil"
"Gets the list of choices for an analysis field that is set up as a list box.")
("asiGetAnalysisFieldList"
"asiGetAnalysisFieldList( 
o_analysis 
)
=> l_fieldList / nil"
"Returns a list of analysis field objects defined for a particular analysis object.")
("asiGetAnalysisFieldVal"
"asiGetAnalysisFieldVal( 
o_analysis 
s_fieldName 
)
=> g_value / nil"
"Gets the value of an analysis field from the environment.")
("asiGetAnalysisFormFieldChoices"
"asiGetAnalysisFormFieldChoices( 
r_form 
s_analysisName 
s_fieldName 
)
=> l_choices / nil"
"Returns the list of choices for a field in the Choosing Analyses form. This procedure can be used within the asiCheck method to get the list of choices for an analysis field from the form for subsequent value checking. You can also use this procedure in an expression that controls whether a field is displayed in the form.")
("asiGetAnalysisFormObj"
"asiGetAnalysisFormObj(
o_session
)
=> o_analysis / nil"
"Returns the current analysis selected in the Choosing Analysis form for the simulation session.")
("asiGetAnalysisFormFieldVal"
"asiGetAnalysisFormFieldVal( 
r_form 
s_analysisName 
s_fieldName 
)
=> g_fieldValue / nil"
"Returns the value of a field in the Choosing Analyses form. This procedure can be used within the asiCheck method to get the values of analysis fields from the form for subsequent value checking. You can also use this procedure in an expression that controls whether a field is displayed in the form.")
("asiGetAnalysisName"
"asiGetAnalysisName( 
o_analysis 
) 
=> s_analysisName / nil"
"Gets the name of the analysis.")
("asiGetAnalysisNameList"
"asiGetAnalysisNameList(
{ o_session | o_tool }
) 
=> l_analysesNames"
"Returns a list of analysis names defined for a tool.")
("asiGetAnalysisOptionChoices "
"asiGetAnalysisOptionChoices( 
o_analysis 
s_optionName 
)
=> l_choices / nil"
"Gets the list of choices for an analysis option that is set up as a list box.")
("asiGetAnalysisOptionList"
"asiGetAnalysisOptionList( 
o_analysis 
)
=> l_optionObjects / nil"
"Gets a list of analysis option objects defined for a particular analysis object.")
("asiGetAnalysisOptionSendMethod"
"asiGetAnalysisOptionSendMethod( 
o_analysis 
s_optionName 
)
=> s_sendMethod"
"Gets the sendMethod for an option in an analysis. The sendMethod indicates how the analysis option is sent to Cadence SPICE.")
("asiGetAnalysisOptionVal"
"asiGetAnalysisOptionVal( 
o_analysis 
s_optionName 
)
=> g_value / nil"
"Gets the value for the given option in an analysis.")
("asiGetAnalysisParamNameList"
"asiGetAnalysisParamNameList( 
o_analysis 
)
=> l_analysisParamNameList / nil"
"Returns a concatenated list of fields and options defined for an analysis object.")
("asiGetEnabledAnalysisList"
"asiGetEnabledAnalysisList( 
o_session 
) 
=> l_analysisEnabledList / nil"
"Returns a list of all the enabled analyses.")
("asiInit<yourSimulator>Analysis"
"asiInit<yourSimulator>Analysis( 
o_tool
) 
=> t"
"Calls the procedures that modify analyses in your simulator. You must write asiInit<yourSimulator>Analysis, where <yourSimulator> is the name of your simulator. Do not include the angle brackets (<>).")
("asiIsAnalysisEnabled"
"asiIsAnalysisEnabled( 
o_analysis 
)  
=> t / nil"
"Determines whether an analysis is enabled.")
("asiSetAnalysisFieldChoices"
"asiSetAnalysisFieldChoices( 
o_analysis 
s_fieldName 
l_choices
)
=> l_choices / nil"
"Specifies the list of choices to appear in the list box for an analysis field.")
("asiSetAnalysisFieldVal"
"asiSetAnalysisFieldVal( 
o_analysis 
s_fieldName 
g_value 
)
=> g_value / nil"
"Sets the value for a field of an analysis.")
("asiSetAnalysisFormFieldChoices"
"asiSetAnalysisFormFieldChoices( 
r_form 
s_analysisName 
s_fieldName 
l_choices 
)
=> l_choices / nil"
"Sets the list of choices for the specified field on the Choosing Analyses form.")
("asiSetAnalysisFormFieldVal"
"asiSetAnalysisFormFieldVal( 
r_form 
s_analysisName 
s_fieldName 
g_value 
)
=> g_value / nil"
"Sets the value of a field on the Choosing Analyses form.")
("asiSetAnalysisFormWidth"
"asiSetAnalysisFormWidth( 
o_tool 
x_width 
) 
=> x_width / nil"
"Sets the width of the Choosing Analyses form. You need to add a call to this procedure to the analysis.il file if you do not want the inherited width of the analysis form.")
("asiSetAnalysisOptionFormProperties"
"asiSetAnalysisOptionFormProperties(
o_analysis
[ ?type s_type ]
[ ?width x_width ]
[ ?columns x_columns ]
)
=> o_formObj / nil"
"Sets the display characteristics for a new analysis options form.")
("asiSetAnalysisOptionChoices"
"asiSetAnalysisOptionChoices(
o_analysis 
s_optionName 
l_choices
)
=> l_choices / nil"
"Specifies the list of choices for an analysis option that is set up as a list box.")
("asiSetAnalysisOptionVal"
"asiSetAnalysisOptionVal( 
o_analysis 
s_optionName 
g_value 
)
=> g_value / nil"
"Sets the value of an option in an analysis.")
("asiInitialize"
"asiInitialize( 
o_tool 
) 
=> o_tool / nil"
"Initializes the tools that are derived from the asiAnalog class. This function is not called for tools that are derived from the asiSocket class.")
("asiNetlist"
"asiNetlist( 
o_session 
) 
=> g_status / nil"
"Creates a design object and then a formatter object with nlCreateFormatter. After this, the netlister is run and a netlist is generated with nlNetlist. Netlist statistics are then printed. The netlister also provides a component count, as well as the addition of design variables found during netlisting.")
("asiInterruptSim"
"asiInterruptSim( 
o_session
) 
=> g_status / nil"
"This method provides an interrupt to the simulation run process for a session. It is associated with the Simulation->Stop action in the user interface. This method is called by the environment. Therefore, you should not call it directly from the interface. This method can be re-defined for the interface. Use callNextMethod in this definition.")
("asiSetProjectDirChangeSetup"
"asiSetProjectDirChangeSetup( 
o_session 
)
=> t / nil"
"Enables you to modify the simulator settings for the given session after changing the project directory. This function is called by the environment. Therefore, you should not call it directly from the interface.")
("asiQuitSimulator"
"asiQuitSimulator( 
o_session 
[ ?mode g_mode ] 
) 
=> g_status / nil"
"This function quits the simulator run process based on the ipc signal being sent to the specified process. By default, the direct integration code sends a hard-kill signal to the simulator process. To change this option and send a soft-kill signal, the ?mode option should be set to true and overloaded for yourSimulator session. This method is called by the environment, therefore, you should not call it directly from the interface. This method can be re-defined for the interface. Use, callNextMethod in its definition.")
("asiRunSimulation"
"asiRunSimulation( 
o_session 
) 
=> g_status / nil"
"This function runs the simulation for the session. It is called by the environment, so you should not call it directly from the interface. This method can be redefined for the interface. Use callNextMethod in this definition.")
("asiGetPredefinedCommandLineOption"
"asiGetPredefinedCommandLineOption( 
o_session 
) 
=> t_predefinedCmdLineOption"
"Gets the predefined simulation command-line options. This function returns an empty string at the asiAnalog class. Overload this method for your simulator.")
("asiGetCommandFooter"
"asiGetCommandFooter( 
o_session
) 
=> t_commandFooter"
"Specifies the footer of the simulation run command.")
("asiFormatControlStmts"
"asiFormatControlStmts( 
o_session 
p_fp
) 
=> t / nil"
"Creates and formats all control statements. It formats the following in the given order:")
("asiFormatDesignVarList"
"asiFormatDesignVarList( 
o_session 
) 
=> t / nil"
"Formats and prints the design variable statements to the design variable file. This routine first prints the string.PARAM followed by the design variables in name=value pairs. The design variables are obtained by calling asiGetDesignVarList.")
("asiFormatInitCond"
"asiFormatInitCond( 
o_session 
p_fp 
) 
=> t / nil"
"Formats and prints the initial condition commands to the control statement file. This routine prints the string .IC followed by the initial conditions in V(net)=voltage pairs.")
("asiFormatNodeSet"
"asiFormatNodeSet(
o_session 
p_fp 
) 
=> t / nil"
"Formats and prints the nodeset commands to the control statement file. This routine prints .NODESET and then the nodesets in V(net)=voltage pairs.")
("asiFormatKeepList"
"asiFormatKeepList( 
o_session 
p_fp
) 
=> t / nil"
"Formats and prints the signal save commands to the control statement file. At the asiAnalog class this routine returns t. You need to create your own asiFormatKeepList routine.")
("asiFormatSimulatorOptions"
"asiFormatSimulatorOptions( 
o_session 
p_fp 
) 
=> t / nil"
"Formats and prints the simulator option statements to the designated file. This routine prints .OPTIONS followed by name=value pairs.")
("asiFormatAnalysisList"
"asiFormatAnalysisList( 
o_ana 
p_fp
) 
=> t / nil"
"Formats all enabled analyses by calling asiFormatAnalysis.")
("asiFormatAnalysis"
"asiFormatAnalysis( 
o_ana 
p_fp
) 
=> t / nil"
"Formats and prints analysis statements to the control file. For the general asiAnalog class, it follows this routine: prints the analysis name by calling asiGetAnalysisName; prints the list of signals by calling asiGetAnalysisSigList and formats them in parentheses [for example: (net1 net2)]; prints the analysis field list in name=value pairs; prints the analysis options in name=value pairs; uses asiGetFormattedVal() to obtain the print string for an analysis field value or an analysis option value. Please see the description of asiGetFormattedVal routine for more details.")
("asiFormatModelLibSelectionList"
"asiFormatModelLibSelectionList(
o_session 
p_fp
) 
=> t / nil"
"Formats the statement which specifies the model library information.")
("asiFormatDefinitionFileList"
"asiFormatDefinitionFileList( 
o_session
p_fp
) 
=> t / nil"
"Formats the statement which includes the specified definition files.")
("asiFormatTextStimulusFileList"
"asiFormatTextStimulusFileList( 
o_session
p_fp
)
=> t / nil"
"Formats the statement which includes the textual stimulus files.")
("asiNeedSuffixEvaluation"
"asiNeedSuffixEvaluation(
o_session
) 
=> t / nil"
"Specify whether the interface needs suffix evaluation or not. When this method returns t, the numeric suffixes specified in a numericString field will be evaluated. For example, suppose the start frequency field for the AC analysis has a value of 10M, asiGetFormattedVal(ac_start_fieldObj ) returns 1e7 provided it is created as a `numericString field.")
("asiInvalidateControlStmts"
"asiInvalidateControlStmts( 
{ o_session | o_tool }
)
=> t / nil"
"The asiInvalidateControlStmts function is a wrapper to asiInvalidateFlowchartStep, which invalidates the asiSendControlStmts flowchart step.")
("asiGetSimExecName"
"asiGetSimExecName(
o_session
) 
=> t_simulatorExecutableName"
"Gets the name of the simulator executable by calling asiGetSimName.")
("asiGetCommandLineOption"
"asiGetCommandLineOption(
o_session
) 
=> t_CommandLineOption"
"Gets the simulation command line options. At the asiAnalog class this method returns the value of the environment option `userComdLineOption.")
("asiGetAnalysisSigList"
"asiGetAnalysisSigList( 
o_session
o_ana
) 
=> l_sigObjList"
"Gets a list of analysis field objects which are of the type net. For example, the p and n nodes for the Spectre noise analysis.")
("asiGetAnalysisType"
"asiGetAnalysisType( 
o_analysis 
) 
=> s_analysisType"
"Gets the type of the analysis.")
("asiGetAnalysisSimFieldList"
"asiGetAnalysisSimFieldList(
o_session 
o_ana 
) 
=> l_simFieldObjList"
"Gets a list of simulator analysis field objects that need to be netlisted.")
("asiGetModelLibSelectionList"
"asiGetModelLibSelectionList( 
o_session 
) 
=> l_modelLibSelectionList / nil"
"Formats the statement which specifies the model library information.")
("asiGetModelLibFile"
"asiGetModelLibFile( 
o_modelLibSelection 
) 
=> t_fileName / nil"
"Gets the file name of a model library selection object.")
("asiGetModelLibSection"
"asiGetModelLibSection( 
o_modelLibSelection 
) 
=> t_sectionName / nil"
"Gets the section name of a model library selection object.")
("asiGetDefinitionFileList"
"asiGetDefinitionFileList( 
o_session
) 
=> l_definitionFileList / nil"
"Gets the list of definition file names associated with the given simulation session.")
("asiGetTextStimulusFileList"
"asiGetDefinitionFileList( 
o_session
) 
=> l_definitionFileList / nil"
"Gets the list of textual stimulus file names associated with the given simulation session.")
("asiGetFormattedVal"
"asiGetFormattedVal( 
o_anaField | o_anaOption | o_simOption 
) 
=> t_formattedVal / nil"
"Gets the string value of an analysis field object, an analysis option object, or a simulator option object. The format of the string values are based on the object types which are specified with functions such as asiCreateAnalysisField, asiCreateAnalysisOption, asiAddSimOption. A number of examples can be found in the example section.")
("asiGetSelObjName"
"asiGetSelObjName( 
o_selObj 
) 
=> t_name"
"Returns the schematic name of the selected signal object.")
("asiGetSelObjType"
"asiGetSelObjType( 
o_selObj
) 
=> t_signalType"
"Returns the type of the selected signal object.")
("asiGetSelObjValue"
"asiGetSelObjValue( 
o_selObj
)
=> t_value"
"Returns the initial condition or nodeset values specified on the selected signal object.")
("asiMapOutputName"
"asiMapOutputName( 
t_dir
s_type
t_name
[ ?formatflag s_formatflag ]
) 
=> l_nameList"
"Maps the given schematic name of the given type using the netlist directory. The result is a list of mapped strings.")
("asiGetSimInputFileList"
"asiGetSimInputFileList( 
o_session
)
=> l_fileNamesList"
"Returns a list of all file names concatenated to generate the input file to the simulator. You can override this method to add/delete files used to generate the final input file to your simulator.")
("artInvalidateAmap"
"artInvalidateAmap( 
)
=> t / nil"
"Resets the in-memory Amap cache. Further mapping function calls will result in re-reading the amap files from disk.")
("asiAddFlowchartLink"
"asiAddFlowchartLink( 
o_flowchart 
s_parentStep
s_childStep
)
=> t / nil"
"Creates a new link between the specified parent and child steps, which were created with asiAddFlowchartStep.")
("asiAddFlowchartStep"
"asiAddFlowchartStep( 
o_flowchart
[ ?name s_name ]
[ ?description t_description ]
[ ?runMessage t_runMessage ]
[ ?function s_function ]
[ ?checkFunc s_checkFunc ]
[ ?preFunc s_preFunc ]
[ ?postFunc s_postFunc ]
[ ?ignoreFunc s_ignoreFunc ]
)
=> o_step / nil"
"Adds a new step to an existing flowchart. ")
("asiChangeFlowchartStep"
"asiChangeFlowchartStep(
o_flowchart
[ ?name t_name ]
[ ?description t_description ]
[ ?runMessage t_runMessage ]
[ ?function s_function ]
[ ?checkFunc s_checkFunc ]
[ ?preFunc s_preFunc ]
[ ?postFunc s_postFunc ]
[ ?ignoreFunc s_ignoreFunc ]
)
=> o_step / nil"
"Changes a flowchart step in an existing flowchart")
("asiCreateFlowchart"
"asiCreateFlowchart( 
o_tool
) 
=> o_flowchart"
"Creates a new flowchart.")
("asiDeleteFlowchartLink"
"asiDeleteFlowchartLink( 
o_flowchart 
s_parentStep
s_childStep
)
=> t / nil"
"Deletes the link between the specified parent and child steps.")
("asiDeleteFlowchartStep"
"asiDeleteFlowchartStep( 
o_flowchart 
s_name
[ s_splice ]
)
=> t / nil"
"Deletes a step and any attached links from an existing flowchart. Typically, you do not need this function because you can unlink any flowchart step that you do not want to use with the asiDeleteFlowchartLink function.")
("asiDisplayFlowchart"
"asiDisplayFlowchart( 
o_tool
[ s_rootstep ]
)
=> t / nil"
"Displays the current steps and links for the flowchart. You can display all the step and link information, or you can display the steps and links that are below the rootstep step. Use this function only to determine which part of the flowchart you want to modify. Do not use this function as part of another procedure.")
("asiExecuteFlowchart"
"asiExecuteFlowchart( 
o_session 
s_goalStep 
[ s_printMessages ]
)
=> t / nil"
"Executes the flowchart for a given session up to and including the goal step.")
("asiFinalNetlist"
"asiFinalNetlist( 
o_session
)
=> t | l_dpl"
"Creates the final netlist.")
("asiGetFlowchart"
"asiGetFlowchart( 
{ o_tool | o_session }
)
=> o_flowchart"
"Gets the flowchart object for a tool or session.")
("asiInit<yourSimulator>Flowchart"
"asiInit<yourSimulator>Flowchart( 
o_tool 
) 
=> t"
"Calls the procedures to initialize the flowchart for your simulator.")
("asiInvalidateFlowchartStep"
"asiInvalidateFlowchartStep( 
o_session 
s_step
) 
=> t / nil"
"Invalidates a flowchart step for a particular session.")
("asiRawNetlist"
"asiRawNetlist( 
o_session
) 
=> t / nil"
"Creates a raw netlist.")
("asiSendAnalysis"
"asiSendAnalysis( 
o_session
) 
=> t / nil"
"Sends analyses to Cadence SPICE by calling asiFormatAnalysis for each analysis.")
("asiSendControlStmts"
"asiSendControlStmts( 
o_session
) 
=> t / nil"
"Sends information such as nodesets, initial conditions, keep lists or output, analyses, restore files, include files, and stimulus files to Cadence SPICE.")
("asiSendDesignVars"
"asiSendDesignVars( 
o_session
) 
=> t / nil"
"Sends the design variables to Cadence SPICE.")
("asiSendInitCond"
"asiSendInitCond( 
o_session
) 
=> t / nil"
"Places all the initial conditions in <netlistDirectory>/raw/ics and sends a ptprop command to Cadence SPICE. ")
("asiSendInitFile"
"asiSendInitFile( 
o_session 
) 
=> t / nil"
"Sends the init.s file to Cadence SPICE.")
("asiSendKeepList"
"asiSendKeepList(
o_session
) 
=> t / nil"
"Sends the keep list to Cadence SPICE. The keep list can contain a list of nets or currents to save and it can contain statements to keep all nets or keep all currents.")
("asiSendModelPath"
"asiSendModelPath( 
o_session
) 
=> t / nil"
"Sends the model path to Cadence SPICE. ")
("asiSendNetlist"
"asiSendNetlist( 
o_session 
) 
=> t / nil"
"Sends the raw netlist to Cadence SPICE using the Cadence SPICE sim command.")
("asiSendNodeSets"
"asiSendNodeSets( 
o_session
) 
=> t / nil"
"Places all the nodesets in <netlistDirectory>/raw/nodesets and sends a ptprop command to Cadence SPICE. ")
("asiSendOptions"
"asiSendOptions( 
o_session
) 
=> t / nil"
"Sends the simulation options to Cadence SPICE.")
("asiSendRestore"
"asiSendRestore( 
o_session
) 
=> t"
"If DC restore is on, send the commands to restore the DC node voltages to Cadence SPICE. If DC restore is off, sends the commands to turn off the DC restore function to Cadence SPICE. This function also works for the transient restore function.")
("asiSendUpdateFile"
"asiSendUpdateFile( 
o_session
) 
=> t / nil"
"Sends the update.s file to Cadence SPICE.")
("asiAddKeepOption"
"asiAddKeepOption(
o_tool
[ ?name s_name ]
[ ?prompt t_prompt ]
[ ?type s_type ]
[ ?choices l_choices ]
[ ?itemsPerRow x_itemsPerRow ]
[ ?value g_value ]
[ ?min g_min ]
[ ?max g_max ]
[ ?allowExpr s_allowExpr ]
[ ?row x_row ]
[ ?column x_column ]
[ ?width x_width ]
[ ?coordinates l_coordinates ]
[ ?displayOrder x_displayOrder ]
[ ?labelText t_labelText ]
[ ?private s_private ]
[ ?display s_display ]
[ ?editable s_editable ]
[ ?appCB s_appCB ]
[ ?callback t_callback ]
[ ?formApplyCB s_formApplyCB ]
[ ?changeCB st_changeCB ]
[ ?doubleClickCB st_doubleClickCB ]
[ ?numRows x_numRows ]
[ ?multipleSelect s_multipleSelect ]
[ ?invalidateFunc s_invalidateFunc ]
)
=> o_envVar / nil"
"Adds a simulator keep option variable.")
("asiChangeKeepOption"
"asiChangeKeepOption(
o_tool
[ ?name s_name ]
[ ?prompt t_prompt ]
[ ?type s_type ]
[ ?choices l_choices ]
[ ?itemsPerRow x_itemsPerRow ]
[ ?value g_value ]
[ ?min g_min ]
[ ?max g_max ]
[ ?allowExpr s_allowExpr ]
[ ?row x_row ]
[ ?column x_column ]
[ ?width x_width ]
[ ?coordinates l_coordinates ]
[ ?displayOrder x_displayOrder ]
[ ?labelText t_labelText ]
[ ?private s_private ]
[ ?display s_display ]
[ ?editable s_editable ]
[ ?appCB s_appCB ]
[ ?callback t_callback ]
[ ?formApplyCB s_formApplyCB ]
[ ?changeCB st_changeCB ]
[ ?doubleClickCB st_doubleClickCB ]
[ ?numRows x_numRows ]
[ ?multipleSelect s_multipleSelect ]
[ ?invalidateFunc s_invalidateFunc ]
)
=> o_envVar / nil"
"Modifies an existing keep option variable for a simulator.")
("asiChangeKeepOptionFormProperties"
"asiChangeKeepOptionFormProperties(
o_tool
[ ?type s_type ]
[ ?width x_width ]
[ ?columns x_columns ]
)
=> o_formObj / nil"
"Changes the display characteristics of the Keep Options form.")
("asiDeleteKeepOption"
"asiDeleteKeepOption( 
o_tool
s_name 
) 
=> t / nil"
"Deletes a simulator keep option variable.")
("asiDisplayKeepOption"
"asiDisplayKeepOption( 
o_tool
) 
=> t / nil"
"Displays the current simulator keep option names. Use this function to determine which options you want to modify. Do not use this function as part of another procedure.")
("asiDisplayKeepOptionFormProperties"
"asiDisplayKeepOptionFormProperties( 
o_tool
) 
=> t / nil"
"Displays the form characteristics for the Keep Options form. Use this function only to determine which form characteristics you want to modify. Do not use this function as part of another procedure.")
("asiGetKeepOptionChoices"
"asiGetKeepOptionChoices(
{ o_session | o_tool }
s_name 
)
=> l_choices / nil"
"Gets the list of choices for a keep option that is set up as a list box. ")
("asiGetKeepOptionVal"
"asiGetKeepOptionVal(
{ o_tool | o_session }
s_name
)
=> g_value"
"Gets the value of a keep option variable for a tool or session object.")
("asiInit<yourSimulator>KeepOption"
"asiInit<yourSimulator>KeepOption( 
o_tool
) 
=> t"
"Calls the procedures to initialize your simulator keep option variables. ")
("asiSetKeepOptionChoices"
"asiSetKeepOptionChoices(
{ o_session | o_tool }
s_name
l_choices
)
=> l_choices / nil"
"Specifies the list of choices to appear in the list box field for the specified keep option.")
("asiSetKeepOptionVal"
"asiSetKeepOptionVal(
{ o_tool | o_session }
s_name
g_value
)
=> g_value / nil"
"Sets the value for the specified keep option variable for a tool or session object.")
("calcValForRel"
"calcValForRel(
t_outputName
[ ?relxName t_relxName ]
[ ?ageValue t_ageValue ]
[ ?ageUnit t_ageUnit ]
[ ?she g_she ]
[ ?cornerName t_cornerName ]
[ ?historyName t_historyName ]
[ ?run t_runName]
)
=> g_output / nil"
"Retrieves the value of an output expression used in a reliability setup. You can use the value returned by this function in another output expression. When using the function calcValForRel in an output expression, you must specify different tests for stress and aged tests to avoid cyclic dependencies. You can create this expression in the Outputs Setup tab by using the Expression Builder too.")
("maeGetStressFile"
"maeGetStressFile(
t_relxSetupName
[ ?cornerName t_cornerName ]
[ ?historyName t_historyName ]
[ ?run t_runName ]
[ ?matchParams l_matchParams ]
)
=> t_output / nil"
"Returns the path of the stress file to be reused from the specified reliability setup.")
("maeAddRelxSetup"
"maeAddRelxSetup(
t_relxSetupName
t_freshTest
t_agedTest
[ ?stressTest t_stressTest ]
[ ?stressVarList l_stressVarList ]
[ ?agedVarList l_agedVarList ]
[ ?freshTestEnabled g_freshTestEnabled ]
[ ?stressTestEnabled g_stressTestEnabled ]
[ ?agedTestEnabled g_agedTestEnabled ]
[ ?stressFile t_stressFile ]
[ ?relxOptions l_relxOptions ]
[ ?relxModelSetup l_relxModelSetup ]
[ ?run t_runName ]
[ ?session t_session ]
)
=> t / nil"
"Adds a reliability setup with the specified settings in the specified ADE Explorer or ADE Assembler session.")
("maeCopyRelxSetup"
"maeCopyRelxSetup(
t_relxSourceName
[ ?relxDestName t_relxDestName ]
[ ?run t_runName ]
[ ?session t_session ]
)
=> t / nil"
"Creates a copy of a reliability setup and saves this copy with the specified name.")
("maeDeleteRelxSetup"
"maeDeleteRelxSetup(
t_relxSetupName
[ ?run t_runName ]
[ ?session t_session ]
)
=> t / nil"
"Deletes a reliability setup from the specified ADE Explorer or ADE Assembler session.")
("maeCreateNetlistForRel"
"maeCreateNetlistForRel(
t_relxSetupName
[ ?stage t_stage ]
[ ?cornerName t_cornerName ]
[ ?netlistDir t_netlistDir ]
[ ?run t_runName ]
[ ?session t_session ]
)
=> t / nil"
"Creates a netlist for the specified reliability setup. This function supports only Single Run, Sweeps and Corners run mode.")
("maeExportScenarioSetup"
"maeExportScenarioSetup(
t_reliabilityScenarioSetup
[ ?session t_sessionName ]
[ ?run t_runName ]
[ ?file t_fileName ]
[ ?allReadOnly g_allReadOnly ]
[ ?enabledReadOnly g_enabledReadOnly ]
)
=> t / nil"
"Exports the details of the specified reliability scenario setup to a CSV file.")
("maeGetReliabilityAnalysisEnabled"
"maeGetReliabilityAnalysisEnabled(
[ ?run t_runName ]
[ ?session t_session ]
)
=> t / nil"
"Returns the current status of the Reliability Analyses node in the active setup or in the specific run of a run plan.")
("maeGetReliabilityModel"
"maeGetReliabilityModel(
t_relxSetupName
[ ?run t_runName ]
[ ?session t_session ]
)
=> l_modelFile / nil"
"Returns the model file settings used for the specified reliability setup in the active setup or in the specific run of a run plan.")
("maeGetReliabilityOptionVal"
"maeGetReliabilityOptionVal(
t_relxSetupName
s_varName
[ ?run t_runName ]
[ ?session t_session ]
)
=> t_varValue / nil"
"Returns the value of the specified reliability option in a reliability setup.")
("maeGetReliabilityVarValue"
"maeGetReliabilityVarValue(
t_relxSetupName
t_varName
[ ?varType t_varType ]
[ ?run t_runName ]
[ ?session t_session ]
)
=> t_varValue / nil"
"Returns the value of the specified variable used in the fresh, stress, or aged test in a reliability setup.")
("maeGetRelxSetups"
"maeGetRelxSetups(
[ ?run t_runName ]
[ ?session t_session ]
[ ?enabled g_enabled ]
)
=> l_relxSetups / nil"
"Returns a list of reliability setups saved in the active setup or in the specific run of a run plan.")
("maeGetRelxSetupEnabled"
"maeGetRelxSetupEnabled(
t_relxSetupName
[ ?run t_runName ]
[ ?session t_session ]
)
=> t / nil"
"Returns the current status of a reliability setup in the active setup or in the specific run of a run plan.")
("maeGetRelxStressFile"
"maeGetRelxStressFile(
t_relxSetupName
[ ?run t_runName ]
[ ?session t_session ]
)
=> t_stressFile / nil"
"Returns the stress file used in the specified reliability setup in the active setup or in the specific run of a run plan.")
("maeGetRelxTest"
"maeGetRelxTest(
t_relxSetupName
[ ?testType t_testType ]
[ ?run t_runName ]
[ ?session t_session ]
)
=> t_testName / nil"
"Returns the name of the test used in the fresh, stress, or aged stage of a reliability setup.")
("maeGetRelxTestEnabled"
"maeGetRelxTestEnabled(
t_relxSetupName
[ ?testType t_testType ]
[ ?run t_runName ]
[ ?session t_session ]
)
=> t / nil"
"Returns the current status of a reliability stage in the specified reliability setup.")
("maeImportScenarioSetup"
"maeImportScenarioSetup(
t_reliabilityScenarioSetup
[ ?session t_sessionName ]
[ ?run t_runName ]
[ ?file t_fileName ]
[ ?operation t_typeOfOperation ]
)
=> t / nil"
"Imports the details from the specified CSV file to the existing reliability scenario setup.")
("maeRenameRelxSetup"
"maeRenameRelxSetup(
t_relxSourceName
t_relxDestName
[ ?run t_runName ]
[ ?session t_session ]
)
=> t / nil"
"Renames a reliability setup with the specified name.")
("maeSetReliabilityAnalysisEnabled"
"maeSetReliabilityAnalysisEnabled(
g_enabled
[ ?run t_runName ]
[ ?session t_session ]
)
=> t / nil"
"Sets the status of Reliability Analyses node to the specified value.")
("maeSetReliabilityModel"
"maeSetReliabilityModel(
t_relxSetupName
l_value
[ ?run t_runName ]
[ ?session t_session ]
)
=> t / nil"
"Sets the model files to be used in the specified reliability setup.")
("maeSetReliabilityOptionVal"
"maeSetReliabilityOptionVal(
t_relxSetupName
s_varName
t_varValue
[ ?run t_runName ]
[ ?session t_session ]
)
=> t / nil"
"Sets the value of the specified reliability option in a reliability setup.")
("maeSetReliabilityVarValue"
"maeSetReliabilityVarValue(
t_relxSetupName
t_varName
t_varValue
[ ?varType t_varType ]
[ ?run t_runName ]
[ ?session t_session ]
)
=> t / nil"
"Sets the value of the specified variable used in the fresh, stress, or aged test in a reliability setup.")
("maeSetRelxSetupEnabled"
"maeSetRelxSetupEnabled(
t_relxSetupName
g_enabled
[ ?run t_runName ]
[ ?session t_session ]
)
=> t / nil"
"Enables or disables a reliability setup in the active setup or in the specific run of a run plan.")
("maeSetRelxStressFile"
"maeSetRelxStressFile(
t_relxSetupName
t_stressFile
[ ?run t_runName ]
[ ?session t_session ]
)
=> t / nil"
"Sets the stress file to be used in the specified reliability setup in the active setup or in the specific run of a run plan.")
("maeSetRelxTest"
"maeSetRelxTest(
t_relxSetupName
t_testName
[ ?testType t_testType ]
[ ?run t_runName ]
[ ?session t_session ]
)
=> t / nil"
"Sets the name of the fresh, stress, or aged test used in the specified reliability setup.")
("maeSetRelxTestEnabled"
"maeSetRelxTestEnabled(
t_relxSetupName
g_enabled
[ ?run t_runName ]
[ ?session t_session ]
)
=> t / nil"
"Enables or disables a reliability stage in the specified reliability setup.")
("relxEnableFormTab"
"relxEnableFormTab(
r_formObject
t_tabName
g_enableBoolean
)
=> t / nil"
"Enables or disables the specified tab in the Reliability Options form.")
("relxDisplayDiscField"
"relxDisplayDiscField(
r_formObject
t_disclosureName
g_displaybleBoolean
)
=> t / nil"
"Shows or hides the specified disclosure in the Reliability Options form.")
("relxEnableDiscField"
"relxEnableDiscField(
r_formObject
t_disclosureName
g_enableBoolean
)
=> t / nil"
"Enables or disables the specified disclosure in the Reliability Options form.")
("relxHideAgeCalculationApproachField"
"relxHideAgeCalculationApproachField(
r_formObject
)
=> t"
"Hides the Age Calculation Approach field from the Modeling tab in the Reliability Options form.")
("relxGetCustomTabName"
"relxGetCustomTabName(
)
=> t_customTabName"
"Returns the name of the custom tab. You can also use this function to rename the custom tab.")
("relxCustomizeDisplayOrEnableStatus"
"relxCustomizeDisplayOrEnableStatus(
r_formObject
)
=> t"
"Defines the display and enable status of the disclosures, fields, and tabs.")
("relxCreateCustomizedTab"
"relxCreateCustomizedTab(
s_formSymbol
)
=> nil"
"Adds a customized tab to the Reliability Options form.")
("relxAddSetupRelxOption"
"relxAddSetupRelxOption (
[ ?name s_name ]
[ ?type s_type ]
[ ?prompt t_prompt ]
[ ?choices l_choices ]
[ ?value g_value ]
[ ?display g_display ]
[ ?enabled g_enabled ]
[ ?onFields l_onFields ]
[ ?buttonLocation s_buttonLocation ]
[ ?callback t_callback ]
[ ?defValue g_defValue ]
[ ?itemsPerRow x_itemsPerRow ]
[ ?items l_items ]
[ ?frame g_frame ]
[ ?formApplyCB s_formApplyCB ]
[ ?scrollable g_scrollable ]
[ ?tooltip t_tooltip ]
[ ?spacing x_spacing ]
[ ?discLayout s_discLayout ]
[ ?buttonIcon g_buttonIcon ]
)
=> r_fieldHandle"
"Adds new fields to the Reliability Options form.")
("asiFormatSpecialParameterForRel"
"asiFormatSpecialParameterForRel(
o_oasisSession
p_fp
)
=> t"
"Netlists the new options added to the customized tab.")
("relxInitOptionsInCdsenv"
"relxInitOptionsInCdsenv(
o_tool
)
=> nil"
"Creates environment variables for the customized options added to the Reliability Options form.")
("relxAddReliabilityInStateComponent"
"relxAddReliabilityInStateComponent (
t_sessionName
)
=> t / nil"
"Adds the Reliability Setup option in the save and load state forms of the specified session. To reuse the save and load state flow of ADE in your simulator, you can rewrite this function and ensure that the function returns t.")
("relxAddReliabilityOption"
"relxAddReliabilityOption (
t_toolName 
[ ?name t_name ]
[ ?value t_value ]
[ ?type t_type ]
[ ?mode t_mode ]
[ ?enabled g_enabled ]
[ ?prompt t_prompt ]
[ ?display g_display ]
[ ?choices l_choices ]
[ ?callback g_callback ]
[ ?formApplyCB g_formApplyCB ]
[ ?page t_page ]
[ ?coordinates l_coordinates ]
[ ?private g_private ]
)
=> t_relVar / nil"
"Adds a variable to the specified Reliability tool.")
("relxCreateRunObjectFile"
"relxCreateRunObjectFile(
t_sessionName
)
=> t / nil"
"Creates the runObject file for the specified session.")
("relxDisplayReliabilityForm"
"relxDisplayReliabilityForm(
s_sevSession
)
=> t / nil"
"Displays the Reliability form for the specified session.")
("relxDisplayResult"
"relxDisplayResult (
t_sessionName
t_file
)
=> t / nil"
"Displays the specified result log file.")
("relxFormatRXControlFile"
"relxFormatRXControlFile(
t_sessionName
)
=> t / nil"
"When the session is created using Spectre, this function creates a file that includes all the possible options for Relxpert Reliability simulator mode. This function does not work for other sessions. If Lynx's netlist flow is based on the result of this function, you need to rewrite the relxGetRXControlFileName function.")
("relxGetModifyNetlistVal"
"relxGetModifyNetlistVal(
t_sessionName
)
=> t / nil"
"Checks whether to modify the netlist before aging starts. You can rewrite this function as per your requirements.")
("relxGetMosAgingTimeUnitVal"
"relxGetMosAgingTimeUnitVal(
t_sessionName
)
=> t_agingTimeUnit / nil"
"Returns the unit of aging time, which can be represented in years, days, hours, minutes or seconds. Only one unit of time is supported for a given simulation run.")
("relxGetMosAgingTimeVal"
"relxGetMosAgingTimeVal (
t_sessionName
)
=> t_agingTimeValue / nil"
"Returns the aging time value of the simulation in the specified session. The aging time can be in years, days, hours, minutes or seconds. Only one unit of time is supported for a given simulation run.")
("relxGetReliabilityOptionChoices"
"relxGetReliabilityOptionChoices(
t_sessionName 
s_optionName
)
=>  t_optionValues / nil"
"Returns the possible values for the specified Reliability option in the given analog session. This function works for fields that are of type radio, cyclic, and toggle.")
("relxGetReliabilityOptionVal"
"relxGetReliabilityOptionVal(
t_sessionName
s_optionName
)
=> t_reliabilityOptionValue/ nil"
"Returns the value of the specified Reliability option variable in the given session.")
("relxGetRelxStage"
"relxGetRelxStage(
o_session
)
=> t_relxStage / nil"
"Returns the current stage of the reliability simulation in the given session.")
("relxGetStressFileDir"
"relxGetStressFileDir(
o_session
)
=> t_stressFileDir / nil"
"Returns the directory of the stress file.")
("relxGetRXControlFileName"
"relxGetRXControlFileName(
t_sessionName
)
=> t_RXControlFilename / nil"
"Returns the name of the RXControl file.")
("relxGetSimulationRunCommand"
"relxGetSimulationRunCommand (
t_sessionName
)
=> t_runSimulationFileName / nil"
"Formats the content of the simulation run file present in the netlist directory. This file is required to run simulation flow.")
("relxGetSpecifiedReliabilityStateFileName"
"relxGetSpecifiedReliabilityStateFileName(
t_sessionName
)
=> t_filename/ nil"
"Returns the name of the state file used the Reliability form. By default, the name of the state file is relxOptions. However, you can rewrite this function to define another name for the state file for your simulator.")
("relxGetUserCmdLine"
"relxGetUserCmdLine(
t_sessionName
) 
=> t_UserCmdLine / nil"
"Returns the value of the userCmdLine option in the specified session.")
("relxHighLightDevices"
"relxHighLightDevices(
t_sessionName
l_instList
l_tagList
)
=> t / nil"
"Highlights the specified device and instance list on schematic, and also displays information for the selected devices and instances in the form of tags.")
("relxInitAdapterReliabilityOption"
"relxInitAdapterReliabilityOption(
t_toolName
)"
"Rewrites the asiInitialize function when called in the initialization flow for the specified tool. This function internally calls the relxInitReliabilityOption function and also adds some private variables to this function.")
("relxInitReliabilityOption"
"relxInitReliabilityOption"
"Initializes the Reliability Option form in the specified tool. You can rewrite this function by using unit functions relxAddReliabilityOption and relxSetReliabilityOptionFormProperties.")
("relxIsAgingOn"
"relxIsAgingOn"
"Checks whether aging is ON or OFF in the specified session.")
("relxIsReliabilityEnabled"
"relxIsReliabilityEnabled"
"Checks whether the Reliability analysis is enabled or disabled in the specified session.")
("relxIsStressOn"
"relxIsStressOn"
"Checks whether the stress is ON or OFF in the specified session.")
("relxPostSimulation"
"relxPostSimulation"
"Description")
("relxRunSimulation"
"relxRunSimulation"
"Runs the Relxpert simulation.")
("relxSetAgingVal"
"relxSetAgingVal"
"Enables or disables aging for simulation in the specified session. Also sets the specified simulation aging value, while enabling aging.")
("relxSetReliabilityOptionFormProperties"
"relxSetReliabilityOptionFormProperties"
"Sets the various properties of the Reliability form.")
("relxSetReliabilityOptionVal"
"relxSetReliabilityOptionVal"
"Sets the value of the specified Reliability option variable in the given session.")
("relxSetReliabilityVal"
"relxSetReliabilityVal"
"Enables or disables the Reliability analysis in the specified session.")
("asiStmSupportWaveformGeneration"
"asiStmSupportWaveformGeneration(
o_session
)
=> t / nil"
"Determines whether the Stimuli Assignment form supports waveform preview functionality or not.")
("asiStmGenerateNetlist"
"asiStmGenerateNetlist(
o_session
wavepath
nodeDesc
[ o_simOptions ]
)
=> l_netlistStatus"
"Generates netlist, as part of preview waveform generation for a stimuli and saves it at the specified psf directory path.")
("asiStmRunSimulation"
"asiStmRunSimulation(
o_session
wavepath
nodeDesc
[ o_simOptions ]
[ o_varDefinitions ]
)
=> l_simStatus"
"Runs a simulation by using the netlist generated by SKILL function asiStmGenerateNetlist, and writes the psf waveform data at the specified path.")
("asiStmGenerateWaveform"
"asiStmGenerateWaveform(
o_session
t_wavepath
t_stimuliDesc
[ o_simOptions ]
[ o_varDefinitions ]
)
=> l_waveStatus"
"Generates preview waveforms for the specified stimuli under the given directory path.")
("ahdlUpdateViewInfo"
"ahdlUpdateViewInfo(
t_lib 
[ ?cell lt_cell ]
[ ?view lt_view ]
[ ?tool lt_tool ] 
)"
"Updates cells and cellviews created with releases earlier than 4.4.2 so that the cells and cellviews can use cellview-specific parameters and parameter values. During the update, ahdlUpdateViewInfo, parses the Verilog-A or SpectreHDL modules that define the specified cellviews, issues any necessary error messages and updates the cellview CDF information.")
("amseGeneralSetupForm"
"amseGeneralSetupForm(
o_session
)
=> t / nil"
"Opens the General Setup form in Virtuoso AMS Designer. The General Setup form appears when you choose Detailed Setup and then General Setup from the AMS menu in Hierarchy Editor.")
("amseQuickSetupForm"
"amseQuickSetupForm(
o_session
)
=> t / nil"
"Opens the Quick Setup form in Virtuoso AMS Designer. The Quick Setup form appears when you choose Quick Setup from the AMS menu in Hierarchy Editor.")
("amsOSSUnlExecutePostNetlistTrigger"
"amsOSSUnlExecutePostNetlistTrigger(
o_session
)"
"This is a callback function that gets triggered after AMS UNL netlisting.")
("amsUpdateTextviews"
"amsUpdateTextviews(
t_libName 
[ ?cell t_cellName ]
[ ?view t_viewName ]
[ ?incremental g_incremental ] 
)
=> t / nil"
"Creates a Virtuoso database, depending on the arguments passed for the following:")
("vmsUpdateCellViews"
"vmsUpdateCellViews(
[ ?lib t_lib ]
[ ?cell t_cell ]
[ ?view t_view ]
[ ?viewt t_viewType ]
)
=> t / nil"
"Updates AMS Designer information with the current state of verilog, systemVerilog, veriloga, verilogams and vhdl text views. You might use this function, for example, when you have updated a Verilog-AMS source file outside of the AMS Designer environment. You might also use it when you receive a Verilog-AMS library in a single source file, bring it into the Library.Cell:View structure using xmvlog -use5x, and then need to prepare the library for use in the AMS Designer environment.")
("annRetrieveFromEffectiveCDF"
"annRetrieveFromEffectiveCDF"
"Retrieves the data from effective CDF. This function is used to match the CDF properties of the graphical window with the global effective CDF properties and needs to be called before annotating CDF properties to reflect the changes done in effective CDF properties.")
("artEnableAnnotationBalloon"
"artEnableAnnotationBalloon(
g_value 
[ x_firstPoint ]
[ x_lastPoint ]
)
=> t / nil"
"Enables or disables the display of parametric sweep results annotated on the schematic. When enabled, the first six result points are displayed in a pop-up window that appears when you hover the mouse pointer over an instance on the schematic. Use x_firstPoint and x_lastPoint to specify a range of result points to be displayed in the pop-up window.")
("artGenerateHierSymbolCDF"
"artGenerateHierSymbolCDF(
d_cellView
[ g_overwrite ]
) 
=> t"
"Creates the cell CDF for the specified cellView, in the same way as happens when you create a symbol from a schematic in Composer. The cellView will be examined for any use of pPar() in expressions, and the corresponding parameters will be added to the CDF if they are not already present. Whilst both schematic and symbol cellViews may be passed to this function, it is usually best to pass a schematic cellView, in order to get the pPar()s used into the CDF.")
("artGetCdfTargetCV"
"artGetCdfTargetCV(
)
=> dbobject / nil"
"This procedure returns the cell view dbobject that is the target of the update instance form or the create instance form. The function requires that either the arm property (armGet 'cdfInfo 'currentCellView) is set to a cellView, or that the variable cdfgForm is bound to a form with a property cellViewId attached (getq cdfgForm cellViewId). If neither of these is bound, nil is returned.")
("artGetCellViewDesignVarList"
"artGetCellViewDesignVarList(
d_cellViewId
)
=> l_nameValuePairs"
"Returns the list of design variable name value pairs associated with the top level cell view.")
("artCurrentInstSimName"
"artCurrentInstSimName( 
)
=> t_extName"
"This function provides the external instance name for the current instance being formatted in the netlister. The function should only be used for socket netlisters or custom netlist procedures for socket. The routine does not take into consideration case mapping registered for the tool or the prefix for the instance. It does take care of the netlisting mode (FNL, HNL or IHNL).")
("artListToWaveform"
"artListToWaveform( 
l_xyPairs
) 
=> o_waveform"
"This function takes a list of X,Y points and translates it into a waveform. Each of the X,Y points is also in a list format. If Y points are represented in a list format, they are treated as complex numbers while creating the waveform.")
("artBlankString"
"artBlankString(
g_value
)
=> t / nil"
"Returns true if the given object is equal to nil. If the given object is a string, checks if the string is empty or has blank space characters only and returns true. If the object is not nil and if the string has non-space characters, it returns nil.")
("artMakeString"
"artMakeString( 
g_anyArg
)
=> t_argAsString / nil"
"Converts data of the given data type to a string. The valid data types for the g_anyArg argument include symbol, integer, float, and string. The floating point numbers are converted into strings by using the '%.16g' format specification to produce the most precise output.")
("artMakeStringPrec15"
"artMakeStringPrec15( 
g_anyArg
)
=> t_argAsString / nil"
"Converts data of the given data type to a string. The valid data types for the g_anyArg argument include symbol, integer, float, and string. It similar to the function artMakeString, except that it uses the '%.15g' format specification to convert the floating point numbers into strings.")
("asiAddDesignVarList"
"asiAddDesignVarList( 
o_session
l_designVarList
)
=> l_newDesignVarList"
"Adds a list of variables to the existing session design variable list.")
("asiAddVerilogArgs"
"asiAddVerilogArgs( 
o_session
t_verilogArg
)
=> t_verilogArg"
"For a mixed-signal simulation, this method lets you change the list of arguments that are sent to the Verilog-XL simulator with the -slave option.")
("asiGetDataReaderVersion"
"asiGetDataReaderVersion(
t_format
)
=> t_formatVersion"
"Returns the current version of data reader for the specified format.")
("asiLoadState"
"asiLoadState( 
o_session
[ ?name t_name ]
[ ?option s_option ]
[ ?stateDir t_stateDir ]
[ ?lib t_lib ]
[ ?cell t_cell ]
[ ?simulator t_simulator ]
)
=> t / nil"
"Loads a saved state into the current simulation environment directly from the CIW without displaying the Loading State form.")
("asiSaveState"
"asiSaveState( 
o_session
[ ?name t_name ]
[ ?option s_option ]
[ ?stateDir t_stateDir ]
[ ?lib t_lib ]
[ ?cell t_cell ]
[ ?simulator t_simulator ]
[ ?description t_description ]
)
=> t / nil"
"Saves the current state of the current simulation environment directly from the CIW without displaying the Saving State form.")
("asiCheck"
"asiCheck( 
o_analysis | o_anaOption | o_envOption | o_simOption | o_keepOption 
r_form 
)
=> t / nil"
"Called by the environment to check values in the analysis and option fields.")
("asiCheckDesignVariable"
"asiCheckDesignVariable( 
o_obj 
r_form 
s_fieldName 
)
=> t / nil"
"Verifies that the s_fieldName entry is a valid design variable.")
("asiCheckExpression"
"asiCheckExpression( 
o_obj 
r_form 
s_fieldName 
[ ?subAnaMsg t_subAnaMsg ]
) 
=> t / nil"
"Verifies that the s_fieldName entry is a valid expression.")
("asiCheckExpressionGreater"
"asiCheckExpressionGreater( 
o_obj
r_form
s_fieldName
g_value 
[ ?subAnaMsg t_subAnaMsg ] 
) 
=> t / nil"
"Verifies that the s_fieldName entry is an expression that evaluates to a value greater than g_value.")
("asiCheckBlankNumeric"
"asiCheckBlankNumeric( 
o_obj
r_form
s_fieldName
[ ?subAnaMsg t_subAnaMsg ] 
) 
=> t / nil"
"Verifies that the s_fieldName entry is a numeric value.")
("asiCheckBlankNumericGreater"
"asiCheckBlankNumericGreater( 
o_obj 
r_form
s_fieldName 
g_value 
[ ?subAnaMsg t_subAnaMsg ]
) 
=> t / nil"
"Verifies that the s_fieldName entry is a numeric value greater than g_value.")
("asiCheckBlankNumericNequal"
"asiCheckBlankNumericNequal(
o_obj
r_form
s_fieldName
g_value
[ ?subAnaMsg t_subAnaMsg ]
)
=> t / nil"
"Verifies that the s_fieldName entry is a numeric value not equal to g_value.")
("asiCheckBlankNetExists"
"asiCheckBlankNetExists( 
o_obj 
r_form 
s_fieldName
[ ?subAnaMsg t_subAnaMsg ] 
)
=> t / nil"
"Verifies that the s_fieldName entry is a valid net name.")
("asiCheckBlankInstExists"
"asiCheckBlankInstExists( 
o_obj 
r_form 
s_fieldName 
[ ?subAnaMsg t_subAnaMsg ]
) 
=> t / nil"
"Verifies that the s_fieldName entry is a valid instance name.")
("asiCheckMultipleGreater"
"asiCheckMultipleGreater( 
o_obj 
r_form 
s_largerField 
s_smallerField 
) 
=> t / nil"
"Verifies that the value of the s_largerField entry is greater than that of the s_smallerField entry.")
("asiCheckSimulationSuccess"
"asiCheckSimulationSuccess( 
o_session 
) 
=> t / nil"
"Determines if a simulation was successful.")
("asiCreateLogFileVerilog"
"asiCreateLogFileVerilog( 
o_session 
l_entryList 
)"
"Creates the file logFileVerilog in the .../psf directory to indicate the analysis result of Verilog-XL in a mixed-signal transient run.")
("asiDcStore"
"asiDcStore(
o_session 
t_fileName
) 
=> t / nil"
"Copies the DC node voltages in processId.dc to the name you pass in fileName. This function assumes that your simulator writes the DC node voltages to netlistDir/raw/processId.dc. ")
("asiGetCurrentSession"
"asiGetCurrentSession(
) 
=> o_session / nil"
"Returns the session object for the current session. ")
("asiGetDesignVarList"
"asiGetDesignVarList( 
o_session 
) 
=> l_designVarList / nil"
"Gets the list of design variables for the design associated with the session you specify.")
("asiGetFormFieldChoices"
"asiGetFormFieldChoices( 
r_form 
s_fieldName 
)
=> l_choices / nil"
"Gets the list of choices for a form field that is set up as a list box.")
("asiGetFormFieldVal"
"asiGetFormFieldVal( 
r_form 
s_fieldName 
)
=> g_value / nil"
"Gets the value of a field on a form.")
("asiGetKeepList"
"asiGetKeepList( 
o_session 
) 
=> l_keepList / nil"
"Gets a list of signals and currents that are saved during simulation.")
("asiGetLogFileList"
"asiGetLogFileList( 
o_session
)
=> l_logFiles / nil"
"Returns a list of the names of the log files.")
("asiGetMarchList"
"asiGetMarchList( 
o_session
) 
=> l_marchList / nil"
"Returns a list of signals that are to be marched during simulation.")
("asiGetNetlistDir"
"asiGetNetlistDir( 
o_session
) 
=> t_netlistDir"
"Returns the netlist directory. If the directory does not exist, this function creates it.")
("asiGetOutputList"
"asiGetOutputList( 
o_session
) 
=> o_outputsList / nil"
"Returns a list of structures. Each structure defines a output to be saved and/or plotted after simulation.")
("asiGetPlotList"
"asiGetPlotList( 
o_session 
) 
=> l_plotList / nil"
"Gets the list of signals that can be plotted for the current simulation session. ")
("asiGetPsfDir"
"asiGetPsfDir( 
o_session
)
=> t_dirName / nil"
"Returns the name of the PSF directory.")
("asiGetSession"
"asiGetSession(
{ x_id | w_window | r_form | s_name | o_analysis }
)
=> o_session / nil"
"Returns the session object given one of five possible identifiers.")
("asiGetSimName"
"asiGetSimName( 
{ o_tool | o_session }
)
=> t_simulatorName"
"Gets the name of the simulator for a tool or session object.")
("asiGetTool"
"asiGetTool( 
{ t_toolName | o_session }
)
=> o_tool"
"Returns the tool object associated with the specified tool name or session. If the tool object is not found, an attempt is made to create and initialize the tool. ")
("asiGetTopCellView"
"asiGetTopCellView( 
o_session
)
=> d_cellView / nil"
"Returns the top-level cellview associated with the session. ")
("asiSendSim"
"asiSendSim( 
o_session 
t_command 
t_callback 
g_param 
g_saveOutput
)
=> t"
"Sends a command to Cadence SPICE to forward to the target simulator.")
("asiSetDesignVarList"
"asiSetDesignVarList(
o_session 
l_designVarList 
)
=> l_designVarList"
"Sets the design variable list for a session.")
("asiSetFormFieldChoices"
"asiSetFormFieldChoices( 
r_form 
s_fieldName 
l_choices
)
=> l_choices / nil"
"Sets the list of choices to appear in the list box for the specified form field.")
("asiSetFormFieldVal"
"asiSetFormFieldVal( 
r_form
s_fieldName
g_value
)
=> g_value / nil"
"Sets the value of a field on a form.")
("asiSetKeepList"
"asiSetKeepList( 
o_session 
l_KeepList
)
=> l_KeepList"
"Sets the list of the specific signals and currents to save during simulation.")
("asiSetMarchList"
"asiSetMarchList( 
o_session 
l_MarchList 
)
=> l_MarchList"
"Sets the list of signals to march during simulation.")
("asiSetPlotList"
"asiSetPlotList( 
o_session 
l_PlotList
)
=> l_PlotList"
"Sets the plot list for the current simulation session.")
("asiSetSyncFlag"
"asiSetSyncFlag( 
g_flag
) 
=> g_flag"
"This function makes the simulation run in a blocking mode. This implies that control does not come back till the simulation is over. This functionality is needed in the replay files in order to wait for a simulation to finish before proceeding. Call this function (asiSetSyncFlag(t)) just before launching a simulation. This function should only be used for testing capabilities. OCEAN should be used for scripting simulations.")
("asiTransientStore"
"asiTransientStore(
o_session 
t_fileName
)
=> t / nil"
"Copies the final transient operating points in processId.tr to the name you pass in fileName. This function assumes that your simulator writes the final transient operating points to netlistDir/raw/processId.tr. ")
("asiMapNetName"
"asiMapNetName(
t_dataDir
l_specifier
[ ?formatflag s_formatflag ]
) 
=> l_specifier"
"Maps the hierarchical schematic net name to the name in the netlist.")
("asiMapTerminalName"
"asiMapTerminalName( 
t_dataDir
l_specifier
[ ?formatflag s_formatflag ]
) 
=> l_specifier"
"Maps the hierarchical schematic terminal name to the name in the netlist.")
("asiMapInstanceName"
"asiMapInstanceName( 
t_dataDir
l_specifier
[ ?formatflag s_formatflag ]
) 
=> l_specifier"
"Maps the hierarchical schematic instance name to the name in the netlist.")
("asiRegCallBackOnSimComp"
"asiRegCallBackOnSimComp( 
o_session
t_callback 
) 
=> t / nil"
"Registers the specified user-defined callback function to run after completion of a simulation. The callback function should accept two arguments, a session object and the simulation status.")
("asiUnRegCallBackOnSimComp"
"asiUnRegCallBackOnSimComp( 
t_callback 
) 
=> t / nil"
"Deregisters the specified callback function registered to run on completion of the simulation.")
("asiRegCallBackOnSimCompForDist"
"asiRegCallBackOnSimCompForDist( 
o_session 
t_callback 
) 
=> t / nil"
"Registers the specified user-defined callback function to run after completion of distributed jobs.")
("asiUnRegCallBackOnSimCompForDist"
"asiUnRegCallBackOnSimCompForDist( 
o_session 
t_callback 
) 
=> t / nil"
"Unregisters the specified user-defined callback function that is registered using the asiUnRegCallBackOnSimComp function.")
("almDefineParam_accuracyMode"
"almDefineParam_accuracyMode(
t_cellName
) 
=> s_cellParameter / nil"
"This function is used to define the accuracy mode.")
("almDefineParam_additionalParam"
"almDefineParam_additionalParam(
t_cellName
) 
=> s_cellParameter / nil"
"This function is used to enable additional parameters.")
("almDefineParam_fq"
"almDefineParam_fq(
t_cellName
) 
=> s_cellParameter / nil"
"This function is used to define a fq parameter.")
("almDefineParam_noiseParaLabel"
"almDefineParam_noiseParaLabel(
t_cellName
) 
=> s_cellParameter / nil"
"Noise parameter label.")
("almDefineParam_nportFileB"
"almDefineParam_nportFileB(
t_cellName
) 
=> s_cellParameter / nil"
"nport file.")
("almDefineParam_otherParaLabel"
"almDefineParam_otherParaLabel(
t_cellName
) 
=> s_cellParameter / nil"
"This function is used to enable other paramters.")
("almDefineParam_tranAdvanParaLabel"
"almDefineParam_tranAdvanParaLabel(
t_cellName
) 
=> s_cellParameter / nil"
"Advanced tran parameter.")
("almDefineParam_tranParaLabel"
"almDefineParam_tranParaLabel(
t_cellName
) 
=> s_cellParameter / nil"
"tran parameter label.")
("almGetModuleName"
"almGetModuleName(
t_lib 
t_cell 
[ ?view g_view ]
[ ?tool g_tool ]
) 
=> s_moduleName / nil"
"Returns the module name for the arguments specified. The netlist procedure is set with almSetModuleName.")
("almGetNamePrefix"
"almGetNamePrefix(
t_lib 
t_cell 
[ ?view g_view ]
[ ?tool g_tool ]
) 
=> t_namePrefix / nil"
"Returns the name prefix for the arguments specified. The netlist procedure is set with almSetNamePrefix.")
("almGetParameterList"
"almGetParameterList(
t_lib
t_cell
[ ?view g_view ]
[ ?tool g_tool ]
[ ?entry g_entry ]
) 
=> l_parameterList / nil"
"Returns the list of parameters for the arguments specified. The parameter list is set with almSetParameterList.")
("almGetTerminalList"
"almGetTerminalList(
t_lib
t_cell
[ ?view g_view ]
[ ?tool g_tool ]
) 
=> l_terminalList / nil"
"Returns the list of terminal names for the arguments specified. The netlist procedure is set with almSetTerminalList.")
("almGetTerminalMap"
"almGetTerminalMap(
t_lib
t_cell
S_terminal
[ ?view g_view ]
[ ?tool g_tool ]
) 
=> s_map / nil"
"Returns the simulator name of a terminal for the arguments specified. The netlist procedure is set with almSetTerminalMap.")
("almSetTerminalMap"
"almSetTerminalMap(
t_lib
t_cell
S_name
g_map
[ ?view g_view ]
[ ?tool g_tool ]
)"
"Sets the mapped name (simulator name) for a terminal name (schematic name) for the arguments specified. The mapped name is used for results display and it is used by the simulator interface in the simulator input file.")
("almGetOpPointParamMap"
"almGetOpPointParamMap( 
t_lib
t_cell
[ ?view g_view ] 
[ ?tool g_tool ]
) 
=> l_opMap / nil"
"Returns the operating-point parameter map for the arguments specified. The netlist procedure is set with almSetOpPointParamMap.")
("almSetOpPointParamMap"
"almSetOpPointParamMap(
t_lib 
t_cell 
l_map 
[ ?view t_view ]
[ ?tool t_tool ]
)"
"Sets the operating-point parameter map for the arguments specified. This map is used in results display.")
("almGetNetlistProcedure"
"almGetNetlistProcedure(
t_lib
t_cell
[ ?view g_view ]
[ ?tool g_tool ]
) 
=> s_procedure / nil"
"Returns the netlist procedure for the arguments specified. The netlist procedure is used to netlist an instance. The netlist procedure is declared with almSetNetlistProcedure.")
("almGetViewInfoNameList"
"almGetViewInfoNameList(
t_lib 
t_cell
) 
=> l_view_list / nil"
"Returns the list of view-name strings for which view-specific information is available, and for which the view exists.")
("almGetNetlistType"
"almGetNetlistType(
t_lib
t_cell
[ ?view t_view ]
) 
=> t_netlistType / nil"
"Returns the netlist type for the library, cell and view specified, if view-specific information is available. This procedure issued during netlisting.")
("almHasViewInformation"
"almHasViewInformation( 
t_lib 
t_cell 
t_view 
) 
=> t / nil"
"Determines if the view-specific information is available for the library, cell, and view specified.")
("almSetNamePrefix"
"almSetNamePrefix(
t_lib
t_cell
t_name
[ ?view g_view ]
[ ?tool g_tool ]
)"
"Sets the name prefix for the view or the tool specified.")
("almSetModuleName "
"almSetModuleName (
t_lib
t_cell
t_name
[ ?view g_view ]
[ ?tool g_tool ]
)"
"Sets the module name for the view or tool.")
("almSetNetlistProcedure"
"almSetNetlistProcedure(
t_lib
t_cell
s_procedure
[ ?view g_view ]
[ ?tool g_tool ]
)"
"Sets the netlist procedure for the arguments specified.")
("almSetParameterList"
"almSetParameterList(
t_lib
t_cell
l_parameter
[ ?view g_view ]
[ ?tool g_tool ]
[ ?entry g_entry ]
)"
"Sets list of parameter names for the arguments specified.")
("almSetTerminalList"
"almSetTerminalList(
t_lib
t_cell
l_termList
[ ?view t_view ]
[ ?tool t_tool ]
)"
"Sets the list of terminal names for the lib arguments specified.")
("almSetPropMappingList"
"almSetPropMappingList( 
t_lib
t_cell
l_parameter
[ ?view g_view ]
[ ?tool g_tool ]
[ ?entry g_entry ]
)"
"Sets the list of propMapping for the arguments specified.The parameters specified in the l_parameter list are mapped and printed to the netlist if the user has specified these values.")
("almGetPropMappingList"
"almGetPropMappingList( 
t_lib
t_cell
[ ?view g_view ]
[ ?tool g_tool ]
[ ?entry g_entry ]
)
=> l_propMappingList / nil"
"Returns the propMapping parameter list for the arguments specified. The propMapping list is set with almSetPropMappingList.")
("almSetOtherParameterList"
"almSetOtherParameterList(
t_lib
t_cell
l_parameter
[ ?view g_view ]
[ ?tool g_tool ]
[ ?entry g_entry ]
)"
"Sets list of other parameter names for the arguments specified.")
("almGetOtherParameterList"
"almGetOtherParameterList(
t_lib
t_cell
[ ?view g_view ]
[ ?tool t_tool ]
[ ?entry s_entry ]
)
=> l_parameterList / nil"
"Returns the otherParameter list for the arguments specified. The otherParameter list is set with almSetOtherParameterList.")
("almGetStringParameterList"
"almGetStringParameterList(
t_lib
t_cell
[ ?view g_view ]
[ ?tool g_tool ]
[ ?entry g_entry ]
)=> l_parameterList / nil"
"Returns the list of string type parameters for the arguments specified. The parameter list is set with almSetStringParameterList.")
("almSetStringParameterList"
"almSetStringParameterList(
t_lib
t_cell
l_parameter
[ ?view g_view ]
[ ?tool g_tool ]
[ ?entry g_entry ]
)"
"Sets list of string parameter names for the arguments specified. These parameters are printed to the netlist if the user has given these values.")
("ancGetSimInstName"
"ancGetSimInstName( 
l_netlistDpl
)
=> t_extName"
"This function provides the external instance name for the current instance being formatted in the netlister. The function must only be used by customized socket netlisters or custom socket netlist procedures. The routine takes into consideration the netlist mode (FNL, HNL or IHNL), case mapping (lower, upper or mixed) and the prefix for the instance.")
("ancAdjustNameCase"
"ancAdjustNameCase( 
S_name 
s_type 
)
=> S_name"
"The function adjusts case for the name passed, based on the type specified.")
("drbBrowseFormCB"
"drbBrowseFormCB(
) 
=> t / nil"
"Opens the Browse Project Hierarchy window.")
("msgHelp"
"msgHelp(
S_prodID 
S_msgID
) 
=> t / nil"
"This function is used to access extended help for an error or a warning message. Currently, Distributed Processing (DP) is the only product that supports this feature.")
("addCheck"
"addCheck(
t_name
[ ?sub t_sub ]
[ ?dev t_dev ]
[ ?devlist l_devlist ]
[ ?prim t_prim ]
[ ?mod t_mod ]
[ ?instparam t_instparam ]
[ ?modelparam t_modelparam ]
[ ?opparam t_opparam ]
[ ?parameter t_parameter ]
[ ?expression t_expression ]
[ ?min t_min ]
[ ?max t_max ]
[ ?regions t_regions ]
[ ?duration t_duration ]
[ ?message t_message ]
[ ?severity t_severity ]
[ ?analyses l_analyses ]
)
=> t_name / nil"
"Adds a new device check. Checks can be added to check a device parameter, a subcircuit parameter, a design variable or an expression. The scope of check is decided by the arguments ?sub, ?dev, ?mod, and ?prim. The ?min and ?max parameters can be used to set up the safe region if the parameter/expression being checked goes out of this region and a violation is reported.")
("deleteChecks"
"deleteChecks(
t_check1 
[ t_check2 t_check3... ]
)
=> l_checks / nil"
"Deletes device checks.")
("densityEstimateWaveform"
"densityEstimateWaveform(
histWf
)
=> waveform"
"Returns the density estimator waveform of a histogram.")
("disableAllChecks"
"disableAllChecks(
)
=> t / nil"
"Disables all device checks.")
("disableChecks"
"disableChecks(
t_check1 
[ t_check2 t_check3... ]
)
=> l_checks / nil"
"Disables device checks. Only enabled device checks appear in Spectre input deck.")
("disableDeviceChecking"
"disableDeviceChecking(
)
=> no / nil"
"Disables device checking. It is the same as turning off the Enable Device Checking check box in the Device Checking Setup form. No checks are written to Spectre input file. No device checking happens.")
("displayChecks"
"displayChecks(
?resultsDir t_resultsDir 
[ t_check1 t_check2 t_check3... ]
)
=> nil"
"Displays device checks. If no name is provided, this function displays all checks that have been added so far. If no device checks have been added and a results directory is set by using the openResults() command, it prints device checks from the asserts.info.asserts file in that results directory. If the results directory is provided, it displays device checks found in the asserts.info.asserts file in that results directory.")
("enableAllChecks"
"enableAllChecks(
)
=> t / nil"
"Enables all device checks.")
("enableChecks"
"enableChecks(
t_check1 - 1_checkn
)
=> l_checks / nil"
"Enables device checks. Only enabled device checks appear in Spectre input deck.")
("enableDeviceChecking"
"enableDeviceChecking(
)
=> yes / nil"
"Enables device checking. It is the same as turning on the Enable Device Checking check box in the Device Checking Setup form.")
("setDevCheckOptions"
"setDevCheckOptions(
[ ?analysis s_analysis ]
[ ?start t_start ]
[ ?stop t_stop ]
[ ?severity t_severity ]
[ ?enableAll t_enableAll ]
[ ?disableAll t_disableAll ]
)"
"This function can be used to set various parameters of checklimit statements. User can override the severity specified on individual asserts, provide the time interval during which the checking should be done (applies only to transient analysis), or enable/disable all device checks for the given analysis.")
("printViolations"
"printViolations(
[ ?output t_output ]
[ ?checks l_checks ]
[ ?devices l_devices ]
[ ?models l_models ]
[ ?primitives l_primitives ]
[ ?resultsDir t_resultsDir ]
)
=> t / nil"
"Prints a summary of all violations. Format of the output is similar to that of the output from the Print button on the Violations Display form. The resultsDir argument can be used to print violations from the different results directory.")
("captabSummary"
"captabSummary(
[ ?resultsDir t_resultsDir ]
[ ?analysis o_analysis ]
)"
"Prints a summary of the capacitance table from the specified results directory.")
("evmOFDM"
"evmOFDM(
o_waveform1
o_waveform2
e_sigStandard
n_tstart
e_modulationType
n_fftSize
n_PrefixLength
n_SymbolPeriod
[ ?packet n_packetLength ]
[ ?modifier e_modifier ]
[ ?skiplength n_skiplength ]
[ ?idx n_idx ]
[ ?getval g_getval ]
)
=> constellation o_waveform evm_value / nil"
"Processes the I and Q waveform outputs from the hb-envlp simulation run to calculate the Error Vector Magnitude (EVM) and plot the I versus Q scatterplot (constellation). EVM is a useful measurement to describe the overall signal amplitude and phase modulated signal quality. It is based on a statistical error distribution normalized from an ideal digital modulation. Orthogonal Frequency Division Multiplexing (OFDM) is a modern high throughput modulation scheme widely used in wireless signals, such as 802.11a,g,n, where EVM measurement is useful . The EVM is calculated by detecting the I and Q signal levels corresponding to constellation points of each modulation type (can be BPSK, QPSK, 16QAM, and 64QAM) and calculating the difference between the signal level and the ideal signal level.")
("relxOption"
"relxOption(
[ s_option1 g_optionValue1 ]....[ s_optionN g_optionValueN ]
)
=> undefined / nil"
"Enables you to specify the RelXpert options, along with values, to be used by the simulator.")
("asiAddModelLibSelection"
"asiAddModelLibSelection(
{ o_session | o_tool }
t_modelLibFile
t_section
)
=> t / nil"
"Adds a model file by adding an entry to the model library file section (corresponding environment variable modelFiles) and calls asiInvalidateControlStmts.")
("asiRemoveAllModelLibSelection"
"asiRemoveAllModelLibSelection(
{ o_session | o_tool }
)
=> t"
"Removes all the model files by setting the modelFiles variable to nil. In addition, it also invalidates the asiSendControlStmts flowchart step by calling asiInvalidateControlStmts.")
("asiDefineDataAccessFunction"
"asiDefineDataAccessFunction( 
o_tool 
s_dataType 
s_dataFunction
)
=> s_dataFunction"
"Redefines a data access function.")
("asiDefineDataMappingFunction"
"asiDefineDataMappingFunction( 
o_tool 
s_dataType
s_function
)
=> s_function"
"Defines the data mapping functions.")
("asiGetCalcResultsDir"
"asiGetCalcResultsDir(
)
=> t_Datadir / nil"
"Returns the results directory currently used by calculator functions.")
("asiInit<yourSimulator>DataAccessFunction"
"asiInit<yourSimulator>DataAccessFunction( 
o_tool 
) 
=> t"
"Calls the procedures that modify your data access routines. ")
("VAR"
"VAR(
t_variableNname 
[ t_dataDir ]
)
=> n_number / nil"
"Returns the value of the specified design variable.")
("DATA"
"DATA(
t_netName 
t_analysis 
[ t_dataDir ]
)
=> o_data / nil"
"This is a basic data access function. It returns data for the specified node and analysis.")
("VS"
"VS(
t_netName 
[ t_dataDir ]
)
=> o_wave / nil"
"Returns dc sweep waveform for the specified net.")
("OP"
"OP(
t_instanceName
t_parameterName 
[ t_dataDir ]
)
=> n_number / nil"
"Returns the value of the operating point parameter for the specified instance.")
("OPT"
"OPT( 
t_instanceName
t_parameterName
[ t_dataDir ]
)
=> n_number / nil"
"Returns the transient operating point for the specified instance parameter.")
("MP"
"MP( 
t_instanceName
t_parameterName
[ t_dataDir ]
)
=> n_number / nil"
"Returns the value of the specified model parameter for the given instance.")
("NG"
"NG(
[ t_dataDir ]
)
=> nw_noiseGain / nil"
"Returns the noise gain waveform.")
("VN"
"VN(
[ t_dataDir ] 
)
=> nw_noise / nil"
"Returns the noise waveform specified in V/sqrt (Hz).")
("VN2"
"VN2(
[ t_dataDir ]
)
=> nw_noise / nil"
"Returns the noise waveform in V^2/Hz.")
("VNP"
"VNP(
t_name 
[ t_dataDir ]
)
=> g_value / nil"
"Returns any single level noise parameter available in the PSF database.")
("VNPP"
"VNPP(
t_name 
t_param
[ t_dataDir ]
)
=> g_value / nil"
"VNPP accesses any double level noise parameter available in the PSF database.")
("VPD"
"VPD( 
t_net1 
t_net2
[ t_dataDir ]
)
=> wave / nil"
"Returns the waveform representing phase difference between voltages at the two nets.")
("VF"
"VF(
t_netName
[ t_dataDir ]
)
=> wave / nil"
"Returns the waveform representing the ac sweep net voltage.")
("VT"
"VT(
t_netName
[ t_dataDir ]
)
=> wave / nil"
"Returns the transient waveform for the specified net.")
("IS"
"IS( 
t_terminal
[ t_dataDir ]
)
=> g_data / nil"
"Returns waveform representing the dc sweep terminal current.")
("IT"
"IT( 
t_terminal
[ t_dataDir ]
)
=> data / nil"
"Returns waveform representing the transient sweep terminal current.")
("IF"
"IF( 
t_terminal
[ t_dataDir ]
)
=> data / nil"
"Returns the waveform representing the ac sweep terminal current.")
("IDC"
"IDC(
t_terminal 
[ t_dataDir ]
)
=> data / nil"
"Returns the waveform representing the DC terminal current.")
("VDC"
"VDC(
t_netname
[ t_dataDir ]
)
=> data / nil"
"Returns the dc voltage for the specified net.")
("SIMULATOR"
"SIMULATOR(
[ t_dataDir ]
)
=> t_name / nil"
"Returns the name of simulator.")
("asiSelectAnalysisCompParam"
"asiSelectAnalysisCompParam( 
s_analysisName 
s_instField
s_parField
)
=> t / nil"
"Lets the user select a component instance from the schematic to pop up a list box containing the parameters for that instance.")
("asiSelectAnalysisInst"
"asiSelectAnalysisInst( 
s_analysis
s_field
[ t_prompt ]
)
=> t / nil"
"Lets the user select an instance from the schematic to be used as input for the specified field for the specified analysis. If the user selects any other object, the system ignores the selection and beeps.")
("asiSelectAnalysisNet"
"asiSelectAnalysisNet( 
s_analysis 
s_field 
[ t_prompt ]
)
=> t / nil"
"Lets the user select a net from the schematic to be used as input for the specified field for the specified analysis. If the user selects any other object, the system ignores the selection and beeps.")
("asiSelectAnalysisSource"
"asiSelectAnalysisSource( 
s_analysis 
s_field 
[ t_prompt ]
)
=> t / nil"
"Lets the user select a source from the schematic to be used as input for the specified field for the specified analysis. If the user selects any other object, the system ignores the selection and beeps.")
("asiSelectInst"
"asiSelectInst(
s_field
[ ?prompt t_prompt ]
[ ?form r_form ]
[ ?tab l_tab ]
)
=> t / nil"
"Lets you select an instance from the schematic. If you select any other object, the system beeps and ignores the selection.")
("asiSelectNet"
"asiSelectNet(
s_field
[ ?prompt t_prompt ]
[ ?form r_form ]
[ ?tab l_tab ]
)
=> t / nil"
"Lets you select a net from the schematic. If you select any other object, the system ignores the selection and beeps.")
("asiSelectSourceInst"
"asiSelectSourceInst(
s_field
[ ?prompt t_prompt ]
[ ?form r_form ]
[ ?tab l_tab ]
)
=> t / nil"
"Lets you select a source instance on the schematic. If you select any other object, the system beeps and ignores the selection.")
("asiSelectTerm"
"asiSelectTerm(
s_field
[ ?prompt t_prompt ]
[ ?form r_form ]
[ ?tab l_tab ]
)
=> t / nil"
"Lets you select an instance terminal from the schematic. If you select any other object, the system ignores the selection and beeps.")
("asiSelectTermNet"
"asiSelectTermNet(
s_field
[ ?prompt t_prompt ]
[ ?form r_form ]
[ ?tab l_tab ]
)
=> t / nil"
"Lets you select either an instance terminal or a net. If you select any other object, the system beeps and ignores the selection.")
("drAddElem"
"drAddElem(
o_vec
g_value
)
=> t / nil"
"Puts g_value after the last element in the data vector o_vec. g_value must have the same data type as the data vector.")
("drGetElem"
"drGetElem( 
o_vec
x_index
)
=> g_result"
"Returns the x_indexth element of the data vector drVecID, assuming a zero- based index.")
("drSetElem"
"drSetElem(
o_vec
x_index
g_value
)
=> t / nil"
"Replaces the x_indexth element of the data vector o_vec with g_value. g_value must have the same data type as the data vector.")
("drCreateVec"
"drCreateVec( 
s_dataType
[ x_length] 
[ l_values ]
) 
=> o_vec / nil"
"Creates a new data vector.")
("drCreateEmptyWaveform"
"drCreateEmptyWaveform(
)
=> o_waveform"
"Creates an empty waveform data object.")
("drCreateWaveform"
"drCreateWaveform( 
o_xvec 
o_yvec
)
=> o_wave / nil"
"Creates a waveform data object with the vectors specified.")
("drGetWaveformXType"
"drGetWaveformXType( 
o_wave
) 
=> s_dataType"
"Returns the X vector data type of the waveform data object o_wave.")
("drGetWaveformXVec"
"drGetWaveformXVec( 
o_wave 
)
=> o_vec"
"Returns the X vector object ID of the waveform data object o_wave.")
("drGetWaveformYType"
"drGetWaveformYType(
o_wave 
)
=> s_dataType"
"Returns the Y vector data type of the waveform data object o_wave.")
("drGetWaveformYVec"
"drGetWaveformYVec( 
o_wave
)
=> o_vec"
"Returns the Y vector object ID of the waveform data object o_wave.")
("drPutWaveformXVec"
"drPutWaveformXVec(
o_wave 
o_vec
)
=> t / nil"
"Puts the data vector o_vec into the waveform data object o_wave. o_vec is the X vector of the waveform data object. If the o_wave already contains a Y vector, the length of o_vec must be the same as that of the Y vector.")
("drPutWaveformYVec"
"drPutWaveformYVec( 
o_wave
o_vec 
)
=> t / nil"
"Puts the data vector o_vec into the waveform data object o_wave. o_vec is the Y vector of the waveform data object. If the o_wave already contains a X vector, the length of o_vec must be the same as that of the X vector.")
("drIsDataVector"
"drIsDataVector( 
g_value
)
=> t / nil"
"Returns t when g_value is a valid drVector data object and nil if it is not one.")
("drIsParamWave"
"drIsParamWave( 
g_value
)
=> t / nil"
"Returns t when g_value is a family, for example a parametric wave.")
("drIsWaveform"
"drIsWaveform(
g_value
)
=> t / nil"
"Returns t when g_value is a waveform data object and nil if it is a family.")
("drType"
"drType( 
o_vec
)
=> s_type"
"Returns the data type of the data vector o_vec.")
("drVectorLength"
"drVectorLength( 
o_vec
)
=> x_length"
"Returns the length of the data vector o_vec.")
("famAddValue"
"famAddValue( 
o_family
g_sweepValue
g_value
) 
=> o_family"
"Adds a waveform associated with sweepValue to a family if values are specified for both sweepValue and value.")
("famCreateFamily"
"famCreateFamily(
s_sweepName
s_varType
) 
=> o_family"
"Creates a empty data structure called a family. When filled with data, it is suitable to be plotted as a family of curves. Each waveform has a name given by s_varName and the values are added with famAddValue.")
("famGetSweepName"
"famGetSweepName( 
o_family
[ x_dim ]
)
=> s_sweepName"
"Returns the name of the sweep variable of the parametric waveform and the dimension supplied.")
("famGetSweepValues"
"famGetSweepValues( 
o_family
)
=> l_values"
"Returns the values of the sweep variable of the family specified. The returned list is sorted in increasing order.")
("famIsFamily"
"famIsFamily( 
g_arg
)
=> t / nil"
"Checks whether the argument specified is a family with at least one waveform.")
("famMap"
"famMap( 
s_func
o_family 
[ @rest t_args ]
)
=> o_result"
"Applies a function with a set of arguments to each member of a family of waveforms.")
("famValue"
"famValue( 
o_family 
g_sweepValue
)
=> o_waveformOrFamily"
"Returns the waveform whose sweepName has the value specified using sweepValue.")
("drplMcpValue"
"drplMcpValue( 
s_probe 
) 
=> f_power"
"Returns the main channel power value.")
("drplWrlsAcprValue"
"drplWrlsAcprValue( 
s_probe 
n_idx
) 
=> f_acpr"
"Returns the adjacent channel power ratio value.")
("drplEvmWrls"
"drplEvmWrls( 
s_probe 
g_percent
g_sweepValue
) 
=> o_waveform"
"Displays the error vector magnitude value on the constellation plot.")
("drplACPRWithMask"
"drplACPRWithMask(
t_acprw
t_sig
)
=> o_waveform / nil"
"This function plots acpr and spectrum masks if you select one of standards defined in Channel Definitions on envlp result Direct Plot form. These masks confirm that the acpr reaches the mask requirement defined in communication standards.")
("drplEvmBpsk"
"drplEvmBpsk(
o_waveform1
o_waveform2
n_tDelay
n_sampling
b_autoLevelDetect
n_voltage
n_offset
b_normalize
[ ?percent b_percent ]
)
=> o_waveform / nil"
"Processes the I and Q waveform outputs from the transient simulation run to calculate the Error Vector Magnitude (EVM) and plot the I versus Q scatterplot. EVM is a useful measurement to describe the overall signal amplitude and phase modulated signal quality. It is based on a statistical error distribution normalized from an ideal digital modulation. Binary Phase Shift Keying (BPSK) is a typical modulation scheme where EVM is useful. The EVM is calculated by detecting the I and Q signal levels corresponding to the two possible I and Q symbol combinations, and calculating the difference between the signal level and the ideal signal level. Compared to other types of phase shift keying, such as QPSK, QAM16 and QAM64, BPSK has lowest bit error rate for the same signal to noise ratio.")
("drplPacVolGnExpDen"
"drplPacVolGnExpDen(
t_denSigStr
rh
t_name
)
=> o_waveform / nil"
"Plots the PAC voltage wave.")
("drplJitter"
"drplJitter(
[ ?result t_result ]
[ ?resultsDir t_resultsDir ]
[ ?freq n_freq ]
[ ?k n_k ]
[ ?unit t_unit ]
[ ?ber g_ber ]
[ ?event n_event ]
)
=> value / nil"
"Calculates jitter from the result of pnoise analysis, where noisetype is set as pmjitter.")
("drplRFJc"
"drplRFJc(
[ ?from n_from ]
[ ?to n_to ]
[ ?k n_k ]
[ ?multiplier n_multiplier ]
[ ?result t_result ]
[ ?resultsDir t_resultsDir ]
[ ?unit t_unit ]
[ ?ber g_ber ]
[ ?event S_event ]
)
=> value / nil"
"Calculates cycle jitter from the result of a single event of pnoise analysis where noisetype is set as pmjitter, or from the result of pnoise analysis of oscillators where noiseout is set as [pm].")
("drplRFJcc"
"drplRFJcc(
[ ?from n_from ]
[ ?to n_to ]
[ ?k n_k ]
[ ?multiplier n_multiplier ]
[ ?result t_result ]
[ ?resultsDir t_resultsDir ]
[ ?unit t_unit ]
[ ?ber g_ber ]
[ ?event S_event ]
)
=> value / nil"
"Calculates cycle-to-cycle jitter from the result of pnoise analysis for a single event. where noisetype is set as pmjitter, or from the result of pnoise analysis of oscillators where noiseout is set as [pm].")
("drplParamSweepRFJc"
"drplParamSweepRFJc(
[ ?from n_from ]
[ ?to n_to ]
[ ?k n_k ]
[ ?multiplier n_multiplier ]
[ ?result t_result ]
[ ?resultsDir t_resultsDir ]
[ ?unit t_unit ]
[ ?ber g_ber ]
[ ?eventList S_eventList ]
)
=> o_waveform / nil"
"Calculates cycle jitter for parametric sweep with multiple events from the result of pnoise analysis where noisetype is set as pmjitter.")
("drplParamSweepRFJcc"
"drplParamSweepRFJcc(
[ ?from n_from ]
[ ?to n_to ]
[ ?k n_k ]
[ ?multiplier n_multiplier ]
[ ?result t_result ]
[ ?resultsDir t_resultsDir ]
[ ?unit t_unit ]
[ ?ber g_ber ]
[ ?eventList S_eventList ]
)
=> o_waveform / nil"
"Calculates cycle-to-cycle jitter for parametric sweep with multiple events from the result of pnoise analysis where noisetype is set as pmjitter.")
("drplRFValueAt"
"drplRFValueAt(
o_waveform
g_xValue
)
=> g_yValue / nil"
"Returns the Y-axis value corresponding to the specified X-axis value on the given waveform.")
("drplPssHarmThd"
"drplPssHarmThd(
o_waveform
x_harmonicNumber
)
=> x_THD / nil"
"Calculates the total harmonic distortion (THD) in percentage for each waveform of frequency sweep. This function is available only for single-tone harmonic balance (hb) and single-tone periodic steady-state (pss) analyses.")
("drplSwpHp"
"drplSwpHp(
n_iIndex
n_jIndex
[ ?result t_result ]
[ ?resultsDir t_resultsDir ]
)
=> o_waveform / nil"
"Returns the hybrid matrix for sweep port SP analysis.")
("drplSwpSp"
"drplSwpSp(
n_iIndex
n_jIndex
[ ?result t_result ]
[ ?resultsDir t_resultsDir ]
)
=> o_waveform / nil"
"Returns the S-parameter waveform for sweep port SP analysis.")
("drplSwpYp"
"drplSwpYp(
n_iIndex
n_jIndex
[ ?result t_result ]
[ ?resultsDir t_resultsDir ]
)
=> o_waveform / nil"
"Returns the admittance matrix for sweep port SP analysis.")
("drplSwpZm"
"drplSwpZm(
n_iIndex
n_jIndex
[ ?result t_result ]
[ ?resultsDir t_resultsDir ]
)
=> o_waveform / nil"
"Returns the port input impedance waveform for sweep port SP analysis.")
("drplSwpZp"
"drplSwpZp(
iIndex
jIndex
[ ?result t_result ]
[ ?resultsDir t_resultsDir ]
)
=> o_waveform / nil"
"Returns the impedance matrix for sweep port SP analysis.")
("drplSprobeHPM"
"drplSprobeHPM(
g_inst
x_index1
x_index2
)
=> o_waveform / nil"
"Returns the waveform for h-parameter data, for the specified sprobe instance.")
("drplSprobePortSPData"
"drplSprobePortSPData(
g_inst
x_index1
x_index2
)
=> o_waveform / nil"
"Returns the waveform for the S-parameter data for the sprobe instance with port.")
("drplSprobePortVSWR"
"drplSprobePortVSWR(
g_inst
x_index1
)
=> o_waveform / nil"
"Returns the waveform for the voltage standing wave ratio, for the specified sprobe instance.")
("drplSprobeYPM"
"drplSprobeYPM(
g_inst
x_index1
x_index2
)
=> o_waveform / nil"
"Returns the waveform for y-parameter data, for the specified sprobe instance.")
("drplSprobeZM"
"drplSprobeZM(
g_inst
x_index1
)
=> o_waveform / nil"
"Returns the waveform for the port input impedance, for the specified sprobe instance.")
("drplSprobeZPM"
"drplSprobeZPM(
g_inst
x_index1
x_index2
)
=> o_waveform / nil"
"Returns the waveform for z-parameter data, for the specified sprobe instance.")
("drplGetMeas"
"drplGetMeas(
t_measurement
)
=> o_waveform"
"Returns the value of the specified measurement for simulation results of wireless envelope analysis. These measurements can be one of the following: error vector magnitude (EVM), bit error rate (BER), or frequency shift keying error (FSKerr). The x- and y-axis vectors of the waveform are frame index and frame values, respectively")
("drplGetSpectrum"
"drplGetSpectrum(
t_wirelessProbe
)
=> o_waveform / nil"
"Creates a waveform object that represents the spectrum of the signal to which the specified wireless probe is connected. The x- and y-axis vectors of the waveform are frequency and dBv/Hz, respectively.")
("asiOpenOceanScript"
"asiOpenOceanScript(
t_fileName
)
=> g_fptr"
"Opens the specified file for writing the OCEAN script. If the file exists, it asks for your permission to overwrite it.")
("asiWriteOceanScript"
"asiWriteOceanScript( 
p_filePointer
o_session
[ ?noRun g_noRun ]
[ ?fullKey g_fullKey ]
[ ?calledFromCorners g_calledFromCorners ]
)
=> t / nil"
"Writes the OCEAN script.")
("asiCloseOceanScript"
"asiCloseOceanScript( 
p_filePointer 
)
=> t / nil"
"Closes the OCEAN script.")
("sevGetSessionType"
"sevGetSessionType(
t_session
)
=> t_toolName / nil"
"Returns the name of the tool associated with the given session.")
("sevSetMainWindowPulldownMenus"
"sevSetMainWindowPulldownMenus(
l_menus
)
=> t / nil"
"Sets the menus for the Virtuoso Analog Simulation Environment window.")
("sevSetMTSMode"
"sevSetMTSMode(
o_session
g_mtsMode
[ g_noPopups ]
)
=> t / nil"
"Enables or disables MTS mode.")
("sevMTSMode"
"sevMTSMode(
o_session
)
=> t / nil"
"Returns the status of MTS mode.")
("sevMTSOptions"
"sevMTSOptions(
o_session
)
=> t / nil"
"Invokes the MTS Options form if MTS mode is enabled. A dialog box appears if the MTS option is disabled.")
("sevOpenXterm"
"sevOpenXterm( 
t_dirPath 
) 
=> t / nil"
"Opens an terminal window at the given path.")
("sevSetSchematicPulldownMenus"
"sevSetSchematicPulldownMenus(
l_menus
)
=> t / nil"
"Sets the simulation menus on the schematic window.")
("sevSetTypeInWindowPulldownMenus"
"sevSetTypeInWindowPulldownMenus(
l_menus
)
=> t / nil"
"Sets the menu on the simulator type in window.")
("sevSetMenuItemLists"
"sevSetMenuItemLists(
l_lists
)
=> t / nil"
"Creates the menu item lists.")
("sevAddMenuItemLists"
"sevAddMenuItemLists(
l_lists
)
=> t / nil"
"Adds menu items to an existing menu item list.")
("sevDirectPlotMenu"
"sevDirectPlotMenu(
t_session 
l_items
)
=> t / nil"
"Creates the direct plot menu item list.")
("sevEnvironment"
"sevEnvironment(
t_session
)
=> o_session / nil"
"Displays the OASIS session object tied to the simulation environment session.")
("sevNoEnvironment"
"sevNoEnvironment(
t_session
)
=> t / nil"
"Indicates whether an OASIS environment is tied to the simulation environment.")
("sevSaveState"
"sevSaveState(
t_session
)
=> t / nil"
"Displays the Saving State form that lets you save the current state of the simulation environment. You can use this function for only an ADE L or ADE XL session. You cannot save the state of a meastro session.")
("sevLoadState"
"sevLoadState(
t_session
)
=> t / nil"
"Displays the Loading State form that lets you load a saved state into the current simulation environment. In a maestro cellview, you can use this functions to load an adexl state.")
("sevSaveOceanScript"
"sevSaveOceanScript(
t_session
)
=> t / nil"
"Displays the Save Ocean Script to File form that lets you save an OCEAN script that will regenerate the current session to the specified file.")
("sevEditOptions"
"sevEditOptions(
t_session
)
=> t / nil"
"Displays the Editing Session Options form that lets you edit the options for the given simulation environment session.")
("sevOpenSchematic"
"sevOpenSchematic(
t_session
)
=> t / nil"
"Displays a schematic window for the design that is tied to the simulation environment.")
("sevMenuItems"
"sevMenuItems(
t_session 
t_name
)
=> t / nil"
"Displays the menu item list that corresponds to the named menu item.")
("sevReset"
"sevReset(
t_session
)
=> t / nil"
"Resets the simulation environment session to its default values.")
("sevQuit"
"sevQuit(
t_session
)
=> t / nil"
"Quits the simulation session.")
("sevCreateMainWindow"
"sevCreateMainWindow(
t_session
)
=> t / nil"
"Creates the main simulation environment window. If a window is already open for the specified session, the function brings it to the top.")
("sevChooseSimulator"
"sevChooseSimulator(
t_session
[ g_disableProjectDir ]
)
=> t / nil"
"Displays the Choosing Simulator/Directory/Host form that lets you choose the simulator you want to use, the run directory, and the host machine.")
("sevChooseTemperature"
"sevChooseTemperature(
t_session
)
=> t / nil"
"Displays the Setting Temperature form that lets you set the simulation temperature.")
("sevMpuTool"
"sevMpuTool(
t_session
)
=> t / nil"
"Displays the Setting Model Path form that lets you select the paths to the model files.")
("sevChooseEnvironmentOptions"
"sevChooseEnvironmentOptions(
t_session
)
=> t / nil"
"Displays the Environment Options form that lets you select the environment options for the simulation environment session.")
("sevEditStimulus"
"sevEditStimulus(
t_session 
t_type
)
=> t / nil"
"Displays the specified stimulus in a window for editing.")
("sevNonMixedSignal"
"sevNonMixedSignal(
t_session
)
=> t / nil"
"Indicates whether the session is running a mixed signal simulation.")
("sevEditSimulationFile"
"sevEditSimulationFile(
t_session 
t_type
)
=> t / nil"
"Displays the specified file in a window for editing.")
("sevChooseDesign"
"sevChooseDesign(
t_session
)
=> t / nil"
"Displays the Choosing Design form that lets you select the design to simulate.")
("sevEditSelectedAnas"
"sevEditSelectedAnas(
t_session
)
=> t / nil"
"Displays the Choosing Analyses form that lets you select and edit the analyses.")
("sevEditSelectedVars"
"sevEditSelectedVars(
t_session
)
=> t / nil"
"Displays the Editing Design Variables form that lets you edit the simulation variables and their values.")
("sevEditSelectedOuts"
"sevEditSelectedOuts(
t_session
)
=> t / nil"
"Displays the Outputs assistant that lets you edit the simulation outputs.")
("sevChangeOutsOnSchematic"
"sevChangeOutsOnSchematic(
t_session
t_setType
[ ?selectionMode t_selectionMode ]
)
=> t / nil"
"Sets up for selection of selected output types from the schematic.")
("sevSaveOptions"
"sevSaveOptions(
t_session
)
=> t / nil"
"Displays the Save Options form that lets you select what voltages and currents should be automatically saved in the simulation.")
("sevDeleteSelectedAnas"
"sevDeleteSelectedAnas(
t_session
)
=> t / nil"
"Deletes the analyses that are currently selected in the Analysis listbox.")
("sevNoAnaSelections"
"sevNoAnaSelections(
t_session
)
=> t / nil"
"Indicates whether any analyses are selected in the Analysis listbox.")
("sevActivateSelectedAnas"
"sevActivateSelectedAnas(
t_session 
g_active
)
=> t / nil"
"Enables or disables the selected analyses.")
("sevDeleteSelectedVars"
"sevDeleteSelectedVars(
t_session
)
=> t / nil"
"Deletes any variables that are selected in the Variables listbox.")
("sevNoVarSelections"
"sevNoVarSelections(
t_session
)
=> t / nil"
"Indicates whether any variables are selected in the Variables listbox.")
("sevFindSelectedVars"
"sevFindSelectedVars(
t_session
)
=> t / nil"
"Highlights the device on the schematic where the selected variable is used.")
("sevCopyCellViewVariables"
"sevCopyCellViewVariables(
t_session
)
=> t / nil"
"Copies the cell view variables and their values into the simulation environment.")
("sevCopyVariablesToCellView"
"sevCopyVariablesToCellView(
t_session
)
=> t / nil"
"Copies the simulation session variables and their values into the cellview.")
("sevDeleteSelectedOuts"
"sevDeleteSelectedOuts(
t_session 
[ l_listbox ]
)
=> t / nil"
"Deletes the selected items from the outputs list box.")
("sevExportOutputsToTxt"
"sevExportOutputsToTxt(
t_session
)
=> t / nil"
"Exports the outputs specified in the Output listbox to a text file. This text file can be edited and imported back to ADE.")
("sevImportOutputsFromTxt"
"sevImportOutputsFromTxt(
t_session
)
=> t / nil"
"Imports the outputs saved in a text file to the output list box in the main ADE window.")
("sevExportOutputsToCSV"
"sevExportOutputsToCSV(
t_sevSession
)
=> t / nil"
"Exports the outputs specified in the ADE setup to the CSV file.")
("sevExportOutputsToFile"
"sevExportOutputsToFile(
t_sevSession
)
=> t / nil"
"Exports the output from the ADE setup to the text or CSV file, which is specified by the .cdsenv variable outputsImportExportVersion. If the value of outputsImportExportVersion variable is greater than 1.0, then the function generates the output to the CSV file, else it generates the output to the text file.")
("sevImportOutputsFromCSV"
"sevImportOutputsFromCSV(
t_sevSession
)
=> t / nil"
"Imports the outputs from the CSV file to the ADE setup.")
("sevImportOutputsFromFile"
"sevImportOutputsFromFile(
t_sevSession
)
=> t / nil"
"Imports the output to the ADE setup from the text or CSV file, which is specified by the .cdsenv variable outputsImportExportVersion. If the value of outputsImportExportVersion variable is greater than 1.0, then the function imports the outputs from the CSV file, else it imports the outputs from the text file.")
("sevNoOutSelections"
"sevNoOutSelections(
t_session
)
=> t / nil"
"Indicates whether any output is selected in the Outputs listbox.")
("sevRemovePlotWindow"
"sevRemovePlotWindow(
t_session 
w_windowID
)
=> l_plotWindows / nil"
"Removes the specified plot window from the list of plot windows owned by the given simulation environment session.")
("sevSetPropertyForSelectedOuts"
"sevSetPropertyForSelectedOuts(
t_session 
t_property 
g_value
)
=> t / nil"
"Sets the property to the specified value on the selected outputs.")
("sevSimulator"
"sevSimulator(
t_session
)
=> t_simulatorName"
"Displays the name of the simulator used in the session as a string.")
("sevRunEngine"
"sevRunEngine(
t_session
)
=> t / nil"
"Runs a simulation from the simulation environment session.")
("sevStopEngine"
"sevStopEngine(
t_session
)
=> t / nil"
"Stops the currently running simulation that is tied to the session.")
("sevIsContinuable"
"sevIsContinuable(
t_session
)
=> t / nil"
"Indicates whether the currently run simulation can be continued from its stopping point.")
("sevSetEngineOptions"
"sevSetEngineOptions(
t_session 
t_type
)
=> t / nil"
"Displays the Engine Options form for the selected type for editing.")
("sevNetlistFile"
"sevNetlistFile(
t_session 
t_type
)
=> t / nil"
"Creates the selected type of netlist file.")
("sevOpenEncap"
"sevOpenEncap(
t_session
)
=> t / nil"
"Opens the command type in window that lets you enter commands directly to the simulator.")
("sevViewSimulatorOutput"
"sevViewSimulatorOutput(
t_session
)
=> t / nil"
"Displays the simulation output log.")
("sevNoOutputLog"
"sevNoOutputLog(
t_session
)
=> t / nil"
"Indicates whether the simulation output log exists.")
("sevConvergence"
"sevConvergence(
t_session 
t_type
)
=> t / nil"
"Displays the form for setting up the selected type of convergence aid.")
("sevNoResults"
"sevNoResults(
t_session 
[ t_type ]
)
=> t / nil"
"Indicates whether the specified results exist.")
("sevNoPlottableOutputs"
"sevNoPlottableOutputs(
t_session
)
=> t / nil"
"Indicates whether there are any plottable outputs.")
("sevCircuitCond"
"sevCircuitCond(
t_session
)
=> t / nil"
"Displays the Circuit Conditions form that lets you set or display any special circuit conditions.")
("sevNoDesign"
"sevNoDesign(
t_session
)
=> t / nil"
"Indicates whether a design is tied to the simulation environment.")
("sevSetSimDataDir"
"sevSetSimDataDir( 
t_session 
t_dir 
)
=> t / nil"
"Loads the results for the specified simulation environment session and results directory.")
("sevSaveResults"
"sevSaveResults(
t_session
)
=> t / nil"
"Displays the Save Results form that lets you save the current results.")
("sevSelectResults"
"sevSelectResults(
t_session
)
=> t / nil"
"Displays the Select Results form that lets you select and load a previously saved set of results.")
("sevDeleteResults"
"sevDeleteResults(
t_session
)
=> t / nil"
"Displays the Delete Results form that lets you delete a set of previously saved results.")
("sevEditPlottingOptions"
"sevEditPlottingOptions(
t_session
)
=> t / nil"
"Displays the Setting Plotting Options form that lets you edit the plotting and printing options.")
("sevPlotAllOutputs"
"sevPlotAllOutputs(
t_session
)
=> t / nil"
"Plots all enabled plottable outputs.")
("sevNoPlottableSignals"
"sevNoPlottableSignals(
t_session
)
=> t / nil"
"Indicates whether there are any plottable outputs.")
("sevPlotSignals"
"sevPlotSignals(
t_session
t_type
[ ?disableRedraw g_disableRedraw ]
)
=> t / nil"
"Plots the speacified type of signals that exist as outputs.")
("sevEvaluateAndPlotExpressions"
"sevEvaluateAndPlotExpressions(
t_session
)
=> t / nil"
"Evaluates and plots all the output expressions.")
("sevNoPlottableExpressions"
"sevNoPlottableExpressions(
t_session
)
=> t / nil"
"Indicates whether there are any plottable expressions.")
("sevPrintResults"
"sevPrintResults(
t_session
t_type
)
=> t / nil"
"Displays the Print Results form that lets you print the selected type of simulation results.")
("sevRetrieveFromEffectiveCDF"
"sevRetrieveFromEffectiveCDF"
"Retrieves data from the effective CDF. This function should be used before the sevAnnotateResults function.")
("sevAnnotateResults"
"sevAnnotateResults(
t_session 
t_type
)
=> t / nil"
"Annotates the selected results to the schematic window.")
("sevRegisterPcellsForAnnotation"
"sevRegisterPcellsForAnnotation(
l_LibCellNames
)
=> l_LibCellNames/ nil"
"Returns a list of library and cell name pairs for the registered Pcells.")
("sevGetRegisteredPcellsForAnnotation"
"sevGetRegisteredPcellsForAnnotation(
)
=> l_LibCellNames/ nil"
"Returns the list of library and cell name pairs of the registered Pcells to be used in the operating point annotation flow.")
("sevParametricTool"
"sevParametricTool(
t_session
)
=> t / nil"
"Opens the Parametric analysis tool.")
("sevCornersTool"
"sevCornersTool(
t_session
)
=> t / nil"
"Opens the Corners tool.")
("sevMonteCarloTool"
"sevMonteCarloTool(
t_session
)
=> t / nil"
"Opens the Analog Statistical Analysis tool.")
("sevOptimizationTool"
"sevOptimizationTool(
t_session
)
=> t / nil"
"Opens the Optimization tool.")
("sevOpenCalculator"
"sevOpenCalculator(
)
=> t / nil"
"Opens the Calculator.")
("sevOpenDRLBrowser"
"sevOpenDRLBrowser(
)
=> t / nil"
"Opens the Browse Project Hierarchy window.")
("sevOpenPlotWindow"
"sevOpenPlotWindow(
t_session
)
=> t / nil"
"Opens a plot window.")
("sevOpenPrintWindow"
"sevOpenPrintWindow(
t_session
)
=> t / nil"
"Opens a print window.")
("sevOpenJobMonitor"
"sevOpenJobMonitor(
)
=> t / nil"
"Opens the Job monitor.")
("sevIcon"
"sevIcon(
t_name
)
=> o_icon / nil"
"Displays the icon object corresponding to the specified name.")
("sevDeleteSelections"
"sevDeleteSelections(
t_session
)
=> t / nil"
"Deletes the selected items in any of the simulation environment list boxes.")
("sevWhatsNew"
"sevWhatsNew(
)
=> t / nil"
"Opens the Whats New window for the simulation environment.")
("sevStartSession"
"sevStartSession(
[ ?design g_design ]
[ ?lib g_lib ]
[ ?cell g_cell ]
[ ?view g_view ]
[ ?schematic g_schematic ]
)
=> t / nil"
"Starts the Virtuoso Analog Simulation Environment session tied to the specified design. It will try the design first, then lib/cell/view, and finally it will try the schematic. If none of these is specified, it will start a skeleton session that will not be able to do anything until a design has been tied to the session. The lib/cell/view arguments must be specified, otherwise they are ignored.")
("sevAboutTool"
"sevAboutTool(
t_toolname
)
=> t / nil"
"Generates and displays the standard About DFII window for the tool with the tool name in the message.")
("sevEditModels"
"sevEditModels(
t_session
)
=> t / nil"
"Displays the Model Library Setup form that lets you edit the Spectre direct model libraries.")
("sevSetupStimuli"
"sevSetupStimuli(
t_session
)
=> t / nil"
"Displays the Setup Analog Stimuli form that lets you specify the circuit stimuli.")
("sevSetupSimulationFiles"
"sevSetupSimulationFiles(
t_session
)
=> t / nil"
"Displays the Simulation Files Setup form that lets you specify the simulation files and paths for Spectre direct simulation.")
("sevNetlistAndRun"
"sevNetlistAndRun(
t_session
)
=> t / nil"
"Forces the circuit to create a netlist and then run the simulation.")
("sevRun"
"sevRun(
t_session
)
=> t / nil"
"Runs a simulation using the current netlist.")
("sevNetlistAndDebug"
"sevNetlistAndDebug(
t_session
)
=> t / nil"
"Forces the circuit to netlist and runs the AHDL debugger.")
("sevDebug"
"sevDebug(
t_session
)
=> t / nil"
"Runs the AHDL debugger using the current netlist.")
("sevLMGTool"
"sevLMGTool(
t_session
)
=> t / nil"
"Opens the Transmission Line Modeler tool.")
("sevPKGTool"
"sevPKGTool(
t_session
)
=> t / nil"
"Opens the RFIC Package Modeler tool.")
("sevKmodelTool"
"sevKmodelTool(
t_session
)
=> t / nil"
"Opens the RIFC Modeler for Cierto SPW tool.")
("sevPCMTool"
"sevPCMTool(
t_session
)
=> t / nil"
"Opens the Spiral Inductor Modeler tool.")
("sevBPMTool"
"sevBPMTool(
t_session
)
=> t / nil"
"Opens the Bond Pad Modeler tool.")
("sevBALMTool"
"sevBALMTool(
t_session
)
=> t / nil"
"Opens the Transformer Modeler tool.")
("sevActiveSelectedAna"
"sevActiveSelectedAna(
o_session
)
=> l_analyses / nil"
"Returns the list of selected analyses that are currently enabled.")
("sevNonActiveSelectedAna"
"sevNonActiveSelectedAna(
o_session
)
=> l_analyses / nil"
"Returns the list of selected analyses that are currently not enabled.")
("sevSession"
"sevSession(
o_entity
)
=> t_session / nil"
"Displays the session ID of the simulation environment such as the ADE L window, the schematic window associated with ADE L, or a form launched from ADE L.")
("sevSetTopSaveDir"
"sevSetTopSaveDir(
o_session
)
=> t"
"This function sets the ADE L Save State directory for the simulation environment session.")
("sevTopSaveDir"
"sevTopSaveDir(
o_session
)
=> t_dir"
"Displays the current ADE L Save State directory path.")
("sevDisplayViolations"
"sevDisplayViolations(
t_sevSession
)
=> o_form"
"Displays the violations form. This function can be used only with an Analog Design Environment L session.")
("sevNoViolationsFound"
"sevNoViolationsFound(
s_sevSession
)
=> t / nil"
"Determines if any violation file has been found in the results.")
("sevParasiticsDisplayed"
"sevParasiticsDisplayed(
t_session
)
=> t / nil"
"Determines whether the Show Parasitics menu will be disabled when the DC Operating Point results are available.")
("sevParasiticsNotDisplayed"
"sevParasiticsNotDisplayed(
t_session
)
=> t / nil"
"Determines if the Hide Parasitics menu will be disabled when the DC Operating Point results are available.")
("sevDevChecking"
"sevDevChecking(
t_sevSession
)
=> o_form / nil"
"Displays the Analog Design Environment Device Checking Setup form.")
("sevSetSolver"
"sevSetSolver(
t_session
)
=> t / nil"
"Displays the Choose Solver form, which lets you select a solver.")
("sevSetConnectModules"
"sevSetConnectModules(
t_session
)
=> t / nil"
"Displays the Connect Rules form that allows you to select built-in or user-defined connect rules.")
("sevInvokeNCBrowse"
"sevInvokeNCBrowse(
t_session
)
=> t / nil"
"Displays the NCBrowse window.")
("sevInvokeSimvision"
"sevInvokeSimvision(
t_session
)
=> t / nil"
"Displays the SimVision Waveform window.")
("sevInvokeSimvisionDebugger"
"sevInvokeSimvisionDebugger(
t_session
)
=> t / nil"
"Displays the SimVision Debugger interface with GUI options during an AMS session.")
("sevNoLog"
"sevNoLog(
t_session
t_type
)
=> t / nil"
"Checks if the specified log file exists for the AMS interface.")
("sevViewNetlisterLog"
"sevViewNetlisterLog(
t_session
)
=> t / nil"
"Displays the AMS netlister log file.")
("sevViewCompilerLog"
"sevViewCompilerLog(
t_session
)
=> t / nil"
"Displays the AMS simulation compiler log file. The log file can be either ncvlog.log or ncvhdl.log depending on the contents of the AMS design.")
("sevViewElabLog"
"sevViewElabLog(
t_session
)
=> t / nil"
"Displays the AMS simulation elaborator log file.")
("sevViewNcVerilogLog"
"sevViewNcverilogLog(
t_session
)
=> t / nil"
"Displays the AMS simulation NcVerilog log file.")
("sevViewSimLog"
"sevViewSimLog(
t_session
)
=> t / nil"
"Displays the AMS simulator log file.")
("sevReturnVariablesWithEmptyValues"
"sevReturnVariablesWithEmptyValues(
o_session
)
=> t_string / nil"
"Returns the set of variables in a session with empty values.")
("sevAddExpression"
"sevAddExpression(
o_session
t_expressionname
t_expression
)
=> t / nil"
"Takes the name and expression as a string and adds a corresponding output in ADE session.")
("sevGetExpressions"
"sevGetExpressions(
o_session
[ ?axlTestName t_axlTestName ]
[ ?namedOnly g_namedOnly ]
)
=> l_list"
"Returns all the expressions in the specified ADE/ADEXL session.")
("sevDeleteSelectedSubckts"
"sevDeleteSelectedSubckts(
t_sevSession 
[ l_instanceList ]
)
=> t / nil"
"Deletes the subcircuit instances selected in the Save By Subckt Instances pane of the simulation window.")
("sevDeleteSelectedOpPoints"
"sevDeleteSelectedOpPoints"
"Deletes the operating point instances selected in the Save Operating Points pane of the simulation window.")
("cdfCreateBaseCellCDF"
"cdfCreateBaseCellCDF(
g_cellID 
[ ?doneProc t_doneProc ]
[ ?formInitProc t_formInitProc ]
[ ?fieldWidth x_fieldWidth ]
[ ?fieldHeight x_fieldHeight ]
[ ?buttonFieldWidth x_buttonFieldWidth ]
[ ?promptWidth x_promptWidth ]
)
=> g_cdfDataID / nil"
"Creates a base-level CDF description for a cell. The CDF description is created with no parameters or simulation models.")
("cdfCreateBaseLibCDF"
"cdfCreateBaseLibCDF( 
g_libID 
[ ?doneProc t_doneProc ]
[ ?formInitProc t_formInitProc ]
[ ?fieldWidth x_fieldWidth ]
[ ?fieldHeight x_fieldHeight ]
[ ?buttonFieldWidth x_buttonFieldWidth ]
[ ?promptWidth x_promptWidth ]
)
=> g_cdfDataID / nil"
"Creates the Base Library CDF that is applied to all the devices in the library. The CDF description is created with no parameters or simModels.")
("cdfCreateParam"
"cdfCreateParam(
g_cdfDataId
[ ?name t_name ]
[ ?type t_type ]
[ ?defValue g_defValue ]
[ ?units t_units ]
[ ?parseAsNumber t_parseAsNumber ]
[ ?choices l_choices ]
[ ?prompt t_prompt ]
[ ?use t_use ]
[ ?display t_display ]
[ ?editable t_editable]
[ ?dontSave t_dontSave]
[ ?callback t_callback]
[ ?storeDefault t_storeDefault ]
[ ?parseAsCEL t_parseAsCEL ]
[ ?description t_description ]
)
=> g_cdfDataId / nil"
"Creates a parameter on the specified CDF database object with the specified attributes. The only attributes that are always required are the parameter's name and type. If this parameter description is not overriding an existing base-level parameter definition, you must also specify the default value.")
("cdfCreateUserCellCDF"
"cdfCreateUserCellCDF(
g_cellId 
[ ?doneProc t_doneProc ]
[ ?formInitProc t_formInitProc ]
[ ?fieldWidth x_fieldWidth ]
[ ?fieldHeight x_fieldHeight ]
[ ?buttonFieldWidth x_buttonFieldWidth ]
[ ?promptWidth x_promptWidth ]
)
=> g_cdfDataId / nil"
"Creates a user-level CDF description for a cell. The CDF description is created with no parameters or simulation models.")
("cdfCreateUserLibCDF"
"cdfCreateUserLibCDF( 
g_libId 
[ ?doneProc t_doneProc ]
[ ?formInitProc t_formInitProc ]
[ ?fieldWidth x_fieldWidth ]
[ ?fieldHeight x_fieldHeight ]
[ ?buttonFieldWidth x_buttonFieldWidth ]
[ ?promptWidth x_promptWidth ]
) 
=> g_cdfDataId / nil"
"Creates the user-level library CDF that is applied to all the devices in the library. The user-level CDF can override entries in the base-level CDF. Therefore, a combination of the base-level CDF and the user-level CDF becomes the effective CDF.")
("cdfGetBaseLibCDF"
"cdfGetBaseLibCDF(
g_libId
)
=> g_cdfDataId / nil"
"Returns the base-level CDF description attached to a library. If one is not defined, it returns nil.")
("cdfGetUserLibCDF"
"cdfGetUserLibCDF(
g_libId
)
=> g_cdfDataId / nil"
"Returns the user-level CDF description attached to a library. If one is not defined, it returns nil.")
("cdfGetLibCDF"
"cdfGetLibCDF(
g_libId
)
=> g_cdfDataId / nil"
"Returns the effective CDF description attached to a library. If neither a base- nor user-level CDF description is defined, it returns nil. The resulting CDF description represents the overlay of the user-level CDF on the base-level CDF.")
("cdfGetBaseCellCDF"
"cdfGetBaseCellCDF(
g_cellId
)
=> g_cdfDataId / nil"
"Returns the base-level CDF description attached to a cell. If one is not defined, it returns nil.")
("cdfGetUserCellCDF"
"cdfGetUserCellCDF(
g_cellId
)
=> g_cdfDataId / nil"
"Returns the user-level CDF description attached to a cell. If one is not defined, it returns nil.")
("cdfGetCellCDF"
"cdfGetCellCDF(
g_cellId
)
=> g_cdfDataId / nil"
"Returns the effective CDF description attached to a cell. If neither a base- nor user-level CDF description is defined for the cell or its library, it returns nil. The resulting CDF description represents the overlay of the user-level cell CDF on the base-level cell CDF on the user-level library CDF on the base-level library CDF.")
("cdfGetInstCDF"
"cdfGetInstCDF(
d_instId
)
=> g_cdfDataId / nil"
"Returns the effective CDF description associated with an instance.")
("cdfSaveCDF"
"cdfSaveCDF(
g_cdfDataId
)
=> t / nil"
"Saves a CDF description to disk. The CDF description is then read in every time you open the cell of the library to which the description is attached. You can save only base-level CDF descriptions.")
("cdfDump"
"cdfDump(
t_libName
t_fileName 
[ ?cellName t_cellName ]
[ ?level s_level ] 
[ ?edit g_edit ]
) 
=> t / nil"
"Dumps the CDF description for the specified library and cell into the given file. If a cell is not specified, then only the library CDF description is dumped. The file is created in the current working directory or the directory specified with the file name. If g_edit is t, a text editor window is automatically opened on t_fileName. The default is no editor.")
("cdfDumpAll"
"cdfDumpAll(
t_libName
t_fileName 
[ ?level s_level ] 
[ ?edit g_edit ]
) 
=> t / nil"
"Dumps the CDF description for the specified library and all its cells into the given file. You can also specify the level of the CDF description by using the ?level s_level argument. The specified file is created in the current working directory or the directory specified with the filename.")
("cdfDeleteCDF"
"cdfDeleteCDF(
g_cdfDataId
) 
=> t / nil"
"Deletes a CDF description, including all attached parameters.")
("cdfDeleteParam"
"cdfDeleteParam(
g_cdfParamId
) 
=> t / nil"
"Deletes the specified CDF parameter.")
("cdfCopyCDF"
"cdfCopyCDF(
g_cellId | g_libId
t_dataType
g_sourceCdfDataId
)
=> g_cdfDataId / nil"
"Copies the CDF data of the specified type from specified source to a library or cell by creating a new CDF data ID.")
("cdfCopyParam"
"cdfCopyParam(
g_cdfDataId 
g_cdfParamId
)
=> g_cdfParamId / nil"
"Copies the specified parameter to the given CDF data object.")
("cdfFindParamByName"
"cdfFindParamByName(
g_cdfDataId 
t_name
)
=> g_cdfParamId / nil"
"Returns the parameter ID of the specified parameter name for the given CDF description, if it exists. If not, it returns nil.")
("cdfUpdateInstParam"
"cdfUpdateInstParam( 
d_instId
)
=> t / nil"
"Stores the CDF parameters specified in the effective cell CDF of the instance master to the given instance. If a doneProc post-processing procedure is specified, the function runs this procedure to validate any updates to the instance. When the ID given is not for an instance or the instance master does not have CDF definition, it returns nil.")
("cdfRefreshCDF"
"cdfRefreshCDF(
g_libId / g_cellId
)
=> t / nil"
"Updates the CDF structure in the memory for the specified library or cell Id with the contents stored on the hard disk. Returns nil if the CDF structures for the specified library and cell ID are not present in memory.")
("aedCopyCDF"
"aedCopyCDF(
)
=> t / nil"
"Opens the Copy Component CDF form.")
("aedDeleteCDF"
"aedDeleteCDF(
)
=> t / nil"
"Opens the Delete Component CDF form.")
("cdfGetUnitScaleFactor"
"cdfGetUnitScaleFactor(
t_unitName
)
=> t_scaleFactor"
"Displays the current scale factor for the specified unit.")
("cdfSetUnitScaleFactor"
"cdfSetUnitScaleFactor(
t_unitName
t_scaleFactor
)
=> t / nil"
"Sets the scale factor for the specified unit.")
("cdfEditScaleFactors"
"cdfEditScaleFactors(
)
=> t / nil"
"Displays the Units Scaling Factors form which can be used to set scaling factors for displaying CDF parameters.")
("cdfEnableScaleFactorRetentionForZero"
"cdfEnableScaleFactorRetentionForZero(
)
=> t"
"Lets you retain the unit scale factor for a CDF parameter if its specified default value is 0 followed by the scale factor. This is possible only when the scale factor for a unit type is set to auto.")
("cdfDisableScaleFactorRetentionForZero"
"cdfDisableScaleFactorRetentionForZero(
)
=> t"
"Disables the unit scale factor retention for CDF parameters enabled using the cdfEnableScaleFactorRetentionForZero function.")
("cdfParseFloatString"
"cdfParseFloatString( 
t_string
)
=> nil / d_value / t_string"
"Uses the standard strtod (string to double) function to parse the input string. When the input string contains trailing non-numerical characters, the fragment of the string is compared against a supported set of scale factor designators.")
("cdfFormatFloatString"
"cdfFormatFloatString(
t_string
t_scaleFactor
)
=> nil / t_val"
"This function formats the input string into a value representation, if possible. It formats the input string using the input scale factor, re-converts the value to a string, and then returns the formatted string value. If the input string cannot be converted, the input string is returned with no change to it.")
("cdfSyncInstParamValue"
"cdfSyncInstParamValue(
d_instId1
d_instId2
)
=> t / nil"
"This function generates all the CDF parameters for the first instance (d_instId1) and updates the second instance (d_instId2) with the same values. Both the instances must share the same cell.")
("cdfUpdateInstSingleParam"
"cdfUpdateInstSingleParam(
d_instId
t_paramName
)
=> t / nil"
"Copies the specified parameter's effective value to the specified instance.")
("aedEditCDF"
"aedEditCDF(
[ ?libName t_libraryName ] 
[ ?cellName t_cellName ]
[ ?cdfType t_cdfType ] 
) 
=> t"
"Opens the Edit CDF form to the specified library, cell, and CDF type. The library and cell names must be strings referring to an existing library or cell, and the CDF type must be effective, base, or user.")
("cdfGetCustomViaCDF"
"cdfGetCustomViaCDF(
d_customViaId
)
=> g_cdfDataId / nil"
"Returns the effective CDF description associated with a custom via or returns nil. When the custom via's cell or library has a base or user-level CDF defined, it returns the g_cdfDataId, otherwise returns nil.")
("cdfUpdateCustomViaParam"
"cdfUpdateCustomViaParam(
d_customViaId
)
=> t / nil"
"Stores the parameters specified in the effective cell CDF of the custom via in the specified custom via instance. When the specified ID is not for a customVia instance or the instance master does not have a CDF definition, it returns nil.")
("cdfRegRemasterTrigger"
"cdfRegRemasterTrigger(
t_triggerFunc
)
=> l_ids / nil"
"Registers a trigger that is called after instance remastering to set, map, or clear the parameter values on the remastered instance. The registered trigger function is only called when the resetOnRemaster environment variable is set to t.")
("cdfRemasterAction"
"cdfRemasterAction(
[ ?noFormInitCall g_noFormInitCall ]
[ ?noFormDoneCall g_noFormDoneCall ]
[ ?paramList g_paramList ]
[ ?paramCallbacks g_paramCallbacks ]

)
=> l_returnDPL"
"Helper function for the CDF remastering callback function that is registered using cdfRegRemasterTrigger. The callback function is expected to return a SKILL disembodied property list (DPL) having specific named properties. The cdfRemasterAction function constructs this DPL from its key arguments.")
("cdfUnregRemasterTrigger"
"cdfUnregRemasterTrigger(
)
=> l_ids / nil"
"Unregisters a trigger previously registered with cdfRegRemasterTrigger. The callback infrastructure is only called when the resetOnRemaster environment variable is set to t.")