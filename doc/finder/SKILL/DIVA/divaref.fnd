;SKILL Language Functions
("ivCallProc"
"ivCallProc( procedure )"
"You can place this command anywhere in the rules file. Placing this command in a DRC rule deck will only provide access to the layout view. Any marker generating rules which execute before the ivCallProc will result in the markers being present in the layout view. It is recommended that markers not be modified though use of the ivCallProc command. Markers stored in the ivEDB error database are not accessable from within an ivCallProc. Depending on where you place this command in an Extract rule deck, it has the following results:")
("ivGetCellView"
"ivGetCellView ()"
"From the rules file, this procedure gets the database ID of the layout cellview being processed, from which the cell, library, and techfile can be accessed. Properties associated with these are available for use in the rules.")
("ivCompilingFor"
"ivCompilingFor (string...)"
"From the rules file, this procedure returns t if any of the strings passed as arguments contain the constant diva. It is expected that the results of calling the procedure will be used in a SKILL if statement. You can use the SKILL statement to select the Diva rules in a rule deck containing both Diva and Assura rules.")
("avSwitch"
"avSwitch (string...)"
"From the rules file, this procedure returns t if the string passed as an argument is a switch name set by the user through the use of the -set option in the ivVerify or LVS commands. Otherwise, avSwitch() returns nil. You can use this procedure to select rules in the rules deck.")
("ivConcICe"
"ivConcICe(
?cell
?resModelData
?capModelData
[?ConcICeName]
[?coupling]
[?accuracy]
) => t / nil"
"Starts the ConcICe RC network reduction section of the layout verification program. Each of the arguments is a keyword preceded by a question mark (?). You must give each keyword a value, as indicated below. The ?cell, ?resModelData, and ?capModelData keywords are required, the other keywords are optional.")
("ivCreatePCells"
"ivCreatePCells( filename ) => t/nil"
"This command creates parameterized versions of existing cells for the display of devices created by the device extraction commands.")
("ivDRC"
"ivDRC(
?cell
[?area]
[?echo]
[?edb]
[?full]
[?hier]
[?optimize]
[?imm]
[?inc]
[?join]
[?limitRule]
[?limitRun]
[?rsf]
[?rulesFromUnix]
[?rulesLibName]
[?rulesFilePath
[?set]
) => t / nil"
"Starts the DRC section of the layout verification program. Each of the arguments is a keyword preceded by a question mark (?). You must give each keyword a value or a symbolic name set to the value.The ?cell argument is required; the other arguments are optional.")
("ivERC"
"ivERC( 
runDir
libName
cellName
viewName
netlist
jobPriority
rulesFromUnix
rulesLibName
rulesFilePath
machine
) => t / nil"
"Starts the ERC program of the layout verification system. All arguments are required.")
("ivExtract"
"ivExtract(
?cell
[?echo]
[?edb]
[?excellName]
[?extractedName]
[?full]
[?hier]
[?imm]
[?inc]
[?join]
[?limitRule]
[?limitRun]
[?macro]
[?rsf]
[?rulesFromUnix]
[?rulesFilePath]
[?rulesLibName]
[?set]
) => t / nil"
"Invokes the Extraction section of the layout verification program. The ?cell argument is required; the other arguments are optional.")
("ivLVS"
"ivLVS( 
runDir
layoutLibName
layoutCellName
layoutViewName
netlistLayout 
schematicLibName
schematicCellName 
schematicViewName 
netlistSchematic 
deviceFixing 
noRewire 
termCorr 
useFileCorr 
corrFile 
xref 
jobPriority
rulesFromUnix
rulesLibName
rulesFilePath
machine
switches
runInBg
) => t / nil"
"Invokes the Layout Versus Schematic (LVS) Comparison program of the layout verification system. All arguments are required.")
("ivVerify"
"ivVerify ( function [cell] [view] 
[-lib library]
[-dir directory_name]
[-rsf run_specific_rules_name]
[-set switch_name] ...
[-full]
[-hier]
[-echo]
[-edb directory_name]
[-limitRule n]
[-limitRun n]
[-macro]
[-optimize]
[-imm]
[-inc]
[-join]
[-area]
[-z]
[-rl rules_lib_name]
[-rf rules_file_name]
[-ru unix_file_path]
[-extracted]
[-excell] 
) => t / nil"
"Runs DRC and extraction from the UNIX environment.")